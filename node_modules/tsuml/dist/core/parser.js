"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts_simple_ast_1 = require("ts-simple-ast");
var ts = require("typescript");
function getAst(tsConfigPath, sourceFilesPaths) {
    var ast = new ts_simple_ast_1.default({
        tsConfigFilePath: tsConfigPath,
        addFilesFromTsConfig: !Array.isArray(sourceFilesPaths)
    });
    if (sourceFilesPaths) {
        ast.addExistingSourceFiles(sourceFilesPaths);
    }
    return ast;
}
exports.getAst = getAst;
function parseClasses(classDeclaration) {
    var className = classDeclaration.getSymbol().getName();
    var propertyDeclarations = classDeclaration.getProperties();
    var methodDeclarations = classDeclaration.getMethods();
    var properties = propertyDeclarations.map(function (property) {
        var sym = property.getSymbol();
        if (sym) {
            return {
                name: sym.getName()
            };
        }
    }).filter(function (p) { return p !== undefined; });
    var methods = methodDeclarations.map(function (method) {
        var sym = method.getSymbol();
        if (sym) {
            return {
                name: sym.getName()
            };
        }
    }).filter(function (p) { return p !== undefined; });
    return { className: className, properties: properties, methods: methods };
}
exports.parseClasses = parseClasses;
function parseInterfaces(interfaceDeclaration) {
    var interfaceName = interfaceDeclaration.getSymbol().getName();
    var propertyDeclarations = interfaceDeclaration.getProperties();
    var methodDeclarations = interfaceDeclaration.getMethods();
    var properties = propertyDeclarations.map(function (property) {
        var sym = property.getSymbol();
        if (sym) {
            return {
                name: sym.getName()
            };
        }
    }).filter(function (p) { return p !== undefined; });
    var methods = methodDeclarations.map(function (method) {
        var sym = method.getSymbol();
        if (sym) {
            return {
                name: sym.getName()
            };
        }
    }).filter(function (p) { return p !== undefined; });
    return { interfaceName: interfaceName, properties: properties, methods: methods };
}
exports.parseInterfaces = parseInterfaces;
function parseHeritageClauses(classDeclaration) {
    var className = classDeclaration.getSymbol().getName();
    var extended = classDeclaration.getExtends();
    var implemented = classDeclaration.getImplements();
    var heritageClauses = [];
    if (extended) {
        var identifier = extended.getChildrenOfKind(ts.SyntaxKind.Identifier)[0];
        if (identifier) {
            var sym = identifier.getSymbol();
            if (sym) {
                heritageClauses.push({
                    clause: sym.getName(),
                    className: className
                });
            }
        }
    }
    if (implemented) {
        implemented.forEach(function (i) {
            var identifier = i.getChildrenOfKind(ts.SyntaxKind.Identifier)[0];
            if (identifier) {
                var sym = identifier.getSymbol();
                if (sym) {
                    heritageClauses.push({
                        clause: sym.getName(),
                        className: className
                    });
                }
            }
        });
    }
    return heritageClauses;
}
exports.parseHeritageClauses = parseHeritageClauses;
