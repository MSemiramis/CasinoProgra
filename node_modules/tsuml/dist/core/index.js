"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = require("chalk");
var lodash_1 = require("lodash");
var io_1 = require("./io");
var parser_1 = require("./parser");
var emitter_1 = require("./emitter");
function getDsl(tsConfigPath, pattern) {
    return __awaiter(this, void 0, void 0, function () {
        var sourceFilesPaths, ast, files, declarations, entities;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, io_1.findFilesByGlob(pattern)];
                case 1:
                    sourceFilesPaths = _a.sent();
                    console.log(chalk_1.default.yellowBright("Matched files:\n" + sourceFilesPaths.reduce(function (p, c) { return "" + p + c + "\n"; }, "")));
                    ast = parser_1.getAst(tsConfigPath, sourceFilesPaths);
                    files = ast.getSourceFiles();
                    declarations = files.map(function (f) {
                        var classes = f.getClasses();
                        var interfaces = f.getInterfaces();
                        var path = f.getFilePath();
                        return {
                            fileName: path,
                            classes: classes.map(parser_1.parseClasses),
                            heritageClauses: classes.map(parser_1.parseHeritageClauses),
                            interfaces: interfaces.map(parser_1.parseInterfaces)
                        };
                    });
                    entities = declarations.map(function (d) {
                        var classes = d.classes.map(function (c) { return emitter_1.emitSingleClass(c.className, c.properties, c.methods); });
                        var interfaces = d.interfaces.map(function (i) { return emitter_1.emitSingleInterface(i.interfaceName, i.properties, i.methods); });
                        var heritageClauses = d.heritageClauses.map(emitter_1.emitHeritageClauses);
                        return classes.concat(interfaces, heritageClauses);
                    });
                    return [2 /*return*/, lodash_1.join(lodash_1.flatten(entities), ",")];
            }
        });
    });
}
function getUrl(tsConfigPath, pattern) {
    return __awaiter(this, void 0, void 0, function () {
        var dsl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getDsl(tsConfigPath, pattern)];
                case 1:
                    dsl = _a.sent();
                    return [4 /*yield*/, io_1.download(dsl)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getUrl = getUrl;
