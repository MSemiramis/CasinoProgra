import { HashSet } from "../utils";
import { FileSystemHost } from "./FileSystemHost";
/**
 * File system host wrapper that allows queuing deletions to the file system.
 */
export declare class FileSystemWrapper {
    private readonly fileSystem;
    private readonly pathsToDelete;
    constructor(fileSystem: FileSystemHost, pathsToDelete?: HashSet<string>);
    queueDelete(path: string): void;
    dequeueDelete(path: string): void;
    flush(): Promise<void>;
    flushSync(): void;
    private getPathsToDeleteForFlush();
    deleteImmediately(path: string): Promise<void>;
    deleteImmediatelySync(path: string): void;
    private deleteSuppressNotFound(path);
    private deleteSuppressNotFoundSync(path);
    fileExistsSync(filePath: string): boolean;
    directoryExists(dirPath: string): Promise<boolean>;
    directoryExistsSync(dirPath: string): boolean;
    readFileSync(filePath: string, encoding: string | undefined): string;
    readDirSync(dirPath: string): string[];
    glob(patterns: string[]): string[];
    getFileSystem(): FileSystemHost;
    getCurrentDirectory(): string;
    getStandardizedAbsolutePath(fileOrDirPath: string, relativeBase?: string): string;
    readFileOrNotExists(filePath: string, encoding: string): false | Promise<string | false>;
    readFileOrNotExistsSync(filePath: string, encoding: string): string | false;
    writeFile(filePath: string, fileText: string): Promise<void>;
    writeFileSync(filePath: string, fileText: string): void;
    mkdirSync(dirPath: string): void;
    mkdir(dirPath: string): Promise<void>;
    private pathsToDeleteHas(path);
    private removeFromPathsToDelete(path);
    private getChildDirsAndFilesFromPathsToDelete(dirPath);
}
