"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("ExpressionWithTypeArguments", function () {
    function getFirstExpressionWithTypeArgs(text) {
        var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
        return firstChild.getExtends();
    }
    describe("getExpression", function () {
        it("should get the compiler expression", function () {
            var expression = getFirstExpressionWithTypeArgs("class MyClass extends MyOtherClass {}");
            chai_1.expect(expression.getExpression().getText()).to.equal("MyOtherClass");
        });
    });
    describe("getTypeArguments", function () {
        it("should return an empty array when there's no type arguments", function () {
            var expression = getFirstExpressionWithTypeArgs("class MyClass extends MyOtherClass {}");
            chai_1.expect(expression.getTypeArguments().length).to.equal(0);
        });
        describe("having two type arguments", function () {
            var expression = getFirstExpressionWithTypeArgs("class MyClass extends MyOtherClass<string, number> {}");
            var typeArgs = expression.getTypeArguments();
            it("should return the right number of type arguments", function () {
                chai_1.expect(typeArgs.length).to.equal(2);
            });
            it("should first have a string", function () {
                chai_1.expect(typeArgs[0].getText()).to.equal("string");
            });
            it("should second have a number", function () {
                chai_1.expect(typeArgs[1].getText()).to.equal("number");
            });
        });
    });
});
