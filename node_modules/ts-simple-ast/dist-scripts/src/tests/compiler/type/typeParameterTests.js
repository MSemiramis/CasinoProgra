"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("TypeParameter", function () {
    function getTypeParameter(text) {
        var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
        var type = sourceFile.getVariableDeclarations()[0].getType();
        return type.getCallSignatures()[0].getTypeParameters()[0];
    }
    describe("getConstraint", function () {
        it("should be undefined when there isn't one", function () {
            var typeParam = getTypeParameter("let t: <T>() => void;");
            chai_1.expect(typeParam.getConstraint()).to.be.undefined;
        });
        it("should get the constraint", function () {
            var typeParam = getTypeParameter("let t: <T extends string>() => void;");
            chai_1.expect(typeParam.getConstraint().getText()).to.equal("string");
        });
    });
    describe("getConstraintOrThrow", function () {
        it("should throw when there isn't one", function () {
            var typeParam = getTypeParameter("let t: <T>() => void;");
            chai_1.expect(function () { return typeParam.getConstraintOrThrow(); }).to.throw();
        });
        it("should get the constraint", function () {
            var typeParam = getTypeParameter("let t: <T extends string>() => void;");
            chai_1.expect(typeParam.getConstraintOrThrow().getText()).to.equal("string");
        });
    });
    describe("getDefault", function () {
        it("should be undefined when there isn't one", function () {
            var typeParam = getTypeParameter("let t: <T>() => void;");
            chai_1.expect(typeParam.getDefault()).to.be.undefined;
        });
        it("should get the default type", function () {
            var typeParam = getTypeParameter("let t: <T = string>() => void;");
            chai_1.expect(typeParam.getDefault().getText()).to.equal("string");
        });
    });
    describe("getDefaultOrThrow", function () {
        it("should throw when there isn't one", function () {
            var typeParam = getTypeParameter("let t: <T>() => void;");
            chai_1.expect(function () { return typeParam.getDefaultOrThrow(); }).to.throw();
        });
        it("should get the default type", function () {
            var typeParam = getTypeParameter("let t: <T = string>() => void;");
            chai_1.expect(typeParam.getDefaultOrThrow().getText()).to.equal("string");
        });
    });
});
