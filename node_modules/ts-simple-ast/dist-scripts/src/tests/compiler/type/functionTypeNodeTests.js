"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
describe("FunctionTypeNode", function () {
    function getNode(text) {
        return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.FunctionType);
    }
    describe("getReturnTypeNodeOrThrow", function () {
        it("should get the return type", function () {
            var descendant = getNode("var t: () => SomeClass;").descendant;
            chai_1.expect(descendant.getReturnTypeNodeOrThrow().getText()).to.equal("SomeClass");
        });
    });
    describe("setReturnType", function () {
        it("should set the return type", function () {
            var descendant = getNode("var t: () => SomeClass;").descendant;
            descendant.setReturnType("string");
            chai_1.expect(descendant.getText()).to.equal("() => string");
        });
    });
    describe("getParameters", function () {
        it("should get the parameters", function () {
            var descendant = getNode("var t: (param1, param2) => SomeClass;").descendant;
            chai_1.expect(descendant.getParameters().map(function (p) { return p.getText(); })).to.deep.equal(["param1", "param2"]);
        });
    });
    describe("addTypeParameter", function () {
        it("should add a type parameter when none exists", function () {
            var descendant = getNode("var t: () => SomeClass;").descendant;
            descendant.addTypeParameter({ name: "T" });
            chai_1.expect(descendant.getText()).to.equal("<T>() => SomeClass");
        });
    });
    describe("getTypeParameters", function () {
        it("should get the type parameters", function () {
            var descendant = getNode("var t: <T, U>(param1, param2) => SomeClass;").descendant;
            chai_1.expect(descendant.getTypeParameters().map(function (p) { return p.getText(); })).to.deep.equal(["T", "U"]);
        });
    });
});
