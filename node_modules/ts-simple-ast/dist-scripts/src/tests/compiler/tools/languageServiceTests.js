"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var errors_1 = require("../../../errors");
var testHelpers_1 = require("../testHelpers");
describe("LanguageService", function () {
    describe("getEmitOutput", function () {
        function checkOutput(output, expected) {
            chai_1.expect(output.getEmitSkipped()).to.equal(expected.emitSkipped);
            chai_1.expect(output.getOutputFiles().length).to.equal(expected.outputFiles.length);
            for (var i = 0; i < expected.outputFiles.length; i++) {
                var actualFile = output.getOutputFiles()[i];
                var expectedFile = expected.outputFiles[i];
                chai_1.expect(actualFile.getFilePath()).to.equal(expectedFile.fileName);
                chai_1.expect(actualFile.getText()).to.equal(expectedFile.text);
                chai_1.expect(actualFile.getWriteByteOrderMark()).to.equal(expectedFile.writeByteOrderMark);
            }
        }
        it("should get the emit output", function () {
            function doTest(sourceFileOrFilePath) {
                var output = sourceFile.global.languageService.getEmitOutput(sourceFileOrFilePath);
                checkOutput(output, {
                    emitSkipped: false,
                    outputFiles: [{
                            fileName: "/" + sourceFile.getBaseName().replace(".ts", ".js"),
                            text: "var t = 5;\n",
                            writeByteOrderMark: false
                        }]
                });
            }
            var sourceFile = testHelpers_1.getInfoFromText("const t = 5;", { compilerOptions: { target: typescript_1.ScriptTarget.ES5 } }).sourceFile;
            doTest(sourceFile);
            doTest(sourceFile.getFilePath());
        });
        it("should get the emit output when specifying a source file", function () {
            var _a = testHelpers_1.getInfoFromText("const t = 5;", { compilerOptions: { target: typescript_1.ScriptTarget.ES5 } }), sourceFile = _a.sourceFile, project = _a.project;
            var output = sourceFile.global.languageService.getEmitOutput(sourceFile);
            checkOutput(output, {
                emitSkipped: false,
                outputFiles: [{
                        fileName: "/" + sourceFile.getBaseName().replace(".ts", ".js"),
                        text: "var t = 5;\n",
                        writeByteOrderMark: false
                    }]
            });
        });
        it("should only emit the declaration file when specified", function () {
            var _a = testHelpers_1.getInfoFromText("const t = 5;", { compilerOptions: { declaration: true } }), sourceFile = _a.sourceFile, project = _a.project;
            var output = sourceFile.global.languageService.getEmitOutput(sourceFile.getFilePath(), true);
            checkOutput(output, {
                emitSkipped: false,
                outputFiles: [{
                        fileName: "/" + sourceFile.getBaseName().replace(".ts", ".d.ts"),
                        text: "declare const t = 5;\n",
                        writeByteOrderMark: false
                    }]
            });
        });
        it("should not emit if there is a declaraton file error", function () {
            var _a = testHelpers_1.getInfoFromText("class MyClass {}\n export class Test extends MyClass {}\n", { compilerOptions: { declaration: true } }), sourceFile = _a.sourceFile, project = _a.project;
            var output = sourceFile.global.languageService.getEmitOutput(sourceFile.getFilePath(), true);
            checkOutput(output, {
                emitSkipped: true,
                outputFiles: [{
                        fileName: "/" + sourceFile.getBaseName().replace(".ts", ".d.ts"),
                        text: "export declare class Test extends MyClass {\n}\n",
                        writeByteOrderMark: false
                    }]
            });
        });
        it("should throw when the specified file does not exist", function () {
            var project = testHelpers_1.getInfoFromText("").project;
            chai_1.expect(function () { return project.getLanguageService().getEmitOutput("nonExistentFile.ts"); }).to.throw(errors_1.FileNotFoundError);
        });
    });
});
