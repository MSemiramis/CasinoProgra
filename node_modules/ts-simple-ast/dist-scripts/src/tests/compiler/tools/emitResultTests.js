"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var Project_1 = require("../../../Project");
var testHelpers = require("../../testHelpers");
describe("EmitResult", function () {
    it("should get the emit result when there are no errors", function () {
        var fileSystem = testHelpers.getFileSystemHostWithFiles([]);
        var project = new Project_1.Project({ compilerOptions: { noLib: true, outDir: "dist" } }, fileSystem);
        project.createSourceFile("file1.ts", "const num1 = 1;");
        project.createSourceFile("file2.ts", "const num2 = 2;");
        var result = project.emit();
        chai_1.expect(result.compilerObject).to.not.be.undefined;
        chai_1.expect(result.getEmitSkipped()).to.be.false;
        chai_1.expect(result.getDiagnostics().length).to.equal(0);
    });
    it("should get the emit result when there are errors", function () {
        var fileSystem = testHelpers.getFileSystemHostWithFiles([]);
        var project = new Project_1.Project({ compilerOptions: { noLib: true, outDir: "dist", noEmitOnError: true } }, fileSystem);
        project.createSourceFile("file1.ts", "const num1;");
        var result = project.emit();
        chai_1.expect(result.getEmitSkipped()).to.be.true;
        var diagnostics = result.getDiagnostics();
        var filteredDiagnostics = diagnostics.map(function (d) { return d.getMessageText(); }).filter(function (d) { return d.indexOf("Cannot find global type"); });
        chai_1.expect(filteredDiagnostics.length).to.equal(1);
        chai_1.expect(filteredDiagnostics[0]).to.equal("'const' declarations must be initialized.");
    });
});
