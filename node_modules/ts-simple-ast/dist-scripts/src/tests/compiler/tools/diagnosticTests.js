"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
describe("Diagnostic", function () {
    var _a = testHelpers_1.getInfoFromText("const a: string;", { disableErrorCheck: true }), project = _a.project, sourceFile = _a.sourceFile;
    project.createSourceFile("file.ts", "interface MyInterface { declare prop: string; }");
    var diagnostics = project.getDiagnostics();
    var constError = diagnostics[1];
    it("should have two errors overall", function () {
        chai_1.expect(diagnostics.length).to.equal(2);
    });
    describe("getting diagnostics from a source file", function () {
        var sourceFileDiagnostics = sourceFile.getDiagnostics();
        it("should have the correct error in the original source file", function () {
            chai_1.expect(sourceFileDiagnostics.length).to.equal(1);
        });
    });
    describe("getMessageText", function () {
        it("should get the message text", function () {
            chai_1.expect(constError.getMessageText()).to.equal("'const' declarations must be initialized.");
        });
    });
    describe("getCategory", function () {
        it("should get the category", function () {
            chai_1.expect(constError.getCategory()).to.equal(typescript_1.DiagnosticCategory.Error);
        });
    });
    describe("getCode", function () {
        it("should get the code", function () {
            chai_1.expect(constError.getCode()).to.equal(1155);
        });
    });
    describe("getStart", function () {
        it("should get the start", function () {
            chai_1.expect(constError.getStart()).to.equal(6);
        });
    });
    describe("getLength", function () {
        it("should get the length", function () {
            chai_1.expect(constError.getLength()).to.equal(1);
        });
    });
    describe("getSource", function () {
        it("should get the source", function () {
            chai_1.expect(constError.getSource()).to.be.undefined;
        });
    });
    describe("getSourceFile", function () {
        it("should get the source file", function () {
            chai_1.expect(constError.getSourceFile()).to.equal(sourceFile);
        });
    });
});
