"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var errors = require("../../../errors");
var testHelpers_1 = require("../testHelpers");
describe("NamespaceDeclaration", function () {
    describe("getName", function () {
        function doTest(text, expectedName) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.getName()).to.equal(expectedName);
        }
        it("should get the name when not using dot notation", function () {
            doTest("namespace MyNamespace {}", "MyNamespace");
        });
        it("should get the name when using dot notation", function () {
            doTest("namespace MyNamespace.Inner.MoreInner {}", "MyNamespace.Inner.MoreInner");
        });
    });
    describe("getNameNodes", function () {
        function doTest(text, expectedNames) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.getNameNodes().map(function (n) { return n.getText(); })).to.deep.equal(expectedNames);
        }
        it("should get the name nodes when not using dot notation", function () {
            doTest("namespace MyNamespace {}", ["MyNamespace"]);
        });
        it("should get the name nodes when using dot notation", function () {
            doTest("namespace MyNamespace.Inner.MoreInner {}", ["MyNamespace", "Inner", "MoreInner"]);
        });
    });
    describe("rename", function () {
        it("should rename a namespace that doesn't use dot notation", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace MyNamespace {}").firstChild;
            firstChild.rename("NewName");
            chai_1.expect(firstChild.getFullText()).to.equal("namespace NewName {}");
        });
        it("should throw an exception when passing in a name with a period", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace MyNamespace {}").firstChild;
            chai_1.expect(function () { return firstChild.rename("NewName.Inner"); }).to.throw(errors.NotSupportedError);
        });
        it("should throw an exception when renaming a namespace whose name uses dot notation", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace MyNamespace.MyInner {}").firstChild;
            chai_1.expect(function () { return firstChild.rename("NewName"); }).to.throw(errors.NotSupportedError);
        });
    });
    describe("setName", function () {
        it("should throw an exception when using dot notation because it's not implemented", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace MyNamespace {}").firstChild;
            chai_1.expect(function () { return firstChild.setName("NewName.NewName"); }).to.throw(errors.NotImplementedError);
        });
        it("should throw an exception when setting a namepsace name that already uses dot notation because it's not implemented", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace MyNamespace.Name {}").firstChild;
            chai_1.expect(function () { return firstChild.setName("NewName"); }).to.throw(errors.NotImplementedError);
        });
        it("should set the name when not using dot notation", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace MyNamespace {}").firstChild;
            firstChild.setName("NewName");
            chai_1.expect(firstChild.getText()).to.equal("namespace NewName {}");
        });
    });
    describe("hasNamespaceKeyword", function () {
        it("should have a namespace keyword when it has one", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace Identifier {}").firstChild;
            chai_1.expect(firstChild.hasNamespaceKeyword()).is.true;
        });
        it("should not have a namespace keyword when it doesn't have one", function () {
            var firstChild = testHelpers_1.getInfoFromText("module Identifier {}").firstChild;
            chai_1.expect(firstChild.hasNamespaceKeyword()).is.false;
        });
    });
    describe("hasModuleKeyword", function () {
        it("should have a module keyword when it has one", function () {
            var firstChild = testHelpers_1.getInfoFromText("module Identifier {}").firstChild;
            chai_1.expect(firstChild.hasModuleKeyword()).is.true;
        });
        it("should not have a module keyword when it doesn't have one", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace Identifier {}").firstChild;
            chai_1.expect(firstChild.hasModuleKeyword()).is.false;
        });
    });
    describe("getDeclarationTypeKeyword", function () {
        it("should get the declaration type keyword for a namespace", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace Identifier {}").firstChild;
            chai_1.expect(firstChild.getDeclarationTypeKeyword().getText()).equals("namespace");
        });
        it("should get the declaration type keyword for a module", function () {
            var firstChild = testHelpers_1.getInfoFromText("module Identifier {}").firstChild;
            chai_1.expect(firstChild.getDeclarationTypeKeyword().getText()).equals("module");
        });
    });
    describe("setHasNamespaceKeyword", function () {
        it("should change the declaration type when a module", function () {
            var _a = testHelpers_1.getInfoFromText("module Identifier {}"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setHasNamespaceKeyword();
            chai_1.expect(sourceFile.getText()).equals("namespace Identifier {}");
        });
        it("should change the declaration type when a namespace", function () {
            var _a = testHelpers_1.getInfoFromText("namespace Identifier {}"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setHasNamespaceKeyword(false);
            chai_1.expect(sourceFile.getText()).equals("module Identifier {}");
        });
        it("should do nothing when the same", function () {
            var _a = testHelpers_1.getInfoFromText("namespace Identifier {}"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setHasNamespaceKeyword(true);
            chai_1.expect(sourceFile.getText()).equals("namespace Identifier {}");
        });
    });
    describe("setHasModuleKeyword", function () {
        it("should change the declaration type when a namespace", function () {
            var _a = testHelpers_1.getInfoFromText("namespace Identifier {}"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setHasModuleKeyword();
            chai_1.expect(sourceFile.getText()).equals("module Identifier {}");
        });
        it("should change the declaration type when a module", function () {
            var _a = testHelpers_1.getInfoFromText("module Identifier {}"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setHasModuleKeyword(false);
            chai_1.expect(sourceFile.getText()).equals("namespace Identifier {}");
        });
    });
    describe("fill", function () {
        function doTest(startingCode, structure, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startingCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.fill(structure);
            chai_1.expect(firstChild.getText()).to.equal(expectedCode);
        }
        it("should not modify anything if the structure doesn't change anything", function () {
            doTest("namespace Identifier {\n}", {}, "namespace Identifier {\n}");
        });
        it("should modify when changed", function () {
            var structure = {
                hasModuleKeyword: true
            };
            doTest("namespace Identifier {\n}", structure, "module Identifier {\n}");
        });
    });
    describe("remove", function () {
        function doTest(text, index, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            sourceFile.getNamespaces()[index].remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should remove the namespace declaration", function () {
            doTest("namespace I {}\n\nnamespace J {}\n\nnamespace K {}", 1, "namespace I {}\n\nnamespace K {}");
        });
    });
});
