"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("NamespaceChildableNode", function () {
    describe("getParentNamespace", function () {
        it("should get the parent namespace when not using dot notation", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace MyNamespace { class MyClass {} }").firstChild;
            chai_1.expect(firstChild.getClasses()[0].getParentNamespace()).to.equal(firstChild);
        });
        it("should get the parent namespace when using dot notation", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace MyNamespace.MyOtherNamespace { class MyClass {} }").firstChild;
            chai_1.expect(firstChild.getClasses()[0].getParentNamespace()).to.equal(firstChild);
        });
        it("should get the parent namespace when using dot notation with the module keyword", function () {
            var firstChild = testHelpers_1.getInfoFromText("module MyNamespace.MyOtherNamespace { class MyClass {} }").firstChild;
            chai_1.expect(firstChild.getClasses()[0].getParentNamespace()).to.equal(firstChild);
        });
        it("should get the parent namespace for variable statements", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace MyNamespace.MyOtherNamespace { const v; }").firstChild;
            chai_1.expect(firstChild.getVariableStatements()[0].getParentNamespace()).to.equal(firstChild);
        });
        it("should return undefined when not in a namespace", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace MyNamespace.MyOtherNamespace { }").firstChild;
            chai_1.expect(firstChild.getParentNamespace()).to.equal(undefined);
        });
    });
});
