"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("Signature", function () {
    function getSignature(text) {
        var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
        var type = sourceFile.getVariableDeclarations()[0].getType();
        return type.getCallSignatures()[0];
    }
    describe("getTypeParameters", function () {
        it("should return an empty array when there are none", function () {
            var signature = getSignature("let t: () => void;");
            chai_1.expect(signature.getTypeParameters().length).to.equal(0);
        });
        it("should get the type parameters", function () {
            var signature = getSignature("let t: <T>() => T;");
            chai_1.expect(signature.getTypeParameters().map(function (t) { return t.getText(); })).to.deep.equal(["T"]);
        });
    });
    describe("getParameters", function () {
        it("should return an empty array when there are none", function () {
            var signature = getSignature("let t: () => void;");
            chai_1.expect(signature.getParameters().length).to.deep.equal(0);
        });
        it("should get the parameters", function () {
            var signature = getSignature("let t: (a) => void;");
            chai_1.expect(signature.getParameters().map(function (p) { return p.getName(); })).to.deep.equal(["a"]);
        });
    });
    describe("getReturnType", function () {
        it("should get the return type", function () {
            var signature = getSignature("let t: (a) => void;");
            chai_1.expect(signature.getReturnType().getText()).to.equal("void");
        });
    });
    describe("getDocumentationComments", function () {
        it("should be empty when they don't exist", function () {
            var signature = getSignature("let t: (a) => void;");
            chai_1.expect(signature.getDocumentationComments().length).to.equal(0);
        });
        it("should get the doc comments when they exist", function () {
            var signature = getSignature("\ninterface MyInterface {\n    /**\n     * Docs\n     */\n    /**\n     * Docs 2\n     */\n    () => void;\n}\nlet t: MyInterface;\n");
            chai_1.expect(signature.getDocumentationComments().map(function (c) { return ({ text: c.getText(), kind: c.getKind() }); })).to.deep.equal([
                { text: "Docs", kind: "text" },
                { text: "\n", kind: "lineBreak" },
                { text: "Docs 2", kind: "text" }
            ]);
        });
    });
    describe("getJsDocTags", function () {
        it("should be empty when they don't exist", function () {
            var signature = getSignature("\ninterface MyInterface {\n    /**\n     * Docs\n     */\n    /**\n     * Docs 2\n     */\n    () => void;\n}\nlet t: MyInterface;\n");
            chai_1.expect(signature.getJsDocTags().length).to.equal(0);
        });
        it("should get the js doc tags when they exist", function () {
            var signature = getSignature("\ninterface MyInterface {\n    /**\n     * @property Testing.\n     */\n    (a) => void;\n}\nlet t: MyInterface;\n");
            chai_1.expect(signature.getJsDocTags().map(function (c) { return ({ name: c.getName(), text: c.getText() }); })).to.deep.equal([
                { name: "property", text: "Testing." }
            ]);
        });
    });
});
