"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var compiler_1 = require("../../../compiler");
var testHelpers_1 = require("../testHelpers");
describe("SyntaxList", function () {
    describe("insertChildText", function () {
        // most of these tests are in StatementedNode
        it("should add a class member", function () {
            var _a = testHelpers_1.getInfoFromText("class MyClass {\n}\n"), sourceFile = _a.sourceFile, firstChild = _a.firstChild;
            firstChild.getChildSyntaxListOrThrow().addChildText(function (writer) {
                writer.write("get myNumber()").block(function () {
                    writer.writeLine("return 5;");
                });
            });
            chai_1.expect(sourceFile.getFullText()).to.equal("class MyClass {\n    get myNumber() {\n        return 5;\n    }\n}\n");
        });
    });
    describe("addChildText", function () {
        function doSourceFileTest(code, statements, expectedLength, expectedCode) {
            var sourceFile = testHelpers_1.getInfoFromText(code).sourceFile;
            var nodes = sourceFile.getChildSyntaxListOrThrow().addChildText(statements);
            chai_1.expect(nodes.length).to.equal(expectedLength);
            chai_1.expect(nodes[0]).to.be.instanceOf(compiler_1.Node);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should add the children at the end of a source file", function () {
            doSourceFileTest("function a() {}\nfunction b() {}", "newText;\nsecondText;", 2, "function a() {}\nfunction b() {}\nnewText;\nsecondText;");
        });
    });
});
