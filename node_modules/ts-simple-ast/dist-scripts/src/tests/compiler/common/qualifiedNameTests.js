"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
describe("QualifiedName", function () {
    function getQualifiedName(text) {
        var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
        var typeRefNode = sourceFile.getVariableDeclarations()[0].getTypeNodeOrThrow();
        var qualifiedName = typeRefNode.getTypeName();
        chai_1.expect(qualifiedName.getKind()).to.equal(typescript_1.SyntaxKind.QualifiedName);
        return qualifiedName;
    }
    describe("getRight", function () {
        it("should get the identifier on the right", function () {
            var qualifiedName = getQualifiedName("const t: Some.Qualified.Name<string>");
            chai_1.expect(qualifiedName.getRight().getText()).to.equal("Name");
        });
    });
    describe("getLeft", function () {
        it("should get the qualified name on the left while it lasts", function () {
            var qualifiedName = getQualifiedName("const t: Some.Qualified.Name<string>");
            chai_1.expect(qualifiedName.getLeft().getText()).to.equal("Some.Qualified");
            var leftQualifiedName = qualifiedName.getLeft();
            chai_1.expect(leftQualifiedName.getRight().getText()).to.equal("Qualified");
            chai_1.expect(leftQualifiedName.getRight().getKind()).to.equal(typescript_1.SyntaxKind.Identifier);
            chai_1.expect(leftQualifiedName.getLeft().getText()).to.equal("Some");
            chai_1.expect(leftQualifiedName.getLeft().getKind()).to.equal(typescript_1.SyntaxKind.Identifier);
        });
    });
});
