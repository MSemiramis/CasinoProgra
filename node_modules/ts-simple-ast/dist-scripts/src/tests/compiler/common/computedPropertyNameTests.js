"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
function getInfoFromTextWithFirstInterfaceProperty(text) {
    var obj = testHelpers_1.getInfoFromText(text);
    var firstProp = obj.firstChild.getProperties()[0];
    return __assign({}, obj, { firstProp: firstProp });
}
describe("ComputedPropertyName", function () {
    describe("getExpression", function () {
        function doTest(text, expectedText) {
            var firstProp = getInfoFromTextWithFirstInterfaceProperty(text).firstProp;
            var computedPropertyName = firstProp.getNameNode();
            chai_1.expect(computedPropertyName.getExpression().getText()).to.equal(expectedText);
        }
        it("should get the correct expression", function () {
            doTest("interface MyInterface { [5]: string; }", "5");
        });
    });
});
