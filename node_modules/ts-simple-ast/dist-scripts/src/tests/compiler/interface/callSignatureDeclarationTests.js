"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("CallSignatureDeclaration", function () {
    function getFirstCallSignatureWithInfo(code) {
        var opts = testHelpers_1.getInfoFromText(code);
        return __assign({}, opts, { firstCallSignature: opts.firstChild.getCallSignatures()[0] });
    }
    describe("fill", function () {
        function doTest(code, structure, expectedCode) {
            var _a = getFirstCallSignatureWithInfo(code), firstCallSignature = _a.firstCallSignature, sourceFile = _a.sourceFile;
            firstCallSignature.fill(structure);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should not change when nothing is set", function () {
            doTest("interface Identifier { (): any; }", {}, "interface Identifier { (): any; }");
        });
        it("should change when setting", function () {
            doTest("interface Identifier { (): any; }", { returnType: "string", typeParameters: [{ name: "T" }] }, "interface Identifier { <T>(): string; }");
        });
    });
    describe("remove", function () {
        function doTest(code, indexToRemove, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(code), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.getCallSignatures()[indexToRemove].remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should remove when it's the only member", function () {
            doTest("interface Identifier {\n    (): string;\n}", 0, "interface Identifier {\n}");
        });
        it("should remove when it's the first member", function () {
            doTest("interface Identifier {\n    (): string;\n    prop: string;\n    (): string;\n}", 0, "interface Identifier {\n    prop: string;\n    (): string;\n}");
        });
        it("should remove when it's the middle member", function () {
            doTest("interface Identifier {\n    (): string;\n    (): number;\n    (): Date;\n}", 1, "interface Identifier {\n    (): string;\n    (): Date;\n}");
        });
        it("should remove when it's the last member", function () {
            doTest("interface Identifier {\n    (): string;\n    (): number;\n}", 1, "interface Identifier {\n    (): string;\n}");
        });
        it("should only remove the new signature specified", function () {
            doTest("interface Identifier {\n    (): string;\n    (param: number): string;\n    (t: string): string;\n}", 1, "interface Identifier {\n    (): string;\n    (t: string): string;\n}");
        });
    });
});
