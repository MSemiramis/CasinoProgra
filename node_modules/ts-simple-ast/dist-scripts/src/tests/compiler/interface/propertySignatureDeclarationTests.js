"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("PropertySignature", function () {
    function getFirstPropertyWithInfo(code) {
        var opts = testHelpers_1.getInfoFromText(code);
        return __assign({}, opts, { firstProperty: opts.firstChild.getProperties()[0] });
    }
    describe("fill", function () {
        function doTest(code, structure, expectedCode) {
            var _a = getFirstPropertyWithInfo(code), firstProperty = _a.firstProperty, sourceFile = _a.sourceFile;
            firstProperty.fill(structure);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should not change when nothing is set", function () {
            doTest("interface Identifier { prop: string; }", {}, "interface Identifier { prop: string; }");
        });
        it("should change when setting", function () {
            doTest("interface Identifier { prop: string; }", { type: "number" }, "interface Identifier { prop: number; }");
        });
    });
    describe("remove", function () {
        function doTest(code, nameToRemove, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(code), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.getProperty(nameToRemove).remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should remove when it's the only member", function () {
            doTest("interface Identifier {\n    member: string;\n}", "member", "interface Identifier {\n}");
        });
        it("should remove when it's the first member", function () {
            doTest("interface Identifier {\n    member: string;\n    method(): string;\n    member2: string;\n}", "member", "interface Identifier {\n    method(): string;\n    member2: string;\n}");
        });
        it("should remove when it's the middle member", function () {
            doTest("interface Identifier {\n    member: string;\n    member2: string;\n    member3: string;\n}", "member2", "interface Identifier {\n    member: string;\n    member3: string;\n}");
        });
        it("should remove when it's the last member", function () {
            doTest("interface Identifier {\n    member: string;\n    member2: string;\n}", "member2", "interface Identifier {\n    member: string;\n}");
        });
    });
});
