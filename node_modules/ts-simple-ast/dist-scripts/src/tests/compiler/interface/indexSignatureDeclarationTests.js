"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("IndexSignatureDeclaration", function () {
    function getFirstIndexSignatureWithInfo(code) {
        var opts = testHelpers_1.getInfoFromText(code);
        return __assign({}, opts, { firstIndexSignature: opts.firstChild.getIndexSignatures()[0] });
    }
    describe("fill", function () {
        function doTest(code, structure, expectedCode) {
            var _a = getFirstIndexSignatureWithInfo(code), firstIndexSignature = _a.firstIndexSignature, sourceFile = _a.sourceFile;
            firstIndexSignature.fill(structure);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should not change when nothing is set", function () {
            doTest("interface Identifier { [key: string]: number; }", {}, "interface Identifier { [key: string]: number; }");
        });
        it("should change when setting", function () {
            var allProps = {
                docs: [{ description: "Desc" }],
                keyName: "newKeyName",
                keyType: "number",
                returnType: "Date",
                isReadonly: true
            };
            doTest("interface Identifier {\n    [key: string]: SomeReference;\n}", allProps, "interface Identifier {\n    /**\n     * Desc\n     */\n    readonly [newKeyName: number]: Date;\n}");
        });
    });
    describe("getKeyName", function () {
        function doTest(code, expectedName) {
            var _a = getFirstIndexSignatureWithInfo(code), firstIndexSignature = _a.firstIndexSignature, sourceFile = _a.sourceFile;
            chai_1.expect(firstIndexSignature.getKeyName()).to.equal(expectedName);
        }
        it("should get the key name", function () {
            doTest("interface Identifier { [keyName: string]: number; }", "keyName");
        });
    });
    describe("getKeyNameNode", function () {
        function doTest(code, expectedName) {
            var _a = getFirstIndexSignatureWithInfo(code), firstIndexSignature = _a.firstIndexSignature, sourceFile = _a.sourceFile;
            chai_1.expect(firstIndexSignature.getKeyNameNode().getText()).to.equal(expectedName);
        }
        it("should get the key name node", function () {
            doTest("interface Identifier { [keyName: string]: number; }", "keyName");
        });
    });
    describe("setKeyName", function () {
        function doTest(code, name, expectedCode) {
            var _a = getFirstIndexSignatureWithInfo(code), firstIndexSignature = _a.firstIndexSignature, sourceFile = _a.sourceFile;
            firstIndexSignature.setKeyName(name);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should set the key name", function () {
            doTest("interface Identifier { [keyName: string]: number; }", "newKeyName", "interface Identifier { [newKeyName: string]: number; }");
        });
    });
    describe("getKeyType", function () {
        function doTest(code, expected) {
            var _a = getFirstIndexSignatureWithInfo(code), firstIndexSignature = _a.firstIndexSignature, sourceFile = _a.sourceFile;
            chai_1.expect(firstIndexSignature.getKeyType().getText()).to.equal(expected);
        }
        it("should get the key type", function () {
            doTest("interface Identifier { [keyName: string]: number; }", "string");
        });
    });
    describe("getKeyTypeNode", function () {
        function doTest(code, expectedName) {
            var _a = getFirstIndexSignatureWithInfo(code), firstIndexSignature = _a.firstIndexSignature, sourceFile = _a.sourceFile;
            chai_1.expect(firstIndexSignature.getKeyTypeNode().getText()).to.equal(expectedName);
        }
        it("should get the key type node", function () {
            doTest("interface Identifier { [keyName: string]: number; }", "string");
        });
    });
    describe("setKeyType", function () {
        function doTest(code, name, expectedCode) {
            var _a = getFirstIndexSignatureWithInfo(code), firstIndexSignature = _a.firstIndexSignature, sourceFile = _a.sourceFile;
            firstIndexSignature.setKeyType(name);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should set the key type", function () {
            doTest("interface Identifier { [keyName: string]: number; }", "number", "interface Identifier { [keyName: number]: number; }");
        });
    });
    describe("getReturnType", function () {
        function doTest(code, expected) {
            var _a = getFirstIndexSignatureWithInfo(code), firstIndexSignature = _a.firstIndexSignature, sourceFile = _a.sourceFile;
            chai_1.expect(firstIndexSignature.getReturnType().getText()).to.equal(expected);
        }
        it("should get the return type", function () {
            doTest("interface Identifier { [keyName: string]: number; }", "number");
        });
    });
    describe("getReturnTypeNode", function () {
        function doTest(code, expectedName) {
            var _a = getFirstIndexSignatureWithInfo(code), firstIndexSignature = _a.firstIndexSignature, sourceFile = _a.sourceFile;
            chai_1.expect(firstIndexSignature.getReturnTypeNode().getText()).to.equal(expectedName);
        }
        it("should get the return type node", function () {
            doTest("interface Identifier { [keyName: string]: number; }", "number");
        });
    });
    describe("setReturnType", function () {
        function doTest(code, name, expectedCode) {
            var _a = getFirstIndexSignatureWithInfo(code), firstIndexSignature = _a.firstIndexSignature, sourceFile = _a.sourceFile;
            firstIndexSignature.setReturnType(name);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should set the return type", function () {
            doTest("interface Identifier { [keyName: string]: number; }", "Date", "interface Identifier { [keyName: string]: Date; }");
        });
    });
    describe("setIsReadonly", function () {
        function doTest(code, value, expectedCode) {
            var _a = getFirstIndexSignatureWithInfo(code), firstIndexSignature = _a.firstIndexSignature, sourceFile = _a.sourceFile;
            firstIndexSignature.setIsReadonly(value);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should set as readonly", function () {
            doTest("interface Identifier { [keyName: string]: number; }", true, "interface Identifier { readonly [keyName: string]: number; }");
        });
        it("should set as not readonly", function () {
            doTest("interface Identifier { readonly [keyName: string]: number; }", false, "interface Identifier { [keyName: string]: number; }");
        });
    });
    describe("remove", function () {
        function doTest(code, indexToRemove, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(code), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.getIndexSignatures()[indexToRemove].remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should remove when it's the only member", function () {
            doTest("interface Identifier {\n    [key: string]: string;\n}", 0, "interface Identifier {\n}");
        });
        it("should remove when it's the first member", function () {
            doTest("interface Identifier {\n    [key: string]: string;\n    prop: string;\n    [key: string]: string;\n}", 0, "interface Identifier {\n    prop: string;\n    [key: string]: string;\n}");
        });
        it("should remove when it's the middle member", function () {
            doTest("interface Identifier {\n    [key: string]: string;\n    [key2: number]: number;\n    [key3: number]: Date;\n}", 1, "interface Identifier {\n    [key: string]: string;\n    [key3: number]: Date;\n}");
        });
        it("should remove when it's the last member", function () {
            doTest("interface Identifier {\n    [key: string]: string;\n    [key2: number]: number;\n}", 1, "interface Identifier {\n    [key: string]: string;\n}");
        });
        it("should only remove the new signature specified", function () {
            doTest("interface Identifier {\n    [key: string]: string;\n    [key2: number]: string;\n    [key3: number]: Date;\n}", 1, "interface Identifier {\n    [key: string]: string;\n    [key3: number]: Date;\n}");
        });
    });
});
