"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("ReturnStatement", function () {
    describe("getExpressionOrThrow", function () {
        it("should get the expression when it exists", function () {
            var firstChild = testHelpers_1.getInfoFromText("return t;").firstChild;
            chai_1.expect(firstChild.getExpressionOrThrow().getText()).to.equal("t");
        });
        it("should return throw when it doesn't exist", function () {
            var firstChild = testHelpers_1.getInfoFromText("return;").firstChild;
            chai_1.expect(function () { return firstChild.getExpressionOrThrow(); }).to.throw();
        });
    });
    describe("getExpression", function () {
        it("should get the expression when it exists", function () {
            var firstChild = testHelpers_1.getInfoFromText("return t;").firstChild;
            chai_1.expect(firstChild.getText()).to.equal("return t;");
            chai_1.expect(firstChild.getExpression().getText()).to.equal("t");
        });
        it("should return undefined when it doesn't exist", function () {
            var firstChild = testHelpers_1.getInfoFromText("return;").firstChild;
            chai_1.expect(firstChild.getExpression()).to.be.undefined;
        });
    });
    describe("remove", function () {
        function doTest(text, index, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            sourceFile.getChildSyntaxListOrThrow().getChildren()[index].remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should remove the expression statement", function () {
            doTest("return 1;\nreturn 2;\nreturn 3;", 1, "return 1;\nreturn 3;");
        });
    });
});
