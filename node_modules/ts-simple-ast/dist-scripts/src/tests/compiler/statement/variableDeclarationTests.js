"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("VariableDeclaration", function () {
    describe("remove", function () {
        describe("removing from variable statement", function () {
            function doTest(text, index, expectedText) {
                var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
                sourceFile.getVariableDeclarations()[index].remove();
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            }
            it("should remove the statement when the only declaration", function () {
                doTest("const t = '';\nconst v = '';\nconst u = '';", 1, "const t = '';\nconst u = '';");
            });
            it("should remove the variable declaration when the first", function () {
                doTest("const t = 1, u = 2;", 0, "const u = 2;");
            });
            it("should remove the variable declaration when in the middle", function () {
                doTest("const t = 1, u = 2, v = 3;", 1, "const t = 1, v = 3;");
            });
            it("should remove the variable declaration when the last", function () {
                doTest("const t = 1, u = 2;", 1, "const t = 1;");
            });
        });
        describe("removing from catch clause", function () {
            function doTest(text, expectedText) {
                var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
                var tryStatement = sourceFile.getStatements()[0];
                tryStatement.getCatchClauseOrThrow().getVariableDeclarationOrThrow().remove();
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            }
            it("should remove the variable declaration from a catch clause", function () {
                doTest("try {} catch (ex) {}", "try {} catch {}");
            });
        });
    });
    describe("fill", function () {
        function doTest(startCode, structure, expectedCode) {
            var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
            var variableDeclaration = sourceFile.getVariableDeclarations()[0];
            variableDeclaration.fill(structure);
            chai_1.expect(sourceFile.getText()).to.equal(expectedCode);
        }
        it("should fill both an exclamation token and type", function () {
            // needs to be tested because adding an exclamation token when there's no type will do nothing
            doTest("var t;", { hasExclamationToken: true, type: "string" }, "var t!: string;");
        });
    });
});
