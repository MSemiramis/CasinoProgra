"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var compiler_1 = require("../../../../compiler");
var testHelpers_1 = require("../../testHelpers");
describe("StatementedNode", function () {
    describe("insertVariableStatements", function () {
        function doTest(startCode, index, structures, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
            var result = sourceFile.insertVariableStatements(index, structures);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            chai_1.expect(result.length).to.equal(structures.length);
        }
        it("should insert to an empty file", function () {
            doTest("", 0, [{
                    isExported: true,
                    declarationType: compiler_1.VariableDeclarationType.Var,
                    declarations: [{
                            name: "Identifier",
                            initializer: "'test'"
                        }, {
                            name: "Identifier2",
                            type: "number",
                            initializer: "5"
                        }]
                }], "export var Identifier = 'test', Identifier2: number = 5;\n");
        });
        it("should insert at the start with two new lines for a non-variable statement after", function () {
            doTest("namespace Identifier2 {\n}\n", 0, [{ declarations: [{ name: "Identifier1" }] }], "let Identifier1;\n\nnamespace Identifier2 {\n}\n");
        });
        it("should insert at the start with one new line for a variable statement after", function () {
            doTest("let Identifier2: string;\n", 0, [{ declarations: [{ name: "Identifier1", type: "string" }] }], "let Identifier1: string;\nlet Identifier2: string;\n");
        });
        it("should insert at the end of a file with two new lines for a non-variable statement before", function () {
            doTest("namespace Identifier1 {\n}\n", 1, [{ declarations: [{ name: "Identifier2" }] }], "namespace Identifier1 {\n}\n\nlet Identifier2;\n");
        });
        it("should insert in the middle of children", function () {
            doTest("namespace Identifier1 {\n}\n\nnamespace Identifier3 {\n}\n", 1, [{ declarations: [{ name: "Identifier2" }] }], "namespace Identifier1 {\n}\n\nlet Identifier2;\n\nnamespace Identifier3 {\n}\n");
        });
        it("should insert multiple", function () {
            doTest("namespace Identifier1 {\n}\n", 1, [{ declarations: [{ name: "Identifier2" }] }, { declarations: [{ name: "Identifier3" }] }], "namespace Identifier1 {\n}\n\nlet Identifier2;\nlet Identifier3;\n");
        });
        it("should have the expected text adding to non-source file", function () {
            var sourceFile = testHelpers_1.getInfoFromText("namespace Identifier {\n}\n").sourceFile;
            var namespaceDec = sourceFile.getNamespaces()[0];
            namespaceDec.insertVariableStatements(0, [{ declarations: [{ name: "Identifier" }] }]);
            chai_1.expect(sourceFile.getFullText()).to.equal("namespace Identifier {\n    let Identifier;\n}\n");
        });
    });
    describe("insertVariableStatement", function () {
        function doTest(startCode, index, structure, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
            var result = sourceFile.insertVariableStatement(index, structure);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            chai_1.expect(result).to.be.instanceOf(compiler_1.VariableStatement);
        }
        it("should insert", function () {
            doTest("namespace Identifier2 {\n}\n", 0, { declarations: [{ name: "Identifier1" }] }, "let Identifier1;\n\nnamespace Identifier2 {\n}\n");
        });
    });
    describe("addVariableStatements", function () {
        function doTest(startCode, structures, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
            var result = sourceFile.addVariableStatements(structures);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            chai_1.expect(result.length).to.equal(structures.length);
        }
        it("should add multiple", function () {
            doTest("namespace Identifier1 {\n}\n", [{ declarations: [{ name: "Identifier2" }] }, { declarations: [{ name: "Identifier3" }] }], "namespace Identifier1 {\n}\n\nlet Identifier2;\nlet Identifier3;\n");
        });
    });
    describe("addVariableStatement", function () {
        function doTest(startCode, structure, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
            var result = sourceFile.addVariableStatement(structure);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            chai_1.expect(result).to.be.instanceOf(compiler_1.VariableStatement);
        }
        it("should add one", function () {
            doTest("namespace Identifier1 {\n}\n", { declarations: [{ name: "Identifier2" }] }, "namespace Identifier1 {\n}\n\nlet Identifier2;\n");
        });
    });
    var variablesSourceFile = testHelpers_1.getInfoFromText("var Identifier1;\nvar Identifier2, Identifier3;").sourceFile;
    describe("getVariableStatements", function () {
        var statements = variablesSourceFile.getVariableStatements();
        it("should have the expected number of statements", function () {
            chai_1.expect(statements.length).to.equal(2);
        });
        it("should have correct type", function () {
            chai_1.expect(statements[0]).to.be.instanceOf(compiler_1.VariableStatement);
        });
    });
    describe("getVariableStatement", function () {
        it("should get a variable statement when something matches", function () {
            var statement = variablesSourceFile.getVariableStatement(function (s) { return s.getDeclarations().length === 2; });
            chai_1.expect(statement.getDeclarations()[0].getName()).to.equal("Identifier2");
        });
        it("should return undefined when nothing matches", function () {
            var statement = variablesSourceFile.getVariableStatement(function (s) { return s.getDeclarations().length === 5; });
            chai_1.expect(statement).to.be.undefined;
        });
    });
    describe("getVariableStatementOrThrow", function () {
        it("should get a variable statement when something matches", function () {
            var statement = variablesSourceFile.getVariableStatementOrThrow(function (s) { return s.getDeclarations().length === 2; });
            chai_1.expect(statement.getDeclarations()[0].getName()).to.equal("Identifier2");
        });
        it("should throw when nothing matches", function () {
            chai_1.expect(function () { return variablesSourceFile.getVariableStatementOrThrow(function (s) { return s.getDeclarations().length === 5; }); }).to.throw();
        });
    });
    describe("getVariableDeclarations", function () {
        var declarations = variablesSourceFile.getVariableDeclarations();
        it("should have the expected number of variable declarations", function () {
            chai_1.expect(declarations.length).to.equal(3);
        });
        it("should have correct type", function () {
            chai_1.expect(declarations[0]).to.be.instanceOf(compiler_1.VariableDeclaration);
        });
    });
    describe("getVariableDeclaration", function () {
        it("should get a variable declaration by a name", function () {
            chai_1.expect(variablesSourceFile.getVariableDeclaration("Identifier2").getName()).to.equal("Identifier2");
        });
        it("should get a variable declaration by a search function", function () {
            chai_1.expect(variablesSourceFile.getVariableDeclaration(function (c) { return c.getName() === "Identifier1"; }).getName()).to.equal("Identifier1");
        });
        it("should return undefined when the variable declaration doesn't exist", function () {
            chai_1.expect(variablesSourceFile.getVariableDeclaration("asdf")).to.be.undefined;
        });
    });
    describe("getVariableDeclarationOrThrow", function () {
        it("should get a variable declaration by a name", function () {
            chai_1.expect(variablesSourceFile.getVariableDeclarationOrThrow("Identifier2").getName()).to.equal("Identifier2");
        });
        it("should get a variableOrThrow declaration by a earch function", function () {
            chai_1.expect(variablesSourceFile.getVariableDeclarationOrThrow(function (c) { return c.getName() === "Identifier1"; }).getName()).to.equal("Identifier1");
        });
        it("should return undefined OrThrowwhen the variable declaration doesn't exist", function () {
            chai_1.expect(function () { return variablesSourceFile.getVariableDeclarationOrThrow("asdf"); }).to.throw();
        });
    });
});
