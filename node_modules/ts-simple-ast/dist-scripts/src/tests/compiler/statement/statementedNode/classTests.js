"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var compiler_1 = require("../../../../compiler");
var testHelpers_1 = require("../../testHelpers");
describe("StatementedNode", function () {
    describe("insertClasses", function () {
        function doTest(startCode, index, structures, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
            var result = sourceFile.insertClasses(index, structures);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            chai_1.expect(result.length).to.equal(structures.length);
        }
        it("should insert to an empty file", function () {
            doTest("", 0, [{
                    name: "Identifier"
                }], "class Identifier {\n}\n");
        });
        it("should insert at the start of a file", function () {
            doTest("enum Enum {\n}\n", 0, [{ name: "Identifier" }], "class Identifier {\n}\n\nenum Enum {\n}\n");
        });
        it("should insert at the end of a file", function () {
            doTest("enum Enum {\n}\n", 1, [{ name: "Identifier" }], "enum Enum {\n}\n\nclass Identifier {\n}\n");
        });
        it("should insert in the middle of children", function () {
            doTest("class Identifier1 {\n}\n\nclass Identifier3 {\n}\n", 1, [{ name: "Identifier2" }], "class Identifier1 {\n}\n\nclass Identifier2 {\n}\n\nclass Identifier3 {\n}\n");
        });
        it("should insert multiple", function () {
            doTest("class Identifier1 {\n}\n", 1, [{ name: "Identifier2" }, { name: "Identifier3" }], "class Identifier1 {\n}\n\nclass Identifier2 {\n}\n\nclass Identifier3 {\n}\n");
        });
        it("should have the expected text adding to non-source file", function () {
            var sourceFile = testHelpers_1.getInfoFromText("namespace Namespace {\n}\n").sourceFile;
            var namespaceDec = sourceFile.getNamespaces()[0];
            namespaceDec.insertClasses(0, [{
                    name: "Identifier"
                }]);
            chai_1.expect(sourceFile.getFullText()).to.equal("namespace Namespace {\n    class Identifier {\n    }\n}\n");
        });
    });
    describe("insertClass", function () {
        function doTest(startCode, index, structure, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
            var result = sourceFile.insertClass(index, structure);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            chai_1.expect(result).to.be.instanceOf(compiler_1.ClassDeclaration);
        }
        it("should insert", function () {
            doTest("class Identifier2 {\n}\n", 0, { name: "Identifier1" }, "class Identifier1 {\n}\n\nclass Identifier2 {\n}\n");
        });
    });
    describe("addClasses", function () {
        function doTest(startCode, structures, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
            var result = sourceFile.addClasses(structures);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            chai_1.expect(result.length).to.equal(structures.length);
        }
        it("should add multiple", function () {
            doTest("class Identifier1 {\n}\n", [{ name: "Identifier2" }, { name: "Identifier3" }], "class Identifier1 {\n}\n\nclass Identifier2 {\n}\n\nclass Identifier3 {\n}\n");
        });
    });
    describe("addClass", function () {
        function doTest(startCode, structure, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
            var result = sourceFile.addClass(structure);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            chai_1.expect(result).to.be.instanceOf(compiler_1.ClassDeclaration);
        }
        it("should add one", function () {
            doTest("class Identifier1 {\n}\n", { name: "Identifier2" }, "class Identifier1 {\n}\n\nclass Identifier2 {\n}\n");
        });
    });
    describe("getClasses", function () {
        var sourceFile = testHelpers_1.getInfoFromText("class Identifier1 {}\nclass Identifier2 { prop: string; }").sourceFile;
        var classes = sourceFile.getClasses();
        it("should have the expected number of classes", function () {
            chai_1.expect(classes.length).to.equal(2);
        });
        it("should have correct type", function () {
            chai_1.expect(classes[0]).to.be.instanceOf(compiler_1.ClassDeclaration);
        });
    });
    describe("getClass", function () {
        var sourceFile = testHelpers_1.getInfoFromText("class Identifier1 {}\nclass Identifier2 { prop: string; }").sourceFile;
        it("should get a class by a name", function () {
            chai_1.expect(sourceFile.getClass("Identifier2").getName()).to.equal("Identifier2");
        });
        it("should get a class by a search function", function () {
            chai_1.expect(sourceFile.getClass(function (c) { return c.getName() === "Identifier1"; }).getName()).to.equal("Identifier1");
        });
        it("should return undefined when the class doesn't exist", function () {
            chai_1.expect(sourceFile.getClass("asdf")).to.be.undefined;
        });
    });
    describe("getClassOrThrow", function () {
        var sourceFile = testHelpers_1.getInfoFromText("class Identifier1 {}\nclass Identifier2 { prop: string; }").sourceFile;
        it("should get a class by a name", function () {
            chai_1.expect(sourceFile.getClassOrThrow("Identifier2").getName()).to.equal("Identifier2");
        });
        it("should get a class by a search function", function () {
            chai_1.expect(sourceFile.getClassOrThrow(function (c) { return c.getName() === "Identifier1"; }).getName()).to.equal("Identifier1");
        });
        it("should throw when the class doesn't exist", function () {
            chai_1.expect(function () { return sourceFile.getClassOrThrow("asdf"); }).to.throw();
        });
    });
});
