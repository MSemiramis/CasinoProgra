"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var compiler_1 = require("../../../../compiler");
var testHelpers_1 = require("../../testHelpers");
describe("StatementedNode", function () {
    describe("insertNamespaces", function () {
        function doTest(startCode, index, structures, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
            var result = sourceFile.insertNamespaces(index, structures);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            chai_1.expect(result.length).to.equal(structures.length);
        }
        it("should insert to an empty file", function () {
            doTest("", 0, [{
                    name: "Identifier",
                    hasModuleKeyword: true
                }], "module Identifier {\n}\n");
        });
        it("should insert at the start of a file", function () {
            doTest("namespace Identifier2 {\n}\n", 0, [{ name: "Identifier1" }], "namespace Identifier1 {\n}\n\nnamespace Identifier2 {\n}\n");
        });
        it("should insert at the end of a file", function () {
            doTest("namespace Identifier1 {\n}\n", 1, [{ name: "Identifier2" }], "namespace Identifier1 {\n}\n\nnamespace Identifier2 {\n}\n");
        });
        it("should insert in the middle of children", function () {
            doTest("namespace Identifier1 {\n}\n\nnamespace Identifier3 {\n}\n", 1, [{ name: "Identifier2" }], "namespace Identifier1 {\n}\n\nnamespace Identifier2 {\n}\n\nnamespace Identifier3 {\n}\n");
        });
        it("should insert multiple", function () {
            doTest("namespace Identifier1 {\n}\n", 1, [{ name: "Identifier2" }, { name: "Identifier3" }], "namespace Identifier1 {\n}\n\nnamespace Identifier2 {\n}\n\nnamespace Identifier3 {\n}\n");
        });
        it("should have the expected text adding to non-source file", function () {
            var sourceFile = testHelpers_1.getInfoFromText("namespace Namespace {\n}\n").sourceFile;
            var namespaceDec = sourceFile.getNamespaces()[0];
            namespaceDec.insertNamespaces(0, [{
                    name: "Identifier"
                }]);
            chai_1.expect(sourceFile.getFullText()).to.equal("namespace Namespace {\n    namespace Identifier {\n    }\n}\n");
        });
    });
    describe("insertNamespace", function () {
        function doTest(startCode, index, structure, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
            var result = sourceFile.insertNamespace(index, structure);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            chai_1.expect(result).to.be.instanceOf(compiler_1.NamespaceDeclaration);
        }
        it("should insert", function () {
            doTest("namespace Identifier2 {\n}\n", 0, { name: "Identifier1" }, "namespace Identifier1 {\n}\n\nnamespace Identifier2 {\n}\n");
        });
    });
    describe("addNamespaces", function () {
        function doTest(startCode, structures, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
            var result = sourceFile.addNamespaces(structures);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            chai_1.expect(result.length).to.equal(structures.length);
        }
        it("should add multiple", function () {
            doTest("namespace Identifier1 {\n}\n", [{ name: "Identifier2" }, { name: "Identifier3" }], "namespace Identifier1 {\n}\n\nnamespace Identifier2 {\n}\n\nnamespace Identifier3 {\n}\n");
        });
    });
    describe("addNamespace", function () {
        function doTest(startCode, structure, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
            var result = sourceFile.addNamespace(structure);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            chai_1.expect(result).to.be.instanceOf(compiler_1.NamespaceDeclaration);
        }
        it("should add one", function () {
            doTest("namespace Identifier1 {\n}\n", { name: "Identifier2" }, "namespace Identifier1 {\n}\n\nnamespace Identifier2 {\n}\n");
        });
    });
    describe("getNamespaces", function () {
        var sourceFile = testHelpers_1.getInfoFromText("namespace Identifier1 {}\nnamespace Identifier2 {}").sourceFile;
        var namespaces = sourceFile.getNamespaces();
        it("should have the expected number of namespaces", function () {
            chai_1.expect(namespaces.length).to.equal(2);
        });
        it("should have correct type", function () {
            chai_1.expect(namespaces[0]).to.be.instanceOf(compiler_1.NamespaceDeclaration);
        });
    });
    describe("getNamespace", function () {
        var sourceFile = testHelpers_1.getInfoFromText("namespace Identifier1 {}\nnamespace Identifier2 {}").sourceFile;
        it("should get a namespace by a name", function () {
            chai_1.expect(sourceFile.getNamespace("Identifier2").getName()).to.equal("Identifier2");
        });
        it("should get a namespace by a search function", function () {
            chai_1.expect(sourceFile.getNamespace(function (c) { return c.getName() === "Identifier1"; }).getName()).to.equal("Identifier1");
        });
        it("should return undefined when the namespace doesn't exist", function () {
            chai_1.expect(sourceFile.getNamespace("asdf")).to.be.undefined;
        });
    });
    describe("getNamespaceOrThrow", function () {
        var sourceFile = testHelpers_1.getInfoFromText("namespace Identifier1 {}\nnamespace Identifier2 {}").sourceFile;
        it("should get a namespace by a name", function () {
            chai_1.expect(sourceFile.getNamespaceOrThrow("Identifier2").getName()).to.equal("Identifier2");
        });
        it("should get a namespace by a search function", function () {
            chai_1.expect(sourceFile.getNamespaceOrThrow(function (c) { return c.getName() === "Identifier1"; }).getName()).to.equal("Identifier1");
        });
        it("should throw when the namespace doesn't exist", function () {
            chai_1.expect(function () { return sourceFile.getNamespaceOrThrow("asdf"); }).to.throw();
        });
    });
});
