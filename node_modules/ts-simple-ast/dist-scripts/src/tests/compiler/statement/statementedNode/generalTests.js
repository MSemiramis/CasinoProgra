"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var compiler_1 = require("../../../../compiler");
var testHelpers_1 = require("../../testHelpers");
// todo: make tests in other files reusable for StatementedNode. Then retest everything within namespaces and functions.
describe("StatementedNode", function () {
    describe("getting a declaration within a namespace", function () {
        var firstChild = testHelpers_1.getInfoFromText("namespace Namespace1 {\n    class Class1 {}\n}\n").firstChild;
        var classes = firstChild.getClasses();
        it("should have the expected number of classes", function () {
            chai_1.expect(classes.length).to.equal(1);
        });
        it("should have correct type", function () {
            chai_1.expect(classes[0]).to.be.instanceOf(compiler_1.ClassDeclaration);
        });
    });
    describe("getting a declaration within a namespace with dot tokens", function () {
        var firstChild = testHelpers_1.getInfoFromText("namespace Namespace1.Namespace2.Namespace3 { class MyClass {} }\n").firstChild;
        var classes = firstChild.getClasses();
        it("should have the expected number of classes", function () {
            chai_1.expect(classes.length).to.equal(1);
        });
    });
    it("should get items inside a namespace", function () {
        // only need to check for one kind in here
        var firstChild = testHelpers_1.getInfoFromText("namespace Identifier { function function1() {}\nfunction function2() {} }").firstChild;
        var functions = firstChild.getFunctions();
        chai_1.expect(functions.length).to.equal(2);
    });
    it("should get items inside a function", function () {
        // only need to check for one kind in here
        var firstChild = testHelpers_1.getInfoFromText("function Identifier() { function function1() {}\nfunction function2() {} }").firstChild;
        var functions = firstChild.getFunctions();
        chai_1.expect(functions.length).to.equal(2);
    });
});
