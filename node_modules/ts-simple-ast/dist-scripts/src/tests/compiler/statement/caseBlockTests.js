"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
function getCaseBlock(text) {
    var obj = testHelpers_1.getInfoFromText(text);
    var caseBlock = (obj.sourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.CaseBlock));
    return __assign({}, obj, { caseBlock: caseBlock });
}
describe("CaseBlock", function () {
    var firstCase = "case 1: x = 1; break;";
    var secondCase = "case 2: x = 2; break;";
    var thirdCase = "case 3: x = 3; break;";
    var fourthCase = "case 4: x = 4; break;";
    var defaultCase = "default: x = 3; break;";
    function makeSwitch(clauses) {
        return "switch (x) {\n    " + clauses.join("\n    ") + "\n}";
    }
    var switchStatement = makeSwitch([firstCase, secondCase, defaultCase]);
    describe("getClauses", function () {
        function doTest(code, clauses) {
            var caseBlock = getCaseBlock(code).caseBlock;
            chai_1.expect(caseBlock.getClauses().map(function (s) { return s.getText(); })).to.deep.equal(clauses);
        }
        it("should get clauses of a case block", function () {
            doTest(switchStatement, [firstCase, secondCase, defaultCase]);
        });
    });
    describe("removeClauses", function () {
        function doTest(code, range, expectedCode) {
            var _a = getCaseBlock(code), sourceFile = _a.sourceFile, caseBlock = _a.caseBlock;
            var nodes = caseBlock.removeClauses(range);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should remove clauses at the beginning of a case block", function () {
            doTest(switchStatement, [0, 1], makeSwitch([defaultCase]));
        });
        it("should remove clauses in the middle of a case block", function () {
            doTest(switchStatement, [1, 1], makeSwitch([firstCase, defaultCase]));
        });
        it("should remove clauses at the end case block", function () {
            doTest(switchStatement, [1, 2], makeSwitch([firstCase]));
        });
    });
    describe("removeClause", function () {
        function doTest(code, index, expectedCode) {
            var _a = getCaseBlock(code), sourceFile = _a.sourceFile, caseBlock = _a.caseBlock;
            caseBlock.removeClause(index);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should throw when specifying an invalid index", function () {
            var caseBlock = getCaseBlock(switchStatement).caseBlock;
            chai_1.expect(function () { return caseBlock.removeClause(5); }).to.throw();
        });
        it("should remove at the specified index", function () {
            doTest(switchStatement, 1, makeSwitch([firstCase, defaultCase]));
        });
    });
});
