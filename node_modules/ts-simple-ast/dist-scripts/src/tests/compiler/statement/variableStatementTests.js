"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var compiler_1 = require("../../../compiler");
var testHelpers_1 = require("../testHelpers");
describe("VariableStatement", function () {
    describe("getDeclarationType", function () {
        function doTest(code, expectedType) {
            var firstChild = testHelpers_1.getInfoFromText(code).firstChild;
            chai_1.expect(firstChild.getDeclarationType()).to.equal(expectedType);
        }
        it("should get var for a var variable", function () {
            doTest("var myVar;", compiler_1.VariableDeclarationType.Var);
        });
        it("should get let for a let variable", function () {
            doTest("let myVar;", compiler_1.VariableDeclarationType.Let);
        });
        it("should get const for a const variable", function () {
            doTest("const myVar = 3;", compiler_1.VariableDeclarationType.Const);
        });
    });
    describe("getDeclarationTypeKeyword", function () {
        function doTest(code, expectedType) {
            var firstChild = testHelpers_1.getInfoFromText(code).firstChild;
            chai_1.expect(firstChild.getDeclarationTypeKeyword().getText()).to.equal(expectedType);
        }
        it("should get var for a var variable", function () {
            doTest("var myVar;", compiler_1.VariableDeclarationType.Var);
        });
        it("should get let for a let variable", function () {
            doTest("let myVar;", compiler_1.VariableDeclarationType.Let);
        });
        it("should get const for a const variable", function () {
            doTest("const myVar = 3;", compiler_1.VariableDeclarationType.Const);
        });
    });
    describe("setDeclarationType", function () {
        function doTest(code, newType, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(code), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setDeclarationType(newType);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should not change the type when it is the same", function () {
            doTest("var myVar;", compiler_1.VariableDeclarationType.Var, "var myVar;");
        });
        it("should change to let", function () {
            doTest("var myVar;", compiler_1.VariableDeclarationType.Let, "let myVar;");
        });
        it("should change to const", function () {
            doTest("var myVar;", compiler_1.VariableDeclarationType.Const, "const myVar;");
        });
        it("should change to var", function () {
            doTest("let myVar;", compiler_1.VariableDeclarationType.Var, "var myVar;");
        });
    });
    describe("insertDeclarations", function () {
        function doTest(startText, index, structures, expectedText) {
            var _a = testHelpers_1.getInfoFromText(startText), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var result = firstChild.insertDeclarations(index, structures);
            chai_1.expect(result.length).to.equal(structures.length);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should insert declarations at the beginning", function () {
            doTest("export var v4;", 0, [{ name: "v1" }, { name: "v2", type: "string" }, { name: "v3", initializer: "5" }], "export var v1, v2: string, v3 = 5, v4;");
        });
        it("should insert declarations in the middle", function () {
            doTest("var v1, v4;", 1, [{ name: "v2" }, { name: "v3", type: "number", initializer: "5" }], "var v1, v2, v3: number = 5, v4;");
        });
        it("should insert declarations at the end", function () {
            doTest("var v1;", 1, [{ name: "v2" }, { name: "v3" }], "var v1, v2, v3;");
        });
    });
    describe("insertDeclaration", function () {
        function doTest(startText, index, structure, expectedText) {
            var _a = testHelpers_1.getInfoFromText(startText), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var result = firstChild.insertDeclaration(index, structure);
            chai_1.expect(result).to.be.instanceOf(compiler_1.VariableDeclaration);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should insert a declaration", function () {
            doTest("var v1, v3;", 1, { name: "v2" }, "var v1, v2, v3;");
        });
    });
    describe("addDeclarations", function () {
        function doTest(startText, structures, expectedText) {
            var _a = testHelpers_1.getInfoFromText(startText), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var result = firstChild.addDeclarations(structures);
            chai_1.expect(result.length).to.equal(structures.length);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should add declarations", function () {
            doTest("var v1;", [{ name: "v2" }, { name: "v3" }], "var v1, v2, v3;");
        });
    });
    describe("addDeclaration", function () {
        function doTest(startText, structure, expectedText) {
            var _a = testHelpers_1.getInfoFromText(startText), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var result = firstChild.addDeclaration(structure);
            chai_1.expect(result).to.be.instanceOf(compiler_1.VariableDeclaration);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should add a declaration", function () {
            doTest("var v1;", { name: "v2" }, "var v1, v2;");
        });
    });
    describe("remove", function () {
        function doTest(text, index, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            sourceFile.getVariableStatements()[index].remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should remove the variable statement", function () {
            doTest("const t = '';\nconst v = '';\nconst u = '';", 1, "const t = '';\nconst u = '';");
        });
    });
    describe("fill", function () {
        function doTest(text, fillStructure, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            sourceFile.getVariableStatements()[0].fill(fillStructure);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should set the variable declaration type", function () {
            doTest("const t = '';", { declarationType: compiler_1.VariableDeclarationType.Let }, "let t = '';");
        });
        it("should add declarations", function () {
            doTest("const t = '';", { declarations: [{ name: "v2" }, { name: "v3" }] }, "const t = '', v2, v3;");
        });
    });
});
