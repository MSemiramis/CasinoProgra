"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
function getStatement(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.IfStatement).descendant;
}
describe("IfStatement", function () {
    var expression = "1 + 2 === 3";
    var thenStatement = "{ x = 1; }";
    var elseStatement = "{ x = 2; }";
    var statement = "if (" + expression + ") " + thenStatement + " else " + elseStatement;
    describe("getExpression", function () {
        function doTest(text, expectedText) {
            var ifStatement = getStatement(text);
            chai_1.expect(ifStatement.getExpression().getText()).to.equal(expectedText);
        }
        it("should get the correct expression", function () {
            doTest(statement, expression);
        });
    });
    describe("getThenStatement", function () {
        function doTest(text, expectedText) {
            var ifStatement = getStatement(text);
            chai_1.expect(ifStatement.getThenStatement().getText()).to.equal(expectedText);
        }
        it("should get the correct then statement", function () {
            doTest(statement, thenStatement);
        });
    });
    describe("getElseStatement", function () {
        function doTest(text, expectedText) {
            var ifStatement = getStatement(text);
            var value = ifStatement.getElseStatement();
            chai_1.expect(value == null ? value : value.getText()).to.equal(expectedText);
        }
        it("should get the correct else statement", function () {
            doTest(statement, elseStatement);
        });
        it("should get the correct undefined else statement", function () {
            doTest("if (x) { x = 2 }", undefined);
        });
    });
});
