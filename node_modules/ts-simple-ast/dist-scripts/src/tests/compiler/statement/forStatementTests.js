"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
function getStatement(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.ForStatement).descendant;
}
describe("ForStatement", function () {
    var initializer = "let x = 0";
    var condition = "x <= 10";
    var incrementor = "x += 1";
    var statement = "for (" + initializer + "; " + condition + "; " + incrementor + ") {}";
    var emptyStatement = "for (;;) {}";
    var forStatement = getStatement(statement);
    var emptyForStatement = getStatement(emptyStatement);
    describe("getInitializer", function () {
        it("should get the correct initializer", function () {
            chai_1.expect(forStatement.getInitializer().getText()).to.equal(initializer);
        });
        it("should get the correct undefined initializer", function () {
            chai_1.expect(emptyForStatement.getInitializer()).to.be.undefined;
        });
    });
    describe("getInitializerOrThrow", function () {
        it("should should return the initializer", function () {
            chai_1.expect(forStatement.getInitializerOrThrow().getText()).to.equal(initializer);
        });
        it("should throw without an initializer", function () {
            chai_1.expect(function () { return emptyForStatement.getInitializerOrThrow(); }).to.throw();
        });
    });
    describe("getCondition", function () {
        it("should get the correct condition", function () {
            chai_1.expect(forStatement.getCondition().getText()).to.equal(condition);
        });
        it("should get the correct undefined condition", function () {
            chai_1.expect(emptyForStatement.getCondition()).to.be.undefined;
        });
    });
    describe("getConditionOrThrow", function () {
        it("should should return the condition", function () {
            chai_1.expect(forStatement.getConditionOrThrow().getText()).to.equal(condition);
        });
        it("should throw without a condition", function () {
            chai_1.expect(function () { return emptyForStatement.getConditionOrThrow(); }).to.throw();
        });
    });
    describe("getInitializer", function () {
        it("should get the correct incrementor", function () {
            chai_1.expect(forStatement.getIncrementor().getText()).to.equal(incrementor);
        });
        it("should get the correct undefined incrementor", function () {
            chai_1.expect(emptyForStatement.getIncrementor()).to.be.undefined;
        });
    });
    describe("getIncrementorOrThrow", function () {
        it("should should return the incrementor", function () {
            chai_1.expect(forStatement.getIncrementorOrThrow().getText()).to.equal(incrementor);
        });
        it("should throw without an incrementor", function () {
            chai_1.expect(function () { return emptyForStatement.getIncrementorOrThrow(); }).to.throw();
        });
    });
});
