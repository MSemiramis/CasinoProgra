"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
function getStatement(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.TryStatement).descendant;
}
describe("TryStatement", function () {
    var tryBlock = "{ let x = 0; }";
    var catchClause = "catch (x) { console.log(x); }";
    var finallyBlock = "{ let x = 1; }";
    var statement = "try " + tryBlock + " " + catchClause + " finally " + finallyBlock;
    var emptyStatement = "try " + tryBlock;
    var tryStatement = getStatement(statement);
    var emptyTryStatement = getStatement(emptyStatement);
    describe("getTryBlock", function () {
        it("should get the correct try block", function () {
            chai_1.expect(tryStatement.getTryBlock().getText()).to.equal(tryBlock);
        });
    });
    describe("getCatchClause", function () {
        it("should get the correct catch clause", function () {
            chai_1.expect(tryStatement.getCatchClause().getText()).to.equal(catchClause);
        });
        it("should get the correct undefined catch clause", function () {
            chai_1.expect(emptyTryStatement.getCatchClause()).to.be.undefined;
        });
    });
    describe("getCatchClauseOrThrow", function () {
        it("should should return the catch clause", function () {
            chai_1.expect(tryStatement.getCatchClauseOrThrow().getText()).to.equal(catchClause);
        });
        it("should throw without a catch clause", function () {
            chai_1.expect(function () { return emptyTryStatement.getCatchClauseOrThrow(); }).to.throw();
        });
    });
    describe("getFinallyBlock", function () {
        it("should get the correct finally block", function () {
            chai_1.expect(tryStatement.getFinallyBlock().getText()).to.equal(finallyBlock);
        });
        it("should get the correct undefined finally block", function () {
            chai_1.expect(emptyTryStatement.getFinallyBlock()).to.be.undefined;
        });
    });
    describe("getFinallyBlockOrThrow", function () {
        it("should should return the finally block", function () {
            chai_1.expect(tryStatement.getFinallyBlockOrThrow().getText()).to.equal(finallyBlock);
        });
        it("should throw without a finally block", function () {
            chai_1.expect(function () { return emptyTryStatement.getFinallyBlockOrThrow(); }).to.throw();
        });
    });
});
