"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
function getStatement(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.SwitchStatement).descendant;
}
describe("SwitchStatement", function () {
    var expression = "x + 1";
    var clause = "case 5:\n    break;";
    var caseBlock = "{\n  " + clause + "\n}";
    var statement = "switch (" + expression + ") " + caseBlock;
    describe("getExpression", function () {
        function doTest(text, expectedText) {
            var labeledStatement = getStatement(text);
            chai_1.expect(labeledStatement.getExpression().getText()).to.equal(expectedText);
        }
        it("should get the correct expression", function () {
            doTest(statement, expression);
        });
    });
    describe("getCaseBlock", function () {
        function doTest(text, expectedText) {
            var labeledStatement = getStatement(text);
            chai_1.expect(labeledStatement.getCaseBlock().getText()).to.equal(expectedText);
        }
        it("should get the correct case block", function () {
            doTest(statement, caseBlock);
        });
    });
    describe("getClauses", function () {
        function doTest(code, clauses) {
            var labeledStatement = getStatement(code);
            chai_1.expect(labeledStatement.getClauses().map(function (s) { return s.getText(); })).to.deep.equal(clauses);
        }
        it("should get clauses of a case block", function () {
            doTest(statement, [clause]);
        });
    });
    describe("removeClause", function () {
        function doTest(code, index, expectedCode) {
            var labeledStatement = getStatement(code);
            var sourceFile = labeledStatement.getSourceFile();
            labeledStatement.removeClause(index);
            chai_1.expect(sourceFile.getFullText()).to.deep.equal(expectedCode);
        }
        // most of the tests are in caseBlockTests
        it("should remove the clause", function () {
            doTest("switch (1) { case: 1: return 5; }", 0, "switch (1) { }");
        });
    });
    describe("removeClauses", function () {
        function doTest(code, range, expectedCode) {
            var labeledStatement = getStatement(code);
            var sourceFile = labeledStatement.getSourceFile();
            labeledStatement.removeClauses(range);
            chai_1.expect(sourceFile.getFullText()).to.deep.equal(expectedCode);
        }
        // most of the tests are in caseBlockTests
        it("should remove the clause", function () {
            doTest("switch (1) { case: 1: case 2: case 3: return 5; }", [0, 1], "switch (1) { case 3: return 5; }");
        });
    });
});
