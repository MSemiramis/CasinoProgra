"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
function getCatchClause(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.CatchClause).descendant;
}
describe("CatchClause", function () {
    var block = "{ let x = 0; }";
    var variableDeclaration = "x";
    var statement = "catch (" + variableDeclaration + ") " + block;
    var emptyStatement = "catch " + block;
    var catchClause = getCatchClause(statement);
    var emptyCatchClause = getCatchClause(emptyStatement);
    describe("getBlock", function () {
        it("should get the correct block", function () {
            chai_1.expect(catchClause.getBlock().getText()).to.equal(block);
        });
    });
    describe("getVariableDeclaration", function () {
        it("should get the correct variable declaration", function () {
            chai_1.expect(catchClause.getVariableDeclaration().getText()).to.equal(variableDeclaration);
        });
        it("should get the correct undefined variable declaration", function () {
            chai_1.expect(emptyCatchClause.getVariableDeclaration()).to.be.undefined;
        });
    });
    describe("getVariableDeclarationOrThrow", function () {
        it("should should return the variable declaration", function () {
            chai_1.expect(catchClause.getVariableDeclarationOrThrow().getText()).to.equal(variableDeclaration);
        });
        it("should throw without a variable declaration", function () {
            chai_1.expect(function () { return emptyCatchClause.getVariableDeclarationOrThrow(); }).to.throw();
        });
    });
});
