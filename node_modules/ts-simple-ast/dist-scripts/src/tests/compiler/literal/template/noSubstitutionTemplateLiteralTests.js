"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../../typescript");
var testHelpers_1 = require("../../testHelpers");
function getLiteral(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.NoSubstitutionTemplateLiteral).descendant;
}
describe("NoSubstitutionTemplateLiteral", function () {
    describe("getLiteralValue", function () {
        function doTest(text, expectedValue) {
            var literal = getLiteral(text);
            chai_1.expect(literal.getLiteralValue()).to.equal(expectedValue);
        }
        it("should get the correct literal value", function () {
            doTest("const t: `test`;", "test");
        });
    });
    describe("setLiteralValue", function () {
        function doTest(text, newValue, expectedText) {
            var literal = getLiteral(text);
            var sourceFile = literal.sourceFile;
            chai_1.expect(literal.setLiteralValue(newValue).wasForgotten()).to.be.false;
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should set the literal value", function () {
            doTest("const t = `str`;", "new", "const t = `new`;");
        });
        it("should set the literal value and possibly add a template expression", function () {
            doTest("const t = `str`;", "${testing}", "const t = `${testing}`;");
        });
    });
});
