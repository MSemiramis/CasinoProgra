"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../../typescript");
var testHelpers_1 = require("../../testHelpers");
function getExpression(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.TaggedTemplateExpression).descendant;
}
describe("TaggedTemplateExpression", function () {
    describe("getTag", function () {
        function doTest(text, expectedText) {
            var expression = getExpression(text);
            chai_1.expect(expression.getTag().getText()).to.equal(expectedText);
        }
        it("should get the correct tag expression", function () {
            doTest("(x + 1)`hello world`", "(x + 1)");
        });
    });
    describe("getTemplate", function () {
        function doTest(text, expectedText) {
            var expression = getExpression(text);
            chai_1.expect(expression.getTemplate().getText()).to.equal(expectedText);
        }
        it("should get the correct template expression", function () {
            doTest("(x + 1)`hello world`", "`hello world`");
        });
    });
    describe("removeTag", function () {
        function doTest(text, expectedText) {
            var expression = getExpression(text);
            var sourceFile = expression.sourceFile;
            var template = expression.getTemplate();
            var templateText = template.getText();
            chai_1.expect(expression.removeTag().getText()).to.equal(templateText);
            chai_1.expect(template.getText()).to.equal(templateText, "should still know about the template");
            chai_1.expect(sourceFile.getText()).to.equal(expectedText);
        }
        it("should remove the tag when a no substitution template literal", function () {
            doTest("(x + 1)`hello world`", "`hello world`");
        });
        it("should remove the tag when a tagged template", function () {
            doTest("(x + 1)`hello ${world}`", "`hello ${world}`");
        });
    });
});
