"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../../typescript");
var testHelpers_1 = require("../../testHelpers");
function getExpression(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.TemplateExpression).descendant;
}
describe("TemplateExpression", function () {
    describe("getHead", function () {
        function doTest(text, expectedText) {
            var expression = getExpression(text);
            chai_1.expect(expression.getHead().getText()).to.equal(expectedText);
        }
        it("should get the correct template head", function () {
            doTest("`foo${test}`", "`foo${");
        });
    });
    describe("getTemplateSpans", function () {
        function doTest(text, expectedText) {
            var expression = getExpression(text);
            chai_1.expect(expression.getTemplateSpans()[0].getText()).to.equal(expectedText);
        }
        it("should get the correct template spans", function () {
            doTest("`foo${test}`", "test}`");
        });
    });
    describe("setLiteralValue", function () {
        function doTest(text, newText, expectedText) {
            var expression = getExpression(text);
            var sourceFile = expression.sourceFile;
            chai_1.expect(expression.setLiteralValue(newText).wasForgotten()).to.be.false;
            chai_1.expect(sourceFile.getText()).to.equal(expectedText);
        }
        it("should set the value", function () {
            doTest("`foo${test}`", "testing${this}out", "`testing${this}out`");
        });
        it("should set the value to not have any tagged templates", function () {
            doTest("`foo${test}`", "testing", "`testing`");
        });
    });
});
