"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
describe("NumericLiteral", function () {
    describe("getLiteralValue", function () {
        function doTest(text, expectedValue) {
            var descendant = testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.NumericLiteral).descendant;
            chai_1.expect(descendant.getLiteralValue()).to.equal(expectedValue);
        }
        it("should get the correct literal value", function () {
            doTest("interface MyInterface { 5: string; }", 5);
        });
        it("should get the correct literal value when a decimal value", function () {
            doTest("interface MyInterface { 5.5: string; }", 5.5);
        });
        it("should get the correct literal value when in exponent notation", function () {
            doTest("const t = 1.23e-8;", 1.23e-8);
        });
    });
    describe("setLiteralValue", function () {
        function doTest(text, value, expectedText) {
            var _a = testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.NumericLiteral), descendant = _a.descendant, sourceFile = _a.sourceFile;
            descendant.setLiteralValue(value);
            chai_1.expect(sourceFile.getText()).to.equal(expectedText);
        }
        it("should set the literal value for an integer", function () {
            doTest("const t = 5;", 4, "const t = 4;");
        });
        it("should set the correct literal value to a decimal value", function () {
            doTest("const t = 5;", 4.9878, "const t = 4.9878;");
        });
        it("should set the correct literal value to a value in decimal notation", function () {
            doTest("const t = 5;", 1.23e-8, "const t = 1.23e-8;");
        });
    });
});
