"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var compiler_1 = require("../../../compiler");
var testHelpers_1 = require("../testHelpers");
function getStringLiteral(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.StringLiteral).descendant;
}
describe("StringLiteral", function () {
    describe("getLiteralValue", function () {
        function doTest(text, expectedValue) {
            var literal = getStringLiteral(text);
            chai_1.expect(literal.getLiteralValue()).to.equal(expectedValue);
        }
        it("should get the correct literal value", function () {
            doTest("const t = 'str';", "str");
        });
    });
    describe("setLiteralValue", function () {
        function doTest(text, newValue, expectedText, expectedLiteralText) {
            var literal = getStringLiteral(text);
            var sourceFile = literal.sourceFile;
            literal.setLiteralValue(newValue);
            chai_1.expect(literal.wasForgotten()).to.be.false;
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            if (expectedLiteralText != null)
                chai_1.expect(literal.getText()).to.equal(expectedLiteralText);
        }
        it("should set the literal value and leave the quotes as-is", function () {
            doTest("const t = 'str';", "new", "const t = 'new';", "'new'");
        });
        it("should set the literal value and escape any quote characters of the same kind", function () {
            doTest("const t = 'str';", "\"test'this'out\"", "const t = '\"test\\'this\\'out\"';");
        });
        it("should escape any new lines", function () {
            doTest("const t = \"str\";", "1\n'2'\r\n\"3\"", "const t = \"1\\\n'2'\\\r\n\\\"3\\\"\";");
        });
    });
    describe("isTerminated", function () {
        function doTest(text, expectedValue) {
            var literal = getStringLiteral(text);
            chai_1.expect(literal.isTerminated()).to.equal(expectedValue);
        }
        it("should be terminated", function () {
            doTest("const t = 'str';", true);
        });
        it("should not be terminated", function () {
            doTest("const t = 'str", false);
        });
    });
    describe("hasExtendedUnicodeEscape", function () {
        function doTest(text, expectedValue) {
            var literal = getStringLiteral(text);
            chai_1.expect(literal.hasExtendedUnicodeEscape()).to.equal(expectedValue);
        }
        it("should not have extended unicode escape", function () {
            doTest("const t = 'str';", false);
        });
        it("should have extended unicode escape", function () {
            doTest("const t = '\\u{20bb7}';", true);
        });
    });
    describe("getQuoteType", function () {
        function doTest(text, quoteType) {
            var literal = getStringLiteral(text);
            chai_1.expect(literal.getQuoteType()).to.equal(quoteType);
        }
        it("should be a double when a double", function () {
            doTest("const t = \"str\";", compiler_1.QuoteType.Double);
        });
        it("should be a single when a single", function () {
            doTest("const t = 'str';", compiler_1.QuoteType.Single);
        });
    });
});
