"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
function getInfoFromTextWithBooleanLiteral(text) {
    var obj = testHelpers_1.getInfoFromText(text);
    var literal = (obj.sourceFile.getFirstDescendantByKind(typescript_1.SyntaxKind.TrueKeyword) || obj.sourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.FalseKeyword));
    return __assign({}, obj, { literal: literal });
}
describe("BooleanLiteral", function () {
    describe("getLiteralValue", function () {
        function doTest(text, expectedValue) {
            var literal = getInfoFromTextWithBooleanLiteral(text).literal;
            chai_1.expect(literal.getLiteralValue()).to.equal(expectedValue);
        }
        it("should get the correct literal value when true", function () {
            doTest("var t = true;", true);
        });
        it("should get the correct literal value when false", function () {
            doTest("var t = false;", false);
        });
    });
    describe("setLiteralValue", function () {
        function doTest(text, value, expectedText) {
            var _a = getInfoFromTextWithBooleanLiteral(text), literal = _a.literal, sourceFile = _a.sourceFile;
            literal.setLiteralValue(value);
            chai_1.expect(sourceFile.getText()).to.equal(expectedText);
        }
        it("should set the boolean from false to true", function () {
            doTest("const t = false;", true, "const t = true;");
        });
        it("should set the boolean from true to false", function () {
            doTest("const t = true;", false, "const t = false;");
        });
        it("should work ok if setting to the same value", function () {
            doTest("const t = true;", true, "const t = true;");
        });
    });
});
