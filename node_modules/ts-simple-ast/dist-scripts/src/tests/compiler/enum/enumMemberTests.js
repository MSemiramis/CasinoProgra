"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
function getInfoFromTextWithFirstMember(text) {
    var obj = testHelpers_1.getInfoFromText(text);
    var firstEnumMember = obj.firstChild.getMembers()[0];
    return __assign({}, obj, { firstEnumMember: firstEnumMember });
}
describe("EnumMember", function () {
    describe("getValue", function () {
        describe("number enum", function () {
            var firstChild = getInfoFromTextWithFirstMember("enum MyEnum {myMember1=4,myMember2}").firstChild;
            var members = firstChild.getMembers();
            it("should get the correct value for members with an initializer", function () {
                chai_1.expect(members[0].getValue()).to.equal(4);
            });
            it("should get the correct value for members without an initializer", function () {
                chai_1.expect(members[1].getValue()).to.equal(5);
            });
        });
        describe("string enum", function () {
            var firstEnumMember = getInfoFromTextWithFirstMember("enum MyEnum {member = 'str'}").firstEnumMember;
            it("should get the correct value for member", function () {
                chai_1.expect(firstEnumMember.getValue()).to.equal("str");
            });
        });
    });
    describe("setValue", function () {
        function doTest(text, value, expected) {
            var _a = getInfoFromTextWithFirstMember(text), firstChild = _a.firstChild, firstEnumMember = _a.firstEnumMember;
            firstEnumMember.setValue(value);
            chai_1.expect(firstChild.getText()).to.equal(expected);
        }
        it("should set the value to a string", function () {
            doTest("enum MyEnum { member }", "str", "enum MyEnum { member = \"str\" }");
        });
        it("should set the value for to a number", function () {
            doTest("enum MyEnum { member }", 5, "enum MyEnum { member = 5 }");
        });
    });
    describe("remove", function () {
        it("should remove the member and its comma when its the only member", function () {
            var _a = getInfoFromTextWithFirstMember("enum MyEnum {\n  member,\n}\n"), firstEnumMember = _a.firstEnumMember, firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstEnumMember.remove();
            chai_1.expect(sourceFile.getText()).to.equal("enum MyEnum {\n}\n");
        });
        it("should remove the member and its comma when it's the first member", function () {
            var _a = getInfoFromTextWithFirstMember("enum MyEnum {\n  member1 = 2,\n  member2\n}\n"), firstEnumMember = _a.firstEnumMember, firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstEnumMember.remove();
            chai_1.expect(sourceFile.getText()).to.equal("enum MyEnum {\n  member2\n}\n");
        });
        it("should remove the member when it's the last member", function () {
            var _a = getInfoFromTextWithFirstMember("enum MyEnum {\n  member1 = 2,\n  member2\n}\n"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.getMembers()[1].remove();
            chai_1.expect(sourceFile.getText()).to.equal("enum MyEnum {\n  member1 = 2,\n}\n");
        });
        it("should remove the member when it's in the middle", function () {
            var _a = getInfoFromTextWithFirstMember("enum MyEnum {\n  member1 = 2,\n  member2,\n  member3\n}\n"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.getMembers()[1].remove();
            chai_1.expect(sourceFile.getText()).to.equal("enum MyEnum {\n  member1 = 2,\n  member3\n}\n");
        });
    });
    describe("fill", function () {
        function doTest(code, structure, expectedCode) {
            var _a = getInfoFromTextWithFirstMember(code), firstEnumMember = _a.firstEnumMember, sourceFile = _a.sourceFile;
            firstEnumMember.fill(structure);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should not change anything when nothing was specified", function () {
            doTest("enum Identifier { member }", {}, "enum Identifier { member }");
        });
        it("should change when specifying", function () {
            var structure = {
                value: 5
            };
            doTest("enum Identifier { member }", structure, "enum Identifier { member = 5 }");
        });
    });
});
