"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var compiler_1 = require("../../../compiler");
var testHelpers_1 = require("../testHelpers");
describe("EnumDeclaration", function () {
    describe("getMember", function () {
        it("should get a member by its name", function () {
            var firstChild = testHelpers_1.getInfoFromText("enum MyEnum { member1, member2 }").firstChild;
            chai_1.expect(firstChild.getMember("member2").getText()).to.equal("member2");
        });
        it("should get a member by a function", function () {
            var firstChild = testHelpers_1.getInfoFromText("enum MyEnum { member1, member2 }").firstChild;
            chai_1.expect(firstChild.getMember(function (m) { return m.getName() === "member2"; }).getText()).to.equal("member2");
        });
    });
    describe("getMemberOrThrow", function () {
        it("should get a member by its name", function () {
            var firstChild = testHelpers_1.getInfoFromText("enum MyEnum { member1, member2 }").firstChild;
            chai_1.expect(firstChild.getMemberOrThrow("member2").getText()).to.equal("member2");
        });
        it("should get a member by a function", function () {
            var firstChild = testHelpers_1.getInfoFromText("enum MyEnum { member1, member2 }").firstChild;
            chai_1.expect(firstChild.getMemberOrThrow(function (m) { return m.getName() === "member2"; }).getText()).to.equal("member2");
        });
        it("should get a member by a function", function () {
            var firstChild = testHelpers_1.getInfoFromText("enum MyEnum { member1, member2 }").firstChild;
            chai_1.expect(function () { return firstChild.getMemberOrThrow(function (m) { return m.getName() === "member9"; }); }).to.throw();
        });
    });
    describe("getMembers", function () {
        it("should get all the members", function () {
            var firstChild = testHelpers_1.getInfoFromText("enum MyEnum { member1 = 1, member2 }").firstChild;
            var members = firstChild.getMembers();
            chai_1.expect(members.length).to.equal(2);
        });
    });
    describe("insertMembers", function () {
        function doTest(startCode, index, structures, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var result = firstChild.insertMembers(index, structures);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            chai_1.expect(result.length).to.equal(structures.length);
        }
        it("should insert a member without a value", function () {
            doTest("enum MyEnum {\n}\n", 0, [{ name: "myName" }], "enum MyEnum {\n    myName\n}\n");
        });
        it("should insert a member with a number value", function () {
            doTest("enum MyEnum {\n}\n", 0, [{ name: "myName", value: 5 }], "enum MyEnum {\n    myName = 5\n}\n");
        });
        it("should insert a member with a string value", function () {
            doTest("enum MyEnum {\n}\n", 0, [{ name: "myName", value: "str" }], "enum MyEnum {\n    myName = \"str\"\n}\n");
        });
        it("should insert a member and add a comma to the previous member when no comma exists", function () {
            doTest("enum MyEnum {\n    member1\n}\n", 1, [{ name: "member2" }], "enum MyEnum {\n    member1,\n    member2\n}\n");
        });
        it("should insert a member when a comma exists", function () {
            doTest("enum MyEnum {\n    member1,\n}\n", 1, [{ name: "member2" }], "enum MyEnum {\n    member1,\n    member2\n}\n");
        });
        it("should insert in the middle", function () {
            doTest("enum MyEnum {\n    member1,\n    member3\n}\n", 1, [{ name: "member2" }], "enum MyEnum {\n    member1,\n    member2,\n    member3\n}\n");
        });
        it("should insert multiple", function () {
            doTest("enum MyEnum {\n}\n", 0, [{ name: "member1" }, { name: "member2", value: 2, docs: [{ description: "description" }] }, { name: "member3" }], "enum MyEnum {\n    member1,\n    /**\n     * description\n     */\n    member2 = 2,\n    member3\n}\n");
        });
    });
    describe("insertMember", function () {
        function doTest(startCode, index, structure, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var result = firstChild.insertMember(index, structure);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            chai_1.expect(result).to.be.instanceOf(compiler_1.EnumMember);
        }
        it("should insert a member", function () {
            doTest("enum MyEnum {\n    member2\n}\n", 0, { name: "member1" }, "enum MyEnum {\n    member1,\n    member2\n}\n");
        });
    });
    describe("addMember", function () {
        function doTest(startCode, structure, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var result = firstChild.addMember(structure);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            chai_1.expect(result).to.be.instanceOf(compiler_1.EnumMember);
        }
        it("should add a member", function () {
            doTest("enum MyEnum {\n    member1\n}\n", { name: "member2" }, "enum MyEnum {\n    member1,\n    member2\n}\n");
        });
    });
    describe("addMembers", function () {
        function doTest(startCode, structures, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var result = firstChild.addMembers(structures);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            chai_1.expect(result.length).to.equal(structures.length);
        }
        it("should add members", function () {
            doTest("enum MyEnum {\n    member1\n}\n", [{ name: "member2" }, { name: "member3" }], "enum MyEnum {\n    member1,\n    member2,\n    member3\n}\n");
        });
    });
    describe("isConstEnum", function () {
        it("should have a const keyword when it has one", function () {
            var firstChild = testHelpers_1.getInfoFromText("const enum MyEnum {}").firstChild;
            chai_1.expect(firstChild.isConstEnum()).is.true;
        });
        it("should not have a const keyword when it doesn't have one", function () {
            var firstChild = testHelpers_1.getInfoFromText("enum MyEnum {}").firstChild;
            chai_1.expect(firstChild.isConstEnum()).is.false;
        });
    });
    describe("getConstKeyword", function () {
        it("should get a const keyword when it has one", function () {
            var firstChild = testHelpers_1.getInfoFromText("const enum MyEnum {}").firstChild;
            chai_1.expect(firstChild.getConstKeyword().getText()).to.equal("const");
        });
        it("should not get a const keyword when it doesn't have one", function () {
            var firstChild = testHelpers_1.getInfoFromText("enum MyEnum {}").firstChild;
            chai_1.expect(firstChild.getConstKeyword()).is.undefined;
        });
    });
    describe("setIsConstEnum", function () {
        it("should set as const enum when not one", function () {
            var firstChild = testHelpers_1.getInfoFromText("enum MyEnum {}").firstChild;
            firstChild.setIsConstEnum(true);
            chai_1.expect(firstChild.getText()).to.equal("const enum MyEnum {}");
        });
        it("should set as not const enum when is one", function () {
            var firstChild = testHelpers_1.getInfoFromText("const enum MyEnum {}").firstChild;
            firstChild.setIsConstEnum(false);
            chai_1.expect(firstChild.getText()).to.equal("enum MyEnum {}");
        });
        it("should stay the same if setting to same value", function () {
            var firstChild = testHelpers_1.getInfoFromText("const enum MyEnum {}").firstChild;
            firstChild.setIsConstEnum(true);
            chai_1.expect(firstChild.getText()).to.equal("const enum MyEnum {}");
        });
    });
    describe("fill", function () {
        function doTest(startingCode, structure, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startingCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.fill(structure);
            chai_1.expect(firstChild.getText()).to.equal(expectedCode);
        }
        it("should not modify anything if the structure doesn't change anything", function () {
            doTest("enum Identifier {\n}", {}, "enum Identifier {\n}");
        });
        it("should modify when changed", function () {
            var structure = {
                isConst: true,
                members: [{
                        name: "member"
                    }]
            };
            doTest("enum Identifier {\n}", structure, "const enum Identifier {\n    member\n}");
        });
    });
    describe("remove", function () {
        function doTest(text, index, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            sourceFile.getEnums()[index].remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should remove the enum declaration", function () {
            doTest("enum I {}\n\nenum J {}\n\nenum K {}", 1, "enum I {}\n\nenum K {}");
        });
    });
});
