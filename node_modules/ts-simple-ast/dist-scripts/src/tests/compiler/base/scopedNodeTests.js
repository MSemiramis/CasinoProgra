"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var compiler_1 = require("../../../compiler");
var testHelpers_1 = require("../testHelpers");
describe("ScopedNode", function () {
    function getInfoWithFirstPropertyFromText(text) {
        var result = testHelpers_1.getInfoFromText(text);
        return __assign({}, result, { firstProperty: result.firstChild.getInstanceProperties()[0] });
    }
    describe("getScope", function () {
        it("should get the correct scope when there is no modifier", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class Identifier {\nprop: string;}\n").firstProperty;
            chai_1.expect(firstProperty.getScope()).to.be.equal(compiler_1.Scope.Public);
        });
        it("should get the correct scope when there is a public modifier", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class Identifier {\npublic prop: string;}\n").firstProperty;
            chai_1.expect(firstProperty.getScope()).to.be.equal(compiler_1.Scope.Public);
        });
        it("should get the correct scope when there is a protected modifier", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class Identifier {\nprotected prop: string;}\n").firstProperty;
            chai_1.expect(firstProperty.getScope()).to.be.equal(compiler_1.Scope.Protected);
        });
        it("should get the correct scope when there is a private modifier", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class Identifier {\nprivate prop: string;}\n").firstProperty;
            chai_1.expect(firstProperty.getScope()).to.be.equal(compiler_1.Scope.Private);
        });
    });
    describe("hasScopeKeyword", function () {
        it("should not have a scope keyword when there isn't one", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class Identifier {\nprop: string;}\n").firstProperty;
            chai_1.expect(firstProperty.hasScopeKeyword()).to.be.false;
        });
        it("should have a scope keyword when there is one", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class Identifier {\npublic prop: string;}\n").firstProperty;
            chai_1.expect(firstProperty.hasScopeKeyword()).to.be.true;
        });
    });
    describe("setScope", function () {
        function doTest(startText, scope, expectedText) {
            var _a = getInfoWithFirstPropertyFromText(startText), firstChild = _a.firstChild, firstProperty = _a.firstProperty;
            firstProperty.setScope(scope);
            chai_1.expect(firstChild.getText()).to.be.equal(expectedText);
        }
        it("should clear the scope keyword if set to undefined", function () {
            doTest("class Identifier { private prop: string; }", undefined, "class Identifier { prop: string; }");
        });
        it("should leave the scoppe as is if set to public even when public", function () {
            doTest("class Identifier { public prop: string; }", compiler_1.Scope.Public, "class Identifier { public prop: string; }");
        });
        it("should set the scope keyword to public when specified", function () {
            doTest("class Identifier { private prop: string; }", compiler_1.Scope.Public, "class Identifier { public prop: string; }");
        });
        it("should set the scope keyword to protected when specified", function () {
            doTest("class Identifier { private prop: string; }", compiler_1.Scope.Protected, "class Identifier { protected prop: string; }");
        });
        it("should set the scope keyword to private when specified", function () {
            doTest("class Identifier { protected prop: string; }", compiler_1.Scope.Private, "class Identifier { private prop: string; }");
        });
        it("should set the scope keyword when none exists and setting to not public", function () {
            doTest("class Identifier { prop: string; }", compiler_1.Scope.Private, "class Identifier { private prop: string; }");
        });
        it("should set the scope keyword when none exists, a decorator exists, and setting to not public", function () {
            doTest("class Identifier { @dec prop: string; }", compiler_1.Scope.Private, "class Identifier { @dec private prop: string; }");
        });
    });
    describe("fill", function () {
        function doTest(startCode, structure, expectedCode) {
            var _a = getInfoWithFirstPropertyFromText(startCode), firstProperty = _a.firstProperty, sourceFile = _a.sourceFile;
            firstProperty.fill(structure);
            chai_1.expect(sourceFile.getText()).to.equal(expectedCode);
        }
        it("should not modify when not set and structure empty", function () {
            doTest("class MyClass { prop: string; }", {}, "class MyClass { prop: string; }");
        });
        it("should not modify when set and structure empty", function () {
            doTest("class MyClass { public prop: string; }", {}, "class MyClass { public prop: string; }");
        });
        it("should modify when setting", function () {
            doTest("class MyClass { prop: string; }", { scope: compiler_1.Scope.Protected }, "class MyClass { protected prop: string; }");
        });
    });
});
