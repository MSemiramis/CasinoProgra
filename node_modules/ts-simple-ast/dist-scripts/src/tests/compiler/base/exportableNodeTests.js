"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var errors = require("../../../errors");
var testHelpers_1 = require("../testHelpers");
describe("ExportableNode", function () {
    var mainSourceFile = testHelpers_1.getInfoFromText("export var exportedVar = 1;\nvar myExplicitVar: string;\nexport default class Identifier {}\n").sourceFile;
    var statements = mainSourceFile.getVariableStatements();
    var exportedStatement = statements[0];
    var notExportedStatement = statements[1];
    var exportedDefaultClass = mainSourceFile.getClasses()[0];
    describe("hasExportKeyword", function () {
        it("should have an export keyword when exported", function () {
            chai_1.expect(exportedStatement.hasExportKeyword()).to.be.true;
        });
        it("should not have an export keyword when not exported", function () {
            chai_1.expect(notExportedStatement.hasExportKeyword()).to.be.false;
        });
    });
    describe("getExportKeyword", function () {
        it("should have an export keyword when exported", function () {
            chai_1.expect(exportedStatement.getExportKeyword().getText()).to.equal("export");
        });
        it("should not have an export keyword when not exported", function () {
            chai_1.expect(notExportedStatement.getExportKeyword()).to.be.undefined;
        });
    });
    describe("getExportKeywordOrThrow", function () {
        it("should have an export keyword when exported", function () {
            chai_1.expect(exportedStatement.getExportKeywordOrThrow().getText()).to.equal("export");
        });
        it("should not have an export keyword when not exported", function () {
            chai_1.expect(function () { return notExportedStatement.getExportKeywordOrThrow(); }).to.throw();
        });
    });
    describe("hasDefaultKeyword", function () {
        it("should have a default keyword when default exported", function () {
            chai_1.expect(exportedDefaultClass.hasDefaultKeyword()).to.be.true;
        });
        describe("not exported node", function () {
            it("should not have a default keyword when not default exported", function () {
                chai_1.expect(exportedStatement.hasDefaultKeyword()).to.be.false;
            });
        });
    });
    describe("getDefaultKeyword", function () {
        it("should have a default keyword when default exported", function () {
            chai_1.expect(exportedDefaultClass.getDefaultKeyword().getText()).to.equal("default");
        });
        it("should not have an export keyword when not default exported", function () {
            chai_1.expect(exportedStatement.getDefaultKeyword()).to.be.undefined;
        });
    });
    describe("getDefaultKeywordOrThrow", function () {
        it("should have a default keyword when default exported", function () {
            chai_1.expect(exportedDefaultClass.getDefaultKeywordOrThrow().getText()).to.equal("default");
        });
        it("should not have an export keyword when not default exported", function () {
            chai_1.expect(function () { return exportedStatement.getDefaultKeywordOrThrow(); }).to.throw();
        });
    });
    describe("isExported", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.isExported()).to.equal(expected);
        }
        it("should not be exported when not", function () {
            doTest("class Identifier {}", false);
        });
        it("should be exported when default exported on a different line", function () {
            doTest("class Identifier {}\nexport default Identifier;", true);
        });
        it("should be exported when exported via an export statement on a different line", function () {
            doTest("class Identifier {}\nexport {Identifier};", true);
        });
        it("should be exported when default exported on the same line", function () {
            doTest("export default class Identifier {}", true);
        });
        it("should be when a named export", function () {
            doTest("export class Identifier {}", true);
        });
        function doNamespaceTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.getClasses()[0].isExported()).to.equal(expected);
        }
        it("should be when exported from a namespace", function () {
            doNamespaceTest("namespace Identifier { export class Identifier {} }", true);
        });
        it("should not be when not exported from a namespace", function () {
            doNamespaceTest("namespace Identifier { class Identifier {} }", false);
        });
    });
    describe("isDefaultExport", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.isDefaultExport()).to.equal(expected);
        }
        it("should be the default export when default exported on a different line", function () {
            doTest("class Identifier {}\nexport default Identifier;", true);
        });
        it("should be the default export when default exported on the same line", function () {
            doTest("export default class Identifier {}", true);
        });
        it("should not be a default export when not", function () {
            doTest("class Identifier {}", false);
        });
        it("should not be a default export when not and there exists another default export", function () {
            doTest("class Identifier {}\nexport default class Identifier2 {}", false);
        });
    });
    describe("isNamedExport", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.isNamedExport()).to.equal(expected);
        }
        it("should be a named export when one", function () {
            doTest("export class Identifier {}", true);
        });
        it("should not be a named export when it's a default export", function () {
            doTest("export default class Identifier {}", false);
        });
        it("should not be a named export when neither a default or named export", function () {
            doTest("class Identifier {}", false);
        });
        it("should not be a named export when contained in a namespace", function () {
            var firstChild = testHelpers_1.getInfoFromText("namespace Namespace { export class Identifier {} }").firstChild;
            var innerClass = firstChild.getClasses()[0];
            chai_1.expect(innerClass.isNamedExport()).to.be.false;
        });
    });
    describe("setIsDefaultExport", function () {
        function doTest(text, value, expectedText) {
            var _a = testHelpers_1.getInfoFromText(text), sourceFile = _a.sourceFile, firstChild = _a.firstChild;
            firstChild.setIsDefaultExport(value);
            chai_1.expect(sourceFile.getText()).to.equal(expectedText);
        }
        describe("setting as the default export", function () {
            it("should remove any existing default export and make the specified class the default export", function () {
                doTest("class Identifier {}\nexport default class Identifier2 {}", true, "export default class Identifier {}\nclass Identifier2 {}");
            });
            it("should remove any existing default export and make the specified class the default export when using a default export statement", function () {
                doTest("class Identifier {}\nclass Identifier2 {}\nexport default Identifier2;\n", true, "export default class Identifier {}\nclass Identifier2 {}\n");
            });
            it("should do nothing if already the default export", function () {
                doTest("export default class Identifier {}", true, "export default class Identifier {}");
            });
            it("should add default if already an export", function () {
                doTest("export class Identifier {}", true, "export default class Identifier {}");
            });
            it("should throw an error if setting as a default export within a namespace", function () {
                var firstChild = testHelpers_1.getInfoFromText("namespace Identifier { class Identifier {} }").firstChild;
                var innerChild = firstChild.getClasses()[0];
                chai_1.expect(function () { return innerChild.setIsDefaultExport(true); }).to.throw(errors.InvalidOperationError);
            });
            it("should add the default export on a new line when ambientable", function () {
                var _a = testHelpers_1.getInfoFromText("/** Test */ export declare class Identifier {}"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                firstChild.setIsDefaultExport(true);
                chai_1.expect(sourceFile.getFullText()).to.equal("/** Test */ export declare class Identifier {}\nexport default Identifier;");
            });
        });
        describe("unsetting as the default export", function () {
            it("should remove the default export", function () {
                doTest("export default class Identifier {}", false, "class Identifier {}");
            });
            it("should do nothing if already not the default export", function () {
                doTest("export class Identifier {}\nexport default class Identifier2 {}", false, "export class Identifier {}\nexport default class Identifier2 {}");
            });
        });
    });
    describe("setIsExported", function () {
        function doTest(text, value, expected) {
            var _a = testHelpers_1.getInfoFromText(text), sourceFile = _a.sourceFile, firstChild = _a.firstChild;
            firstChild.setIsExported(value);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        function doInnerTest(text, value, expected) {
            var _a = testHelpers_1.getInfoFromText(text), sourceFile = _a.sourceFile, firstChild = _a.firstChild;
            var innerChild = firstChild.getClasses()[0];
            innerChild.setIsExported(value);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        describe("setting as exported", function () {
            it("should do nothing if already exported", function () {
                doTest("export class Identifier {}", true, "export class Identifier {}");
            });
            it("should add the export keyword if not exported", function () {
                doTest("class Identifier {}", true, "export class Identifier {}");
            });
            it("should add the export keyword if not exported to a class that has decorators", function () {
                doTest("@dec class Identifier {}", true, "@dec export class Identifier {}");
            });
            it("should do nothing if already exported from a namespace", function () {
                doInnerTest("namespace Identifier { export class Identifier {} }", true, "namespace Identifier { export class Identifier {} }");
            });
            it("should add the export keyword if not exported from a namespace", function () {
                doInnerTest("namespace Identifier { class Identifier {} }", true, "namespace Identifier { export class Identifier {} }");
            });
            it("should remove it as a default export keyword if one", function () {
                doTest("export default class Identifier {}", true, "export class Identifier {}");
            });
            it("should not remove it as a default export if one and exported in a separate statement", function () {
                doTest("class Identifier {}\nexport default Identifier;\n", true, "export class Identifier {}\nexport default Identifier;\n");
            });
        });
        describe("setting as not exported", function () {
            it("should do nothing if already not exported", function () {
                doTest("class Identifier {}", false, "class Identifier {}");
            });
            it("should remove the export keyword if exported", function () {
                doTest("export class Identifier {}", false, "class Identifier {}");
            });
            it("should remove the export keyword if exported and has another modifier", function () {
                doTest("export abstract class Identifier {}", false, "abstract class Identifier {}");
            });
            it("should do nothing if already not exported from a namespace", function () {
                doInnerTest("namespace Identifier { class Identifier {} }", false, "namespace Identifier { class Identifier {} }");
            });
            it("should remove the export keyword if exported from a namespace", function () {
                doInnerTest("namespace Identifier { export class Identifier {} }", false, "namespace Identifier { class Identifier {} }");
            });
            it("should remove it as a default export if one", function () {
                doTest("export default class Identifier {}", false, "class Identifier {}");
            });
            it("should remove it as a default export if one and setting to true", function () {
                doTest("export default class Identifier {}", true, "export class Identifier {}");
            });
            it("should not remove it as a default export if one and exported in a separate statement", function () {
                doTest("class Identifier {}\nexport default Identifier;\n", false, "class Identifier {}\nexport default Identifier;\n");
            });
        });
    });
    describe("fill", function () {
        function doTest(startingCode, structure, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startingCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.fill(structure);
            chai_1.expect(firstChild.getText()).to.equal(expectedCode);
        }
        it("should not modify anything if the structure doesn't change anything", function () {
            doTest("function myFunction() {}", {}, "function myFunction() {}");
        });
        it("should not modify anything if the structure doesn't change anything and the node has everything set", function () {
            doTest("export default function myFunction() {}", {}, "export default function myFunction() {}");
        });
        it("should modify when setting as export", function () {
            doTest("function myFunction() {}", { isExported: true }, "export function myFunction() {}");
        });
        it("should modify when setting as default export", function () {
            doTest("function myFunction() {}", { isDefaultExport: true }, "export default function myFunction() {}");
        });
        it("should be default export when setting as default export and exported", function () {
            doTest("function myFunction() {}", { isDefaultExport: true, isExported: true }, "export default function myFunction() {}");
        });
    });
});
