"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("ArgumentedNode", function () {
    describe("getArguments", function () {
        function doTest(code, expectedArgs) {
            var firstChild = testHelpers_1.getInfoFromText(code).firstChild;
            var args = firstChild.getDecorators()[0].getCallExpression().getArguments();
            chai_1.expect(args.map(function (a) { return a.getText(); })).to.deep.equal(expectedArgs);
        }
        it("should get the arguments when there are none", function () {
            doTest("@decorator()\nclass MyClass {}", []);
        });
        it("should get the arguments when they exist", function () {
            doTest("@decorator(arg1, arg2)\nclass MyClass {}", ["arg1", "arg2"]);
        });
    });
    describe("insertArguments", function () {
        function doTest(code, index, texts, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(code), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var callExpr = firstChild.getDecorators()[0].getCallExpressionOrThrow();
            var result = callExpr.insertArguments(index, texts);
            chai_1.expect(result.map(function (t) { return t.getText(); })).to.deep.equal(texts);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should insert multiple args when none exist", function () {
            doTest("@dec()\nclass T {}", 0, ["5", "6", "7"], "@dec(5, 6, 7)\nclass T {}");
        });
        it("should insert multiple args at the beginning", function () {
            doTest("@dec(3)\nclass T {}", 0, ["1", "2"], "@dec(1, 2, 3)\nclass T {}");
        });
        it("should insert multiple args in the middle", function () {
            doTest("@dec(1, 4)\nclass T {}", 1, ["2", "3"], "@dec(1, 2, 3, 4)\nclass T {}");
        });
        it("should insert multiple args at the end", function () {
            doTest("@dec(1)\nclass T {}", 1, ["2", "3"], "@dec(1, 2, 3)\nclass T {}");
        });
        it("should insert args when a type argument exists", function () {
            doTest("@dec<3>(1)\nclass T {}", 1, ["2", "3"], "@dec<3>(1, 2, 3)\nclass T {}");
        });
    });
    describe("insertArgument", function () {
        function doTest(code, index, text, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(code), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var callExpr = firstChild.getDecorators()[0].getCallExpressionOrThrow();
            var result = callExpr.insertArgument(index, text);
            chai_1.expect(result.getText()).to.equal(text);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should insert an arg", function () {
            doTest("@dec(1, 3)\nclass T {}", 1, "2", "@dec(1, 2, 3)\nclass T {}");
        });
    });
    describe("addArguments", function () {
        function doTest(code, texts, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(code), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var callExpr = firstChild.getDecorators()[0].getCallExpressionOrThrow();
            var result = callExpr.addArguments(texts);
            chai_1.expect(result.map(function (t) { return t.getText(); })).to.deep.equal(texts);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should add multiple args", function () {
            doTest("@dec(1)\nclass T {}", ["2", "3"], "@dec(1, 2, 3)\nclass T {}");
        });
    });
    describe("addArgument", function () {
        function doTest(code, text, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(code), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var callExpr = firstChild.getDecorators()[0].getCallExpressionOrThrow();
            var result = callExpr.addArgument(text);
            chai_1.expect(result.getText()).to.equal(text);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should add an arg", function () {
            doTest("@dec(1, 2)\nclass T {}", "3", "@dec(1, 2, 3)\nclass T {}");
        });
    });
    describe("removeArgument", function () {
        function doTest(text, removeIndex, expectedText) {
            doTestByIndex();
            doTestByArg();
            function doTestByIndex() {
                var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                firstChild.getDecorators()[0].getCallExpressionOrThrow().removeArgument(removeIndex);
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            }
            function doTestByArg() {
                var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                firstChild.getDecorators()[0].getCallExpressionOrThrow().removeArgument(firstChild.getDecorators()[0].getArguments()[removeIndex]);
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            }
        }
        it("should throw when specifying an invalid index", function () {
            var _a = testHelpers_1.getInfoFromText("@test(1, 2, 3)\nclass T {}"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            chai_1.expect(function () { return firstChild.getDecorators()[0].getCallExpressionOrThrow().removeArgument(3); }).to.throw();
        });
        it("should remove a decorator argument when there's only one", function () {
            doTest("@test(1)\nclass T {}", 0, "@test()\nclass T {}");
        });
        it("should remove a decorator argument at the start", function () {
            doTest("@test(1, 2, 3)\nclass T {}", 0, "@test(2, 3)\nclass T {}");
        });
        it("should remove a decorator argument in the middle", function () {
            doTest("@test(1, 2, 3)\nclass T {}", 1, "@test(1, 3)\nclass T {}");
        });
        it("should remove a decorator argument at the end", function () {
            doTest("@test(1, 2, 3)\nclass T {}", 2, "@test(1, 2)\nclass T {}");
        });
    });
});
