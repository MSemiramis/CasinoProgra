"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("AsyncableNode", function () {
    describe("navigation", function () {
        var mainSourceFile = testHelpers_1.getInfoFromText("async function Identifier() {}\nfunction Identifier2() {}").sourceFile;
        var asyncFunc = mainSourceFile.getFunctions()[0];
        var nonAsyncFunc = mainSourceFile.getFunctions()[1];
        describe("isAsync", function () {
            it("should be async when async", function () {
                chai_1.expect(asyncFunc.isAsync()).to.be.true;
            });
            it("should not be async when not async", function () {
                chai_1.expect(nonAsyncFunc.isAsync()).to.be.false;
            });
        });
        describe("getAsyncKeyword", function () {
            it("should have a async keyword when async", function () {
                chai_1.expect(asyncFunc.getAsyncKeyword().getText()).to.equal("async");
            });
            it("should not have a async keyword when not async", function () {
                chai_1.expect(nonAsyncFunc.getAsyncKeyword()).to.be.undefined;
            });
        });
        describe("getAsyncKeywordOrThrow", function () {
            it("should have a async keyword when async", function () {
                chai_1.expect(asyncFunc.getAsyncKeywordOrThrow().getText()).to.equal("async");
            });
            it("should not have a async keyword when not async", function () {
                chai_1.expect(function () { return nonAsyncFunc.getAsyncKeywordOrThrow(); }).to.throw();
            });
        });
    });
    describe("setIsAsync", function () {
        function doTest(text, value, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setIsAsync(value);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        it("should set as async when not async", function () {
            doTest("function Identifier() {}", true, "async function Identifier() {}");
        });
        it("should set as not async when async", function () {
            doTest("async function Identifier() {}", false, "function Identifier() {}");
        });
    });
    describe("fill", function () {
        function doTest(startCode, structure, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.fill(structure);
            chai_1.expect(firstChild.getText()).to.equal(expectedCode);
        }
        it("should modify when false and setting true", function () {
            doTest("function myFunction() {}", { isAsync: true }, "async function myFunction() {}");
        });
        it("should modify when true and setting false", function () {
            doTest("async function myFunction() {}", { isAsync: false }, "function myFunction() {}");
        });
        it("should not modify when false and setting false", function () {
            doTest("function myFunction() {}", { isAsync: false }, "function myFunction() {}");
        });
        it("should not modify when true and setting true", function () {
            doTest("async function myFunction() {}", { isAsync: true }, "async function myFunction() {}");
        });
        it("should not modify when false and no property provided", function () {
            doTest("function myFunction() {}", {}, "function myFunction() {}");
        });
        it("should not modify when true and no property provided", function () {
            doTest("async function myFunction() {}", {}, "async function myFunction() {}");
        });
    });
});
