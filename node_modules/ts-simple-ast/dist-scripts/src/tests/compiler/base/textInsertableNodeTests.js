"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var errors = require("../../../errors");
var testHelpers_1 = require("../testHelpers");
describe("TextInsertableNode", function () {
    describe("replaceText", function () {
        describe("SourceFile", function () {
            function doTest(startCode, range, insertCode, expectedCode) {
                var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
                sourceFile.replaceText(range, insertCode);
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            }
            function doWriterTest(startCode, range, insertCode, expectedCode) {
                var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
                sourceFile.replaceText(range, function (writer) { return writer.write(insertCode); });
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            }
            it("should throw when specifying a position outside the lower bound", function () {
                var sourceFile = testHelpers_1.getInfoFromText("").sourceFile;
                chai_1.expect(function () { return sourceFile.replaceText([-1, 0], "text;"); }).to.throw(errors.InvalidOperationError);
            });
            it("should throw when specifying a position outside the upper bound", function () {
                var sourceFile = testHelpers_1.getInfoFromText("").sourceFile;
                chai_1.expect(function () { return sourceFile.replaceText([1, 1], "text;"); }).to.throw(errors.InvalidOperationError);
            });
            it("should throw when specifying an end position outside the upper bound", function () {
                var sourceFile = testHelpers_1.getInfoFromText("").sourceFile;
                chai_1.expect(function () { return sourceFile.replaceText([0, 1], "text;"); }).to.throw(errors.InvalidOperationError);
            });
            it("should throw when specifying a position greater than the end position", function () {
                var sourceFile = testHelpers_1.getInfoFromText("  ").sourceFile;
                chai_1.expect(function () { return sourceFile.replaceText([1, 0], "text;"); }).to.throw(errors.ArgumentError);
            });
            it("should replace the text specified", function () {
                doTest("var t;", [4, 5], "u", "var u;");
            });
            it("should replace with a writer", function () {
                doWriterTest("var t;", [4, 5], "u", "var u;");
            });
        });
        describe("ClassDeclaration", function () {
            function doTest(startCode, range, insertCode, expectedCode) {
                var _a = testHelpers_1.getInfoFromText(startCode), sourceFile = _a.sourceFile, firstChild = _a.firstChild;
                firstChild.replaceText(range, insertCode);
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
                chai_1.expect(function () { return firstChild.getInstanceProperties(); }).to.not.throw();
            }
            it("should throw when specifying a position outside the lower bound", function () {
                var firstChild = testHelpers_1.getInfoFromText("class MyClass {}").firstChild;
                chai_1.expect(function () { return firstChild.replaceText([14, 14], "prop;"); }).to.throw(errors.InvalidOperationError);
            });
            it("should throw when specifying a position outside the upper bound", function () {
                var firstChild = testHelpers_1.getInfoFromText("class MyClass {}").firstChild;
                chai_1.expect(function () { return firstChild.replaceText([16, 16], "prop;"); }).to.throw(errors.InvalidOperationError);
            });
            it("should insert when specifying the correct bounds", function () {
                doTest("class MyClass {}", [15, 15], "prop;", "class MyClass {prop;}");
            });
            it("should replace when replacing text", function () {
                doTest("class MyClass {myPreviousProp;}", [15, 30], " prop; ", "class MyClass { prop; }");
            });
        });
    });
    describe("insertText", function () {
        describe("SourceFile", function () {
            function doTest(startCode, pos, insertCode, expectedCode) {
                var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
                sourceFile.insertText(pos, insertCode);
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            }
            function doWriterTest(startCode, pos, insertCode, expectedCode) {
                var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
                sourceFile.insertText(pos, function (writer) { return writer.write(insertCode); });
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            }
            it("should insert text into an empty source file", function () {
                doTest("", 0, "class MyClass {}", "class MyClass {}");
            });
            it("should insert text into a source file at the beginning", function () {
                doTest("class MyClass {}", 0, "interface MyInterface {}\n\n", "interface MyInterface {}\n\nclass MyClass {}");
            });
            it("should insert text into a source file in the middle", function () {
                doTest("class MyClass {}", 15, "\n    prop;\n", "class MyClass {\n    prop;\n}");
            });
            it("should insert text into a source file at the end", function () {
                doTest("class MyClass {}", 16, "\n\ninterface MyInterface {}", "class MyClass {}\n\ninterface MyInterface {}");
            });
            it("should insert with a writer", function () {
                doWriterTest("class MyClass {}", 16, "\n\ninterface MyInterface {}", "class MyClass {}\n\ninterface MyInterface {}");
            });
        });
    });
    describe("removeText", function () {
        describe("SourceFile", function () {
            function doSourceFileTest(startCode, expectedCode) {
                var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
                sourceFile.removeText();
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            }
            it("should remove the text", function () {
                doSourceFileTest("class MyClass {}", "");
            });
            function doFirstChildTest(startCode, expectedCode) {
                var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                firstChild.removeText();
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            }
            it("should remove the first child's text", function () {
                doFirstChildTest("class MyClass { prop: string; }", "class MyClass {}");
            });
            function doRangeTest(startCode, pos, end, expectedCode) {
                var sourceFile = testHelpers_1.getInfoFromText(startCode).sourceFile;
                sourceFile.removeText(pos, end);
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            }
            // no need to do so many tests in here because they're already covered by replaceText
            it("should remove the specified range", function () {
                doRangeTest("class MyClass {}", 7, 13, "class M {}");
            });
        });
    });
});
