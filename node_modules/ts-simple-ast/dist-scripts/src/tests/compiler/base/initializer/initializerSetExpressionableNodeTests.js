"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../../testHelpers");
describe("InitializerSetExpressionableNode", function () {
    function getEnumMemberFromText(text) {
        var result = testHelpers_1.getInfoFromText(text);
        return __assign({ member: result.firstChild.getMembers()[0] }, result);
    }
    describe("removeInitializer", function () {
        function doTest(startCode, expectedCode) {
            var _a = getEnumMemberFromText(startCode), member = _a.member, sourceFile = _a.sourceFile;
            member.removeInitializer();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should remove when it has an initializer", function () {
            doTest("enum MyEnum { myMember = 5 }", "enum MyEnum { myMember }");
        });
        it("should do nothing when it doesn't have an initializer", function () {
            doTest("enum MyEnum { myMember }", "enum MyEnum { myMember }");
        });
    });
    describe("setInitializer", function () {
        describe("enum member", function () {
            function doThrowTest(initializerText) {
                var member = getEnumMemberFromText("enum MyEnum {\n    myMember = 4,\n}\n").member;
                chai_1.expect(function () { return member.setInitializer(initializerText); }).to.throw();
            }
            function doEnumMemberTest(startCode, initializer, expectedCode) {
                var _a = getEnumMemberFromText(startCode), member = _a.member, sourceFile = _a.sourceFile;
                member.setInitializer(initializer);
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            }
            it("should set the new initializer when it has one already", function () {
                doEnumMemberTest("enum MyEnum {\n    myMember = 4\n}\n", "5", "enum MyEnum {\n    myMember = 5\n}\n");
            });
            it("should set the new initializer when it has one and there's a comma", function () {
                doEnumMemberTest("enum MyEnum {\n    myMember = 4,\n}\n", "5", "enum MyEnum {\n    myMember = 5,\n}\n");
            });
            describe("having initializer and setting to empty string", function () {
                doThrowTest("");
            });
            describe("having initializer and setting to whitespace string", function () {
                doThrowTest("    ");
            });
            describe("having initializer and setting to null", function () {
                doThrowTest(null);
            });
            describe("having initializer and setting to a different type", function () {
                doThrowTest(1);
            });
            it("should set the initializer when it doens't have one", function () {
                doEnumMemberTest("enum MyEnum {\n    myMember\n}\n", "5", "enum MyEnum {\n    myMember = 5\n}\n");
            });
        });
        describe("class property", function () {
            function doClassPropTest(text, newInitializer, expected) {
                var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
                var prop = firstChild.getInstanceProperties()[0];
                prop.setInitializer(newInitializer);
                chai_1.expect(firstChild.getFullText()).to.equal(expected);
            }
            it("should set a new initializer", function () {
                doClassPropTest("class Identifier { prop; }", "2", "class Identifier { prop = 2; }");
            });
            it("should replace initializer", function () {
                doClassPropTest("class Identifier { prop = '2'; }", "2", "class Identifier { prop = 2; }");
            });
            it("should replace initializer that is an object", function () {
                doClassPropTest("class Identifier { prop = { something: ''; }; }", "{}", "class Identifier { prop = {}; }");
            });
            it("should set initializer when there's an inline comment", function () {
                doClassPropTest("class Identifier { prop/*comment*/; }", "2", "class Identifier { prop = 2/*comment*/; }");
            });
            it("should set initializer when there's a comment after and no semi-colon", function () {
                doClassPropTest("class Identifier { prop/*comment*/ }", "2", "class Identifier { prop = 2/*comment*/ }");
            });
        });
    });
    describe("fill", function () {
        function doTest(startingCode, structure, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startingCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var firstProperty = firstChild.getInstanceProperties()[0];
            firstProperty.fill(structure);
            chai_1.expect(sourceFile.getText()).to.equal(expectedCode);
        }
        it("should modify when setting", function () {
            doTest("class Identifier { prop }", { initializer: "4" }, "class Identifier { prop = 4 }");
        });
        it("should not modify anything if the structure doesn't change anything", function () {
            doTest("class Identifier { prop = 4 }", {}, "class Identifier { prop = 4 }");
        });
    });
});
