"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../../typescript");
var compiler_1 = require("../../../../compiler");
var testHelpers_1 = require("../../testHelpers");
describe("InitializerGetExpressionableNode", function () {
    function getEnumMemberFromText(text) {
        var result = testHelpers_1.getInfoFromText(text);
        return __assign({ member: result.firstChild.getMembers()[0] }, result);
    }
    describe("hasInitializer", function () {
        function doTest(code, expectedResult) {
            var member = getEnumMemberFromText(code).member;
            chai_1.expect(member.hasInitializer()).to.equal(expectedResult);
        }
        it("should have an initializer when it does", function () {
            doTest("enum MyEnum { myMember = 4 }", true);
        });
        it("should not have an initializer when it doesn't", function () {
            doTest("enum MyEnum { myMember }", false);
        });
    });
    describe("getInitializer", function () {
        describe("having initializer", function () {
            var member = getEnumMemberFromText("enum MyEnum { myMember = 4 }").member;
            var initializer = member.getInitializer();
            it("should have correct text", function () {
                chai_1.expect(initializer.getText()).to.equal("4");
            });
            it("should be of correct instance", function () {
                chai_1.expect(initializer).to.be.instanceOf(compiler_1.Expression);
            });
        });
        describe("not having initializer", function () {
            it("should be undefined", function () {
                var member = getEnumMemberFromText("enum MyEnum { myMember }").member;
                chai_1.expect(member.getInitializer()).to.be.undefined;
            });
        });
    });
    describe("getInitializerOrThrow", function () {
        it("should get when the initializer exists", function () {
            var member = getEnumMemberFromText("enum MyEnum { myMember = 4 }").member;
            chai_1.expect(member.getInitializerOrThrow().getText()).to.equal("4");
        });
        it("should throw when the initializer doesn't exist", function () {
            var member = getEnumMemberFromText("enum MyEnum { myMember }").member;
            chai_1.expect(function () { return member.getInitializerOrThrow(); }).to.throw();
        });
    });
    describe("getInitializerIfKind", function () {
        it("should get when the initializer of kind exists", function () {
            var member = getEnumMemberFromText("enum MyEnum { myMember = 4 }").member;
            chai_1.expect(member.getInitializerIfKind(typescript_1.SyntaxKind.NumericLiteral).getText()).to.equal("4");
        });
        it("should be undefined when the initializer of kind does not exists", function () {
            var member = getEnumMemberFromText("enum MyEnum { myMember = 4 }").member;
            chai_1.expect(member.getInitializerIfKind(typescript_1.SyntaxKind.ObjectLiteralExpression)).to.be.undefined;
        });
        it("should be undefined when the initializer doesn't exist", function () {
            var member = getEnumMemberFromText("enum MyEnum { myMember }").member;
            chai_1.expect(member.getInitializerIfKind(typescript_1.SyntaxKind.ObjectLiteralExpression)).to.be.undefined;
        });
    });
    describe("getInitializerIfKindOrThrow", function () {
        it("should get when the initializer of kind exists", function () {
            var member = getEnumMemberFromText("enum MyEnum { myMember = 4 }").member;
            chai_1.expect(member.getInitializerIfKindOrThrow(typescript_1.SyntaxKind.NumericLiteral).getText()).to.equal("4");
        });
        it("should throw when the initializer of kind does not exists", function () {
            var member = getEnumMemberFromText("enum MyEnum { myMember = 4 }").member;
            chai_1.expect(function () { return member.getInitializerIfKindOrThrow(typescript_1.SyntaxKind.ObjectLiteralExpression); }).to.throw();
        });
        it("should be undefined when the initializer doesn't exist", function () {
            var member = getEnumMemberFromText("enum MyEnum { myMember }").member;
            chai_1.expect(function () { return member.getInitializerIfKindOrThrow(typescript_1.SyntaxKind.ObjectLiteralExpression); }).to.throw();
        });
    });
});
