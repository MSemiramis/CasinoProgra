"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("AmbientableNode", function () {
    describe("navigation", function () {
        var mainSourceFile = testHelpers_1.getInfoFromText("declare var ambientedVar; var myExplicitVar: string;").sourceFile;
        var statements = mainSourceFile.getVariableStatements();
        var ambientedStatement = statements[0];
        var notAmbientedStatement = statements[1];
        describe("hasDeclareKeyword", function () {
            it("should have a declare keyword when it has one", function () {
                chai_1.expect(ambientedStatement.hasDeclareKeyword()).to.be.true;
            });
            it("should not have an declare keyword when it doesn't have one", function () {
                chai_1.expect(notAmbientedStatement.hasDeclareKeyword()).to.be.false;
            });
        });
        describe("getDeclareKeyword", function () {
            it("should have an declare keyword when it has one", function () {
                chai_1.expect(ambientedStatement.getDeclareKeyword().getText()).to.equal("declare");
            });
            it("should not have an declare keyword when it doesn't have one", function () {
                chai_1.expect(notAmbientedStatement.getDeclareKeyword()).to.be.undefined;
            });
        });
        describe("getDeclareKeywordOrThrow", function () {
            it("should have an declare keyword when it has one", function () {
                chai_1.expect(ambientedStatement.getDeclareKeywordOrThrow().getText()).to.equal("declare");
            });
            it("should not have an declare keyword when it doesn't have one", function () {
                chai_1.expect(function () { return notAmbientedStatement.getDeclareKeywordOrThrow(); }).to.throw();
            });
        });
        describe("isAmbient", function () {
            function doTest(text, expectedValue) {
                var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
                chai_1.expect(firstChild.isAmbient()).to.equal(expectedValue);
            }
            it("should not be ambient when not", function () {
                doTest("class Identifier {}", false);
            });
            it("should be ambient when it has a declare keyword", function () {
                doTest("declare class Identifier {}", true);
            });
            it("should be ambient when it's in a definition file", function () {
                var firstChild = testHelpers_1.getInfoFromText("class Identifier {}", { isDefinitionFile: true }).firstChild;
                chai_1.expect(firstChild.isAmbient()).to.be.true;
            });
            it("should be ambient when it's parent is ambient", function () {
                var firstChild = testHelpers_1.getInfoFromText("declare namespace Identifier { class Identifier {} }").firstChild;
                var innerClass = firstChild.getClasses()[0];
                chai_1.expect(innerClass.isAmbient()).to.be.true;
            });
            it("should always be ambient for interfaces", function () {
                doTest("interface Identifier {}", true);
            });
            it("should always be ambient for type aliases", function () {
                doTest("type Identifier = string;", true);
            });
        });
    });
    describe("setHasDeclareKeyword", function () {
        function doTest(text, value, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setHasDeclareKeyword(value);
            chai_1.expect(sourceFile.getFullText()).to.equal(expected);
        }
        it("should add declare keyword when setting it to true", function () {
            doTest("class MyClass { }", true, "declare class MyClass { }");
        });
        it("should remove declare keyword when setting it to false", function () {
            doTest("declare class MyClass { }", false, "class MyClass { }");
        });
        it("should add to a function declaration that has an export keyword and js doc", function () {
            // this is a weird situation where the jsdoc pos is 4, but the export keyword's syntax list is 0 (maybe it's a ts compiler bug?)
            doTest("    /** Testing*/export function identifier { }", true, "    /** Testing*/export declare function identifier { }");
        });
        it("should do nothing for an interface when setting to true", function () {
            doTest("interface MyInterface { }", true, "interface MyInterface { }");
        });
        it("should do nothing for a type alias when setting to true", function () {
            doTest("type MyType = string;", true, "type MyType = string;");
        });
    });
    describe("fill", function () {
        function doTest(startingCode, structure, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startingCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.fill(structure);
            chai_1.expect(firstChild.getText()).to.equal(expectedCode);
        }
        it("should not modify when not set and structure empty", function () {
            doTest("class MyClass {}", {}, "class MyClass {}");
        });
        it("should not modify when set and structure empty", function () {
            doTest("declare class MyClass {}", {}, "declare class MyClass {}");
        });
        it("should modify when setting true", function () {
            doTest("class MyClass {}", { hasDeclareKeyword: true }, "declare class MyClass {}");
        });
    });
});
