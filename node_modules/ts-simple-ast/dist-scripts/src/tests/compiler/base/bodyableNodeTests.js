"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("BodyableNode", function () {
    describe("setBodyText", function () {
        describe("using a writer", function () {
            function doTest(startCode, writerFunc, expectedCode) {
                var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                firstChild.setBodyText(writerFunc);
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            }
            it("should set the body text with only one ending newline when writing a line at the end", function () {
                doTest("function myFunction() {}", function (writer) {
                    writer.writeLine("test;").writeLine("test2;");
                }, "function myFunction() {\n    test;\n    test2;\n}");
            });
            it("should set the body text with only one ending newline when not writing a line at the end", function () {
                doTest("function myFunction() {}", function (writer) {
                    writer.writeLine("test;").write("test2;");
                }, "function myFunction() {\n    test;\n    test2;\n}");
            });
        });
        describe("class method", function () {
            function doTest(startCode, newText, expectedCode) {
                var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                firstChild.getInstanceMethods()[0].setBodyText(newText);
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            }
            it("should set the body text with the correct indentation", function () {
                doTest("class C {\n    myMethod() {\n        const test = 5;\n    }\n}\n", "var myVar;\nfunction myInnerFunction() {\n}", "class C {\n    myMethod() {\n        var myVar;\n        function myInnerFunction() {\n        }\n    }\n}\n");
            });
            it("should add a body if none exists", function () {
                doTest("declare class C {\n    myMethod();\n}", "var myVar;", "declare class C {\n    myMethod() {\n        var myVar;\n    }\n}");
            });
        });
        describe("function", function () {
            function doTest(startCode, newText, expectedCode) {
                var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                firstChild.setBodyText(newText);
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            }
            it("should set the body text when empty", function () {
                doTest("function myFunction() {}", "var myVar;", "function myFunction() {\n    var myVar;\n}");
            });
            it("should not indent an empty line", function () {
                doTest("function myFunction() {}", "var myVar;\n\n'test';", "function myFunction() {\n    var myVar;\n\n    'test';\n}");
            });
            it("should set the body text to empty when providing an empty string", function () {
                doTest("function myFunction() { /* some text */ }", "", "function myFunction() {\n}");
            });
            it("should set the body text when not empty", function () {
                doTest("function myFunction() {\n    function myInnerFunction() {}\n}", "var myVar;", "function myFunction() {\n    var myVar;\n}");
            });
            it("should set the body text when not exists", function () {
                doTest("function myFunction();", "var myVar;", "function myFunction() {\n    var myVar;\n}");
            });
            it("should insert multiple lines on the correct indentation", function () {
                doTest("function myFunction() {\n    \n}", "var myVar;\nlet mySecond;", "function myFunction() {\n    var myVar;\n    let mySecond;\n}");
            });
        });
        describe("nested function", function () {
            function doTest(startCode, newText, expectedCode) {
                var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                firstChild.getFunctions()[0].setBodyText(newText);
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
            }
            it("should insert into a function within a function", function () {
                doTest("function myFunction() {\n    function myInnerFunction() {}\n}", "var myVar;\nlet mySecond;", "function myFunction() {\n    function myInnerFunction() {\n        var myVar;\n        let mySecond;\n    }\n}");
            });
        });
    });
    describe("hasBody", function () {
        function doTest(startCode, value) {
            var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            chai_1.expect(firstChild.hasBody()).to.equal(value);
        }
        it("should have a body when it does", function () {
            doTest("function myFunction() {\n}", true);
        });
        it("should not have a body when it doesn't", function () {
            doTest("function myFunction(): boolean;", false);
        });
    });
    describe("addBody", function () {
        function doTest(startCode, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.addBody();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should do nothing when it exists", function () {
            doTest("function myFunction() {\n}", "function myFunction() {\n}");
        });
        it("should add the function body when it doesn't exist and has a type", function () {
            doTest("function myFunction(): string;", "function myFunction(): string {\n}");
        });
        it("should add the function body when it doesn't exist", function () {
            doTest("function myFunction();", "function myFunction() {\n}");
        });
        it("should add the function body when it doesn't exist and has no semicolon", function () {
            doTest("function myFunction()", "function myFunction() {\n}");
        });
    });
    describe("removeBody", function () {
        function doTest(startCode, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.removeBody();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should remove the function body when it exists", function () {
            doTest("function myFunction() {\n}", "function myFunction();");
        });
        it("should remove the function body when it exists and is on a newline", function () {
            doTest("function myFunction()\n{\n}", "function myFunction();");
        });
        it("should remove the function body when it exists and has a type", function () {
            doTest("function myFunction(): string {\n}", "function myFunction(): string;");
        });
        it("should do nothing when it doesn't exist", function () {
            doTest("function myFunction();", "function myFunction();");
        });
    });
    describe("fill", function () {
        function doTest(startCode, structure, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.fill(structure);
            chai_1.expect(firstChild.getText()).to.equal(expectedCode);
        }
        it("should set the text of a function when using a string", function () {
            doTest("function myFunction() {\n}", { bodyText: "var myVar;" }, "function myFunction() {\n    var myVar;\n}");
        });
        it("should set the text of a function when using a writer", function () {
            doTest("function myFunction() {\n}", { bodyText: function (writer) { return writer.writeLine("var myVar;"); } }, "function myFunction() {\n    var myVar;\n}");
        });
    });
});
