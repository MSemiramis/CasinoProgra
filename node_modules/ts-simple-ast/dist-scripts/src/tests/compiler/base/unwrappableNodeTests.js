"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("UnwrappableNode", function () {
    describe("unwrap", function () {
        function doTest(startCode, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var nodeInBody = firstChild.getChildSyntaxListOrThrow().getChildren()[0];
            firstChild.unwrap();
            chai_1.expect(function () { return firstChild.compilerNode; }).to.throw(); // should be forgotten
            chai_1.expect(function () { return nodeInBody.compilerNode; }).to.not.throw();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should unwrap a namespace", function () {
            doTest("namespace Test {\n    var t: string;\n    var u: string;\nvar v: string;\n}", "var t: string;\nvar u: string;\nvar v: string;");
        });
        it("should unwrap a namespace with periods in name", function () {
            doTest("namespace Test.This.Out {\n    var t: string;\n}", "var t: string;");
        });
        it("should unwrap a with the correct indentation", function () {
            doTest("\n    namespace Test {\n        var t: string;\n    }", "    var t: string;");
        });
        it("should not unindent any string literals", function () {
            doTest("namespace Test {\n    var t = \"some text \\\n    goes here\";\n    var u = `some text\n    goes here`;\n    var v = `some text\n    goes here ${test\n    }more\n    and ${more}`;\n}", "var t = \"some text \\\n    goes here\";\nvar u = `some text\n    goes here`;\nvar v = `some text\n    goes here ${test\n}more\n    and ${more}`;");
        });
        it("should unwrap a function", function () {
            doTest("function myFunction(param: string) {\n    var t: string;\n}", "var t: string;");
        });
    });
});
