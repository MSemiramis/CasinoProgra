"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
describe("ModifierableNode", function () {
    describe("getFirstModifierByKind", function () {
        var firstChild = testHelpers_1.getInfoFromText("export class Identifier {}").firstChild;
        it("should return the modifier when it exists", function () {
            chai_1.expect(firstChild.getFirstModifierByKind(typescript_1.SyntaxKind.ExportKeyword)).to.not.be.undefined;
        });
        it("should return undefined when the modifier doesn't exist", function () {
            chai_1.expect(firstChild.getFirstModifierByKind(typescript_1.SyntaxKind.AbstractKeyword)).to.be.undefined;
        });
    });
    describe("getFirstModifierByKindOrThrow", function () {
        var firstChild = testHelpers_1.getInfoFromText("export class Identifier {}").firstChild;
        it("should return the modifier when it exists", function () {
            chai_1.expect(firstChild.getFirstModifierByKindOrThrow(typescript_1.SyntaxKind.ExportKeyword)).to.not.be.undefined;
        });
        it("should return undefined when the modifier doesn't exist", function () {
            chai_1.expect(function () { return firstChild.getFirstModifierByKindOrThrow(typescript_1.SyntaxKind.AbstractKeyword); }).to.throw();
        });
    });
    describe("hasModifier", function () {
        var firstChild = testHelpers_1.getInfoFromText("export class Identifier {}").firstChild;
        describe("providing string", function () {
            it("should be true when it does", function () {
                chai_1.expect(firstChild.hasModifier("export")).to.be.true;
            });
            it("should be false when it doesn't", function () {
                chai_1.expect(firstChild.hasModifier("abstract")).to.be.false;
            });
        });
        describe("providing syntax kind", function () {
            it("should be true when it does", function () {
                chai_1.expect(firstChild.hasModifier(typescript_1.SyntaxKind.ExportKeyword)).to.be.true;
            });
            it("should be false when it doesn't", function () {
                chai_1.expect(firstChild.hasModifier(typescript_1.SyntaxKind.AbstractKeyword)).to.be.false;
            });
        });
    });
    describe("getModifiers", function () {
        var firstChild = testHelpers_1.getInfoFromText("export abstract class Identifier {}").firstChild;
        var modifiers = firstChild.getModifiers();
        it("should get all the modifiers", function () {
            chai_1.expect(modifiers.length).to.equal(2);
        });
        it("should get the right modifiers", function () {
            chai_1.expect(modifiers[0].getKind()).to.equal(typescript_1.SyntaxKind.ExportKeyword);
            chai_1.expect(modifiers[1].getKind()).to.equal(typescript_1.SyntaxKind.AbstractKeyword);
        });
    });
    describe("addModifier", function () {
        it("should add a modifier in the correct order in a simple scenario", function () {
            var firstChild = testHelpers_1.getInfoFromText("class Identifier {}").firstChild;
            firstChild.addModifier("abstract");
            firstChild.addModifier("export");
            chai_1.expect(firstChild.getText()).to.equal("export abstract class Identifier {}");
        });
        it("should add a modifier in the correct order in an advanced scenario", function () {
            var firstChild = testHelpers_1.getInfoFromText("class Identifier {}").firstChild;
            firstChild.addModifier("export");
            firstChild.addModifier("abstract");
            firstChild.addModifier("declare");
            chai_1.expect(firstChild.getText()).to.equal("export declare abstract class Identifier {}");
        });
        it("should not add the same modifier twice", function () {
            var firstChild = testHelpers_1.getInfoFromText("class Identifier {}").firstChild;
            firstChild.addModifier("export");
            firstChild.addModifier("export");
            chai_1.expect(firstChild.getText()).to.equal("export class Identifier {}");
        });
        it("should add when there's a decorator", function () {
            var firstChild = testHelpers_1.getInfoFromText("@dec class Identifier {}").firstChild;
            firstChild.addModifier("export");
            chai_1.expect(firstChild.getText()).to.equal("@dec export class Identifier {}");
        });
        it("should add when there's a js doc", function () {
            var firstChild = testHelpers_1.getInfoFromText("/** Test */ class Identifier {}").firstChild;
            firstChild.addModifier("export");
            chai_1.expect(firstChild.getFullText()).to.equal("/** Test */ export class Identifier {}");
        });
    });
    describe("toggleModifier", function () {
        it("should add a modifier when toggling on", function () {
            var firstChild = testHelpers_1.getInfoFromText("class Identifier {}").firstChild;
            firstChild.toggleModifier("export");
            chai_1.expect(firstChild.getText()).to.equal("export class Identifier {}");
        });
        it("should remove the modifier when toggling off", function () {
            var firstChild = testHelpers_1.getInfoFromText("export class Identifier {}").firstChild;
            firstChild.toggleModifier("export");
            chai_1.expect(firstChild.getText()).to.equal("class Identifier {}");
        });
        it("should use the value for toggling that's provided when toggling on and on", function () {
            var firstChild = testHelpers_1.getInfoFromText("export class Identifier {}").firstChild;
            firstChild.toggleModifier("export", true);
            chai_1.expect(firstChild.getText()).to.equal("export class Identifier {}");
        });
        it("should use the value for toggling that's provided when toggling on and off", function () {
            var firstChild = testHelpers_1.getInfoFromText("class Identifier {}").firstChild;
            firstChild.toggleModifier("export", true);
            chai_1.expect(firstChild.getText()).to.equal("export class Identifier {}");
        });
        it("should use the value for toggling that's provided when toggling off and on", function () {
            var firstChild = testHelpers_1.getInfoFromText("export class Identifier {}").firstChild;
            firstChild.toggleModifier("export", false);
            chai_1.expect(firstChild.getText()).to.equal("class Identifier {}");
        });
        it("should use the value for toggling that's provided when toggling off and off", function () {
            var firstChild = testHelpers_1.getInfoFromText("class Identifier {}").firstChild;
            firstChild.toggleModifier("export", false);
            chai_1.expect(firstChild.getText()).to.equal("class Identifier {}");
        });
    });
});
