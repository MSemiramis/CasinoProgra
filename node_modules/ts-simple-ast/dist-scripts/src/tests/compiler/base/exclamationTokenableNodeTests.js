"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var errors = require("../../../errors");
var testHelpers_1 = require("../testHelpers");
describe("ExclamationTokenableNode", function () {
    function getInfoWithFirstPropertyFromText(text) {
        var result = testHelpers_1.getInfoFromText(text);
        return __assign({}, result, { firstProperty: result.firstChild.getInstanceProperties()[0] });
    }
    function getInfoWithFirstVariableDeclarationFromText(text) {
        var result = testHelpers_1.getInfoFromText(text);
        return __assign({}, result, { firstDeclaration: result.firstChild.getDeclarations()[0] });
    }
    describe("hasExclamationToken", function () {
        function doTest(text, value) {
            var firstProperty = getInfoWithFirstPropertyFromText(text).firstProperty;
            chai_1.expect(firstProperty.hasExclamationToken()).to.equal(value);
        }
        it("should have a exclamation token when has one", function () {
            doTest("class MyClass { prop!: string; }", true);
        });
        it("should not have a exclamation token when not has one", function () {
            doTest("class MyClass { prop: string; }", false);
        });
    });
    describe("getExclamationTokenNode", function () {
        it("should be get the exclamation token node", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class MyClass { prop!: string; }").firstProperty;
            chai_1.expect(firstProperty.getExclamationTokenNode().getText()).to.equal("!");
        });
        it("should be undefined when no exclamation token", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class MyClass { prop: string; }").firstProperty;
            chai_1.expect(firstProperty.getExclamationTokenNode()).to.be.undefined;
        });
    });
    describe("getExclamationTokenNodeOrThrow", function () {
        it("should be get the exclamation token node", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class MyClass { prop!: string;} ").firstProperty;
            chai_1.expect(firstProperty.getExclamationTokenNodeOrThrow().getText()).to.equal("!");
        });
        it("should throw when no exclamation token", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class MyClass { prop: string; } ").firstProperty;
            chai_1.expect(function () { return firstProperty.getExclamationTokenNodeOrThrow(); }).to.throw();
        });
    });
    describe("setHasExclamationToken", function () {
        function doTest(startText, value, expected) {
            var _a = getInfoWithFirstPropertyFromText(startText), firstProperty = _a.firstProperty, sourceFile = _a.sourceFile;
            firstProperty.setHasExclamationToken(value);
            chai_1.expect(sourceFile.getFullText()).to.be.equal(expected);
        }
        it("should be set as having one when not", function () {
            doTest("class MyClass { prop: string; }", true, "class MyClass { prop!: string; }");
        });
        it("should be set as having when when has a question token", function () {
            doTest("class MyClass { prop?: string; }", true, "class MyClass { prop!: string; }");
        });
        it("should be set as not having one when has one", function () {
            doTest("class MyClass { prop!: string; }", false, "class MyClass { prop: string; }");
        });
        it("should do nothing when not changing", function () {
            doTest("class MyClass { prop: string; }", false, "class MyClass { prop: string; }");
        });
        function doVariableDeclarationTest(startText, value, expected) {
            var _a = getInfoWithFirstVariableDeclarationFromText(startText), firstDeclaration = _a.firstDeclaration, sourceFile = _a.sourceFile;
            firstDeclaration.setHasExclamationToken(value);
            chai_1.expect(sourceFile.getFullText()).to.be.equal(expected);
        }
        it("should set as having one when it has a type", function () {
            doVariableDeclarationTest("const t: string;", true, "const t!: string;");
        });
        it("should throw when it doesn't have a type for a variable", function () {
            chai_1.expect(function () {
                var _a = getInfoWithFirstVariableDeclarationFromText("const t;"), firstDeclaration = _a.firstDeclaration, sourceFile = _a.sourceFile;
                firstDeclaration.setHasExclamationToken(true);
            }).to.throw(errors.InvalidOperationError);
        });
    });
    describe("fill", function () {
        function doTest(startCode, structure, expectedCode) {
            var _a = getInfoWithFirstPropertyFromText(startCode), firstProperty = _a.firstProperty, sourceFile = _a.sourceFile;
            firstProperty.fill(structure);
            chai_1.expect(sourceFile.getText()).to.equal(expectedCode);
        }
        it("should not modify when not set and structure empty", function () {
            doTest("class Identifier { prop: string; }", {}, "class Identifier { prop: string; }");
        });
        it("should not modify when set and structure empty", function () {
            doTest("class Identifier { prop!: string; }", {}, "class Identifier { prop!: string; }");
        });
        it("should modify when setting true", function () {
            doTest("class Identifier { prop: string; }", { hasExclamationToken: true }, "class Identifier { prop!: string; }");
        });
    });
});
