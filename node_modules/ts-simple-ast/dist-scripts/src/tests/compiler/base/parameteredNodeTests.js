"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var compiler_1 = require("../../../compiler");
var testHelpers_1 = require("../testHelpers");
describe("ParameteredNode", function () {
    describe("getParameter", function () {
        var firstChild = testHelpers_1.getInfoFromText("function func(param1: string, param2: number){}").firstChild;
        it("should get the parameter by name", function () {
            chai_1.expect(firstChild.getParameter("param1").getName()).to.equal("param1");
        });
        it("should get the parameter by function", function () {
            chai_1.expect(firstChild.getParameter(function (p) { return p.getName() === "param2"; })).to.equal(firstChild.getParameters()[1]);
        });
        it("should return undefined when it doesn't exist", function () {
            chai_1.expect(firstChild.getParameter("paramx")).to.be.undefined;
        });
    });
    describe("getParameterOrThrow", function () {
        var firstChild = testHelpers_1.getInfoFromText("function func(param1: string, param2: number){}").firstChild;
        it("should get the parameter by name", function () {
            chai_1.expect(firstChild.getParameterOrThrow("param1").getName()).to.equal("param1");
        });
        it("should get the parameter by function", function () {
            chai_1.expect(firstChild.getParameterOrThrow(function (p) { return p.getName() === "param2"; })).to.equal(firstChild.getParameters()[1]);
        });
        it("should throw when it doesn't exist", function () {
            chai_1.expect(function () { return firstChild.getParameterOrThrow("paramx"); }).to.throw();
        });
    });
    describe("getParameters", function () {
        var firstChild = testHelpers_1.getInfoFromText("function func(param1: string, param2: number){}").firstChild;
        var parameters = firstChild.getParameters();
        it("should get the right number of parameters", function () {
            chai_1.expect(parameters.length).to.equal(2);
        });
        it("should have parameter of type ParameterDeclaration", function () {
            chai_1.expect(parameters[0]).to.be.instanceOf(compiler_1.ParameterDeclaration);
        });
    });
    describe("addParameter", function () {
        function doTest(startCode, structure, expectedCode) {
            var firstChild = testHelpers_1.getInfoFromText(startCode).firstChild;
            var result = firstChild.addParameter(structure);
            chai_1.expect(firstChild.getText()).to.equal(expectedCode);
            chai_1.expect(result).to.be.instanceof(compiler_1.ParameterDeclaration);
        }
        it("should add when none exists", function () {
            doTest("function identifier() {}", { name: "param" }, "function identifier(param) {}");
        });
        it("should add when one exists", function () {
            doTest("function identifier(param1) {}", { name: "param2" }, "function identifier(param1, param2) {}");
        });
    });
    describe("addParameters", function () {
        function doTest(startCode, structures, expectedCode) {
            var firstChild = testHelpers_1.getInfoFromText(startCode).firstChild;
            var result = firstChild.addParameters(structures);
            chai_1.expect(firstChild.getText()).to.equal(expectedCode);
            chai_1.expect(result.length).to.equal(structures.length);
        }
        it("should add multiple", function () {
            doTest("function identifier(param1) {}", [{ name: "param2" }, { name: "param3" }], "function identifier(param1, param2, param3) {}");
        });
    });
    describe("insertParameter", function () {
        function doTest(startCode, index, structure, expectedCode) {
            var firstChild = testHelpers_1.getInfoFromText(startCode).firstChild;
            var result = firstChild.insertParameter(index, structure);
            chai_1.expect(firstChild.getText()).to.equal(expectedCode);
            chai_1.expect(result).to.be.instanceof(compiler_1.ParameterDeclaration);
        }
        it("should insert when none exists", function () {
            doTest("function identifier() {}", 0, { name: "param" }, "function identifier(param) {}");
        });
        it("should insert when one exists", function () {
            doTest("function identifier(param2) {}", 0, { name: "param1" }, "function identifier(param1, param2) {}");
        });
    });
    describe("insertParameters", function () {
        function doTest(startCode, insertIndex, structures, expectedCode) {
            var firstChild = testHelpers_1.getInfoFromText(startCode).firstChild;
            var result = firstChild.insertParameters(insertIndex, structures);
            chai_1.expect(firstChild.getText()).to.equal(expectedCode);
            chai_1.expect(result.length).to.equal(structures.length);
        }
        it("should insert when none exists", function () {
            doTest("function identifier() {}", 0, [{ name: "param1", isReadonly: true }, { name: "param2", type: "string[]", isRestParameter: true }], "function identifier(readonly param1, ...param2: string[]) {}");
        });
        it("should insert at the start", function () {
            doTest("function identifier(param2) {}", 0, [{ name: "param1" }], "function identifier(param1, param2) {}");
        });
        it("should insert at the end", function () {
            doTest("function identifier(param1) {}", 1, [{ name: "param2" }], "function identifier(param1, param2) {}");
        });
        it("should insert in the middle", function () {
            doTest("function identifier(param1, param3) {}", 1, [{ name: "param2" }], "function identifier(param1, param2, param3) {}");
        });
    });
    describe("fill", function () {
        function doTest(startingCode, structure, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startingCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.fill(structure);
            chai_1.expect(firstChild.getText()).to.equal(expectedCode);
        }
        it("should modify when setting", function () {
            doTest("function identifier() {}", { parameters: [{ name: "param" }] }, "function identifier(param) {}");
        });
        it("should not modify anything if the structure doesn't change anything", function () {
            doTest("function identifier() {}", {}, "function identifier() {}");
        });
    });
});
