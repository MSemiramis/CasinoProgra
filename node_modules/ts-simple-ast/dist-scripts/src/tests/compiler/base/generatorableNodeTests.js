"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("GeneratorableNode", function () {
    var mainSourceFile = testHelpers_1.getInfoFromText("function* Identifier() {}\nfunction Identifier2() {}").sourceFile;
    var generatorFunc = mainSourceFile.getFunctions()[0];
    var func = mainSourceFile.getFunctions()[1];
    describe("isGenerator", function () {
        it("should be a generator when so", function () {
            chai_1.expect(generatorFunc.isGenerator()).to.be.true;
        });
        it("should not be generator when not so", function () {
            chai_1.expect(func.isGenerator()).to.be.false;
        });
    });
    describe("getAsteriskToken", function () {
        it("should have an asterisk token when a generator", function () {
            chai_1.expect(generatorFunc.getAsteriskToken().getText()).to.equal("*");
        });
        it("should not have a async keyword when not async", function () {
            chai_1.expect(func.getAsteriskToken()).to.be.undefined;
        });
    });
    describe("getAsteriskTokenOrThrow", function () {
        it("should have an asterisk token when a generator", function () {
            chai_1.expect(generatorFunc.getAsteriskTokenOrThrow().getText()).to.equal("*");
        });
        it("should not have a async keyword when not async", function () {
            chai_1.expect(function () { return func.getAsteriskTokenOrThrow(); }).to.throw();
        });
    });
    describe("setIsGenerator", function () {
        describe("Functions", function () {
            it("should set as generator when not a generator", function () {
                var _a = testHelpers_1.getInfoFromText("function Identifier() {}"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                firstChild.setIsGenerator(true);
                chai_1.expect(sourceFile.getText()).to.equal("function* Identifier() {}");
            });
            it("should set as not a generator when a generator", function () {
                var _a = testHelpers_1.getInfoFromText("function* Identifier() {}"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                firstChild.setIsGenerator(false);
                chai_1.expect(sourceFile.getText()).to.equal("function Identifier() {}");
            });
            it("should not change the generator when already that value", function () {
                var _a = testHelpers_1.getInfoFromText("function* Identifier() {}"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                firstChild.setIsGenerator(true);
                chai_1.expect(sourceFile.getText()).to.equal("function* Identifier() {}");
            });
        });
        describe("Methods", function () {
            it("should set as generator when not a generator", function () {
                var _a = testHelpers_1.getInfoFromText("class Identifier { public identifier() { } }"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                var method = firstChild.getInstanceMethods()[0];
                method.setIsGenerator(true);
                chai_1.expect(sourceFile.getText()).to.equal("class Identifier { public *identifier() { } }");
            });
            it("should set as not a generator when a generator", function () {
                var _a = testHelpers_1.getInfoFromText("class Identifier { public *identifier() { } }"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                var method = firstChild.getInstanceMethods()[0];
                method.setIsGenerator(false);
                chai_1.expect(sourceFile.getText()).to.equal("class Identifier { public identifier() { } }");
            });
        });
    });
    describe("fill", function () {
        function doTest(startCode, structure, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.fill(structure);
            chai_1.expect(firstChild.getText()).to.equal(expectedCode);
        }
        it("should not modify anything if the structure doesn't change anything", function () {
            doTest("function myFunction() {}", {}, "function myFunction() {}");
        });
        it("should not modify anything if the structure doesn't change anything and the node has everything set", function () {
            doTest("function* myFunction() {}", {}, "function* myFunction() {}");
        });
        it("should modify when setting as async", function () {
            doTest("function myFunction() {}", { isGenerator: true }, "function* myFunction() {}");
        });
    });
});
