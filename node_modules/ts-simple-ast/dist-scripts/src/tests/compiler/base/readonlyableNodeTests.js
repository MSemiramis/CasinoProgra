"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("ReadonlyableNode", function () {
    function getInfoWithFirstPropertyFromText(text) {
        var result = testHelpers_1.getInfoFromText(text);
        return __assign({}, result, { firstProperty: result.firstChild.getInstanceProperties()[0] });
    }
    describe("isReadonly", function () {
        it("should be readonly when readonly", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class MyClass {\nreadonly prop: string;}\n").firstProperty;
            chai_1.expect(firstProperty.isReadonly()).to.be.true;
        });
        it("should not be readonly when not readonly", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class MyClass {\nprop: string;}\n").firstProperty;
            chai_1.expect(firstProperty.isReadonly()).to.be.false;
        });
    });
    describe("getReadonlyKeyword", function () {
        it("should be get the readonly keyword when readonly", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class MyClass {\nreadonly prop: string;}\n").firstProperty;
            chai_1.expect(firstProperty.getReadonlyKeyword().getText()).to.equal("readonly");
        });
        it("should return undefined when not readonly", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class MyClass {\nprop: string;}\n").firstProperty;
            chai_1.expect(firstProperty.getReadonlyKeyword()).to.be.undefined;
        });
    });
    describe("getReadonlyKeywordOrThrow", function () {
        it("should be get the readonly keyword when readonly", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class MyClass {\nreadonly prop: string;}\n").firstProperty;
            chai_1.expect(firstProperty.getReadonlyKeywordOrThrow().getText()).to.equal("readonly");
        });
        it("should throw when not readonly", function () {
            var firstProperty = getInfoWithFirstPropertyFromText("class MyClass {\nprop: string;}\n").firstProperty;
            chai_1.expect(function () { return firstProperty.getReadonlyKeywordOrThrow(); }).to.throw();
        });
    });
    describe("setIsReadonly", function () {
        it("should set as readonly when not readonly", function () {
            var _a = testHelpers_1.getInfoFromText("class MyClass { prop: string; }"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.getInstanceProperties()[0].setIsReadonly(true);
            chai_1.expect(sourceFile.getText()).to.equal("class MyClass { readonly prop: string; }");
        });
        it("should set as not readonly when readonly", function () {
            var _a = testHelpers_1.getInfoFromText("class MyClass { readonly prop: string; }"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.getInstanceProperties()[0].setIsReadonly(false);
            chai_1.expect(sourceFile.getText()).to.equal("class MyClass { prop: string; }");
        });
    });
    describe("fill", function () {
        function doTest(startCode, structure, expectedCode) {
            var _a = getInfoWithFirstPropertyFromText(startCode), firstProperty = _a.firstProperty, sourceFile = _a.sourceFile;
            firstProperty.fill(structure);
            chai_1.expect(sourceFile.getText()).to.equal(expectedCode);
        }
        it("should not modify when not set and structure empty", function () {
            doTest("class MyClass { prop: string; }", {}, "class MyClass { prop: string; }");
        });
        it("should not modify when set and structure empty", function () {
            doTest("class MyClass { readonly prop: string; }", {}, "class MyClass { readonly prop: string; }");
        });
        it("should modify when setting true", function () {
            doTest("class MyClass { prop: string; }", { isReadonly: true }, "class MyClass { readonly prop: string; }");
        });
    });
});
