"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../../testHelpers");
describe("NameableNode", function () {
    function getFunctionExpression(startCode) {
        var result = testHelpers_1.getInfoFromText(startCode);
        var funcExpr = result.firstChild.getDeclarations()[0].getInitializerOrThrow();
        return __assign({ funcExpr: funcExpr }, result);
    }
    describe("rename", function () {
        function doTest(startCode, newName, expectedCode) {
            var _a = getFunctionExpression(startCode), funcExpr = _a.funcExpr, sourceFile = _a.sourceFile;
            funcExpr.rename(newName);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should set the name if it doesn't exist", function () {
            doTest("const v = function() { return 2; };", "newName", "const v = function newName() { return 2; };");
        });
        it("should remove the name when providing an empty string", function () {
            doTest("const v = function name() { return 2; };", "", "const v = function() { return 2; };");
        });
        it("should do nothing when no name and an empty string", function () {
            doTest("const v = function() { return 2; };", "", "const v = function() { return 2; };");
        });
        it("should rename the name", function () {
            doTest("const v = function oldName() { return 2; };", "newName", "const v = function newName() { return 2; };");
        });
    });
    describe("getName", function () {
        function doTest(startCode, expectedName) {
            var _a = getFunctionExpression(startCode), funcExpr = _a.funcExpr, sourceFile = _a.sourceFile;
            chai_1.expect(funcExpr.getName()).to.equal(expectedName);
        }
        it("should get the name when it exists", function () {
            doTest("const v = function name() {};", "name");
        });
        it("should return undefined when it doesn't exist", function () {
            doTest("const v = function() {};", undefined);
        });
    });
    describe("getNameOrThrow", function () {
        it("should get the name when it exists", function () {
            var _a = getFunctionExpression("const v = function name() {};"), funcExpr = _a.funcExpr, sourceFile = _a.sourceFile;
            chai_1.expect(funcExpr.getNameOrThrow()).to.equal("name");
        });
        it("should throw when it doesn't exist", function () {
            var _a = getFunctionExpression("const v = function() {};"), funcExpr = _a.funcExpr, sourceFile = _a.sourceFile;
            chai_1.expect(function () { return funcExpr.getNameOrThrow(); }).to.throw();
        });
    });
    describe("getNameNode", function () {
        function doTest(startCode, expectedName) {
            var _a = getFunctionExpression(startCode), funcExpr = _a.funcExpr, sourceFile = _a.sourceFile;
            var identifier = funcExpr.getNameNode();
            chai_1.expect(identifier == null ? undefined : identifier.getText()).to.equal(expectedName);
        }
        it("should get the name when it exists", function () {
            doTest("const v = function name() {};", "name");
        });
        it("should return undefined when it doesn't exist", function () {
            doTest("const v = function() {};", undefined);
        });
    });
    describe("getNameNodeOrThrow", function () {
        it("should get the name when it exists", function () {
            var _a = getFunctionExpression("const v = function name() {};"), funcExpr = _a.funcExpr, sourceFile = _a.sourceFile;
            chai_1.expect(funcExpr.getNameNodeOrThrow().getText()).to.equal("name");
        });
        it("should throw when it doesn't exist", function () {
            var _a = getFunctionExpression("const v = function() {};"), funcExpr = _a.funcExpr, sourceFile = _a.sourceFile;
            chai_1.expect(function () { return funcExpr.getNameNodeOrThrow(); }).to.throw();
        });
    });
});
