"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var compiler_1 = require("../../../../compiler");
var testHelpers_1 = require("../../testHelpers");
describe("NamedNode", function () {
    describe("rename", function () {
        function throwTest(text) {
            var firstChild = testHelpers_1.getInfoFromText("enum MyEnum {}").firstChild;
            chai_1.expect(function () { return firstChild.rename(text); }).to.throw();
        }
        it("should set the name and rename any referenced nodes", function () {
            var _a = testHelpers_1.getInfoFromText("enum MyEnum {}\nlet myEnum: MyEnum;"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.rename("MyNewEnum");
            chai_1.expect(sourceFile.getFullText()).to.equal("enum MyNewEnum {}\nlet myEnum: MyNewEnum;");
        });
        it("should throw if null", function () {
            throwTest(null);
        });
        it("should throw if empty string", function () {
            throwTest("");
        });
        it("should throw if whitespace", function () {
            throwTest("    ");
        });
        it("should throw if a number", function () {
            throwTest(4);
        });
    });
    describe("getName", function () {
        var firstChild = testHelpers_1.getInfoFromText("enum MyEnum {}").firstChild;
        it("should get the name", function () {
            chai_1.expect(firstChild.getName()).to.equal("MyEnum");
        });
    });
    describe("getNameNode", function () {
        var firstChild = testHelpers_1.getInfoFromText("enum MyEnum {}").firstChild;
        var nameNode = firstChild.getNameNode();
        it("should have correct text", function () {
            chai_1.expect(nameNode.getText()).to.equal("MyEnum");
        });
        it("should be of correct instance", function () {
            chai_1.expect(nameNode).to.be.instanceOf(compiler_1.Identifier);
        });
    });
    describe("fill", function () {
        it("should fill the node with a new name via a rename", function () {
            var _a = testHelpers_1.getInfoFromText("enum MyEnum {}\nlet myEnum: MyEnum;"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.fill({ name: "MyNewEnum" });
            chai_1.expect(sourceFile.getFullText()).to.equal("enum MyNewEnum {}\nlet myEnum: MyNewEnum;");
        });
    });
});
