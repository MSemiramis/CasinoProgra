"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var compiler_1 = require("../../../compiler");
var testHelpers_1 = require("../testHelpers");
describe("ScopeableNode", function () {
    function getFirstParameter(text) {
        var result = testHelpers_1.getInfoFromText(text);
        return __assign({}, result, { firstParam: result.firstChild.getConstructors()[0].getParameters()[0] });
    }
    describe("getScope", function () {
        it("should return undefined when there's no scope", function () {
            var firstParam = getFirstParameter("class Identifier { constructor(param: string) {} }").firstParam;
            chai_1.expect(firstParam.getScope()).to.be.undefined;
        });
        it("should return public when public", function () {
            var firstParam = getFirstParameter("class Identifier { constructor(public param: string) {} }").firstParam;
            chai_1.expect(firstParam.getScope()).to.equal(compiler_1.Scope.Public);
        });
        it("should return protected when protected", function () {
            var firstParam = getFirstParameter("class Identifier { constructor(protected param: string) {} }").firstParam;
            chai_1.expect(firstParam.getScope()).to.equal(compiler_1.Scope.Protected);
        });
        it("should return private when private", function () {
            var firstParam = getFirstParameter("class Identifier { constructor(private param: string) {} }").firstParam;
            chai_1.expect(firstParam.getScope()).to.equal(compiler_1.Scope.Private);
        });
    });
    describe("hasScopeKeyword", function () {
        it("should not have one when there's no scope", function () {
            var firstParam = getFirstParameter("class Identifier { constructor(param: string) {} }").firstParam;
            chai_1.expect(firstParam.hasScopeKeyword()).to.be.false;
        });
        it("should have one when there is a scope", function () {
            var firstParam = getFirstParameter("class Identifier { constructor(public param: string) {} }").firstParam;
            chai_1.expect(firstParam.hasScopeKeyword()).to.be.true;
        });
    });
    describe("setScope", function () {
        it("should set to public when set to public", function () {
            var _a = getFirstParameter("class Identifier { constructor(param: string) {} }"), firstChild = _a.firstChild, firstParam = _a.firstParam;
            firstParam.setScope(compiler_1.Scope.Public);
            chai_1.expect(firstChild.getText()).to.be.equal("class Identifier { constructor(public param: string) {} }");
        });
        it("should set to protected when set to protected", function () {
            var _a = getFirstParameter("class Identifier { constructor(public param: string) {} }"), firstChild = _a.firstChild, firstParam = _a.firstParam;
            firstParam.setScope(compiler_1.Scope.Protected);
            chai_1.expect(firstChild.getText()).to.be.equal("class Identifier { constructor(protected param: string) {} }");
        });
        it("should set to private when set to private", function () {
            var _a = getFirstParameter("class Identifier { constructor(public param: string) {} }"), firstChild = _a.firstChild, firstParam = _a.firstParam;
            firstParam.setScope(compiler_1.Scope.Private);
            chai_1.expect(firstChild.getText()).to.be.equal("class Identifier { constructor(private param: string) {} }");
        });
        it("should clear when set to undefined", function () {
            var _a = getFirstParameter("class Identifier { constructor(public param: string) {} }"), firstChild = _a.firstChild, firstParam = _a.firstParam;
            firstParam.setScope(undefined);
            chai_1.expect(firstChild.getText()).to.be.equal("class Identifier { constructor(param: string) {} }");
        });
    });
    describe("fill", function () {
        function doTest(startCode, structure, expectedCode) {
            var _a = getFirstParameter(startCode), firstParam = _a.firstParam, sourceFile = _a.sourceFile;
            firstParam.fill(structure);
            chai_1.expect(sourceFile.getText()).to.equal(expectedCode);
        }
        it("should not modify when not set and structure empty", function () {
            doTest("class MyClass { constructor(param: string) {} }", {}, "class MyClass { constructor(param: string) {} }");
        });
        it("should not modify when set and structure empty", function () {
            doTest("class MyClass { constructor(public param: string) {} }", {}, "class MyClass { constructor(public param: string) {} }");
        });
        it("should modify when setting", function () {
            doTest("class MyClass { constructor(param: string) {} }", { scope: compiler_1.Scope.Protected }, "class MyClass { constructor(protected param: string) {} }");
        });
    });
});
