"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../../typescript");
var compiler_1 = require("../../../../compiler");
var testHelpers_1 = require("../../testHelpers");
describe("ShorthandPropertyAssignment", function () {
    function getShorthandPropertyAssignemntExpression(text) {
        var opts = testHelpers_1.getInfoFromText(text);
        var shorthandPropertyAssignment = opts.sourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.ShorthandPropertyAssignment);
        return __assign({ shorthandPropertyAssignment: shorthandPropertyAssignment }, opts);
    }
    describe("getObjectAssignmentInitializer", function () {
        it("should get the object assignment initializer", function () {
            var shorthandPropertyAssignment = getShorthandPropertyAssignemntExpression("({prop = 5})").shorthandPropertyAssignment;
            chai_1.expect(shorthandPropertyAssignment.getObjectAssignmentInitializer().getText()).to.equal("5");
        });
        it("should return undefined when the object assignment initializer doesn't exist", function () {
            var shorthandPropertyAssignment = getShorthandPropertyAssignemntExpression("({prop})").shorthandPropertyAssignment;
            chai_1.expect(shorthandPropertyAssignment.getObjectAssignmentInitializer()).to.be.undefined;
        });
    });
    describe("hasObjectAssignmentInitializer", function () {
        function doTest(text, expected) {
            var shorthandPropertyAssignment = getShorthandPropertyAssignemntExpression(text).shorthandPropertyAssignment;
            chai_1.expect(shorthandPropertyAssignment.hasObjectAssignmentInitializer()).to.equal(expected);
        }
        it("should be true when it does", function () {
            doTest("({prop = 5})", true);
        });
        it("should be false when not", function () {
            doTest("({prop})", false);
        });
    });
    describe("getObjectAssignmentInitializerOrThrow", function () {
        it("should get the object assignment initializer", function () {
            var shorthandPropertyAssignment = getShorthandPropertyAssignemntExpression("({prop = 5})").shorthandPropertyAssignment;
            chai_1.expect(shorthandPropertyAssignment.getObjectAssignmentInitializerOrThrow().getText()).to.equal("5");
        });
        it("should return undefined when the object assignment initializer doesn't exist", function () {
            var shorthandPropertyAssignment = getShorthandPropertyAssignemntExpression("({prop})").shorthandPropertyAssignment;
            chai_1.expect(function () { return shorthandPropertyAssignment.getObjectAssignmentInitializerOrThrow(); }).to.throw();
        });
    });
    describe("getEqualsToken", function () {
        it("should get the equals token", function () {
            var shorthandPropertyAssignment = getShorthandPropertyAssignemntExpression("({prop = 5})").shorthandPropertyAssignment;
            chai_1.expect(shorthandPropertyAssignment.getEqualsToken().getText()).to.equal("=");
        });
        it("should return undefined when the equals token doesn't exist", function () {
            var shorthandPropertyAssignment = getShorthandPropertyAssignemntExpression("({prop})").shorthandPropertyAssignment;
            chai_1.expect(shorthandPropertyAssignment.getEqualsToken()).to.be.undefined;
        });
    });
    describe("getEqualsTokenOrThrow", function () {
        it("should get the equals token", function () {
            var shorthandPropertyAssignment = getShorthandPropertyAssignemntExpression("({prop = 5})").shorthandPropertyAssignment;
            chai_1.expect(shorthandPropertyAssignment.getEqualsTokenOrThrow().getText()).to.equal("=");
        });
        it("should return undefined when the equals token doesn't exist", function () {
            var shorthandPropertyAssignment = getShorthandPropertyAssignemntExpression("({prop})").shorthandPropertyAssignment;
            chai_1.expect(function () { return shorthandPropertyAssignment.getEqualsTokenOrThrow(); }).to.throw();
        });
    });
    describe("setInitializer", function () {
        it("should set a new initializer", function () {
            var sourceFile = testHelpers_1.getInfoFromText("const t = { prop, prop2 }").sourceFile;
            var shortPropAssignment = sourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.ShorthandPropertyAssignment);
            var propAssignment = shortPropAssignment.setInitializer("5");
            chai_1.expect(propAssignment).to.be.instanceOf(compiler_1.PropertyAssignment);
            chai_1.expect(shortPropAssignment.wasForgotten()).to.be.true;
            chai_1.expect(sourceFile.getFullText()).to.equal("const t = { prop: 5, prop2 }");
        });
    });
    describe("removeObjectAssignmentInitializer", function () {
        function doTest(start, expected) {
            var sourceFile = testHelpers_1.getInfoFromText(start).sourceFile;
            var shortPropAssignment = sourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.ShorthandPropertyAssignment);
            shortPropAssignment.removeObjectAssignmentInitializer();
            chai_1.expect(sourceFile.getFullText()).to.equal(expected);
        }
        it("should do nothing when it doesn't exist", function () {
            doTest("({ start })", "({ start })");
        });
        it("should remove when it does exist", function () {
            doTest("({ start = 5 })", "({ start })");
        });
    });
});
