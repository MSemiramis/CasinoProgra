"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../../typescript");
var compiler_1 = require("../../../../compiler");
var testHelpers_1 = require("../../testHelpers");
describe("PropertyAssignment", function () {
    describe("removeInitializer", function () {
        it("should remove the property assignment and change into a shorthand property assignment", function () {
            var sourceFile = testHelpers_1.getInfoFromText("const t = { /* test */prop: 5, prop2: 6 };").sourceFile;
            var propAssignment = sourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.PropertyAssignment);
            var shorthandPropAssignment = propAssignment.removeInitializer();
            chai_1.expect(shorthandPropAssignment).to.be.instanceOf(compiler_1.ShorthandPropertyAssignment);
            chai_1.expect(sourceFile.getFullText()).to.equal("const t = { /* test */prop, prop2: 6 };");
            chai_1.expect(propAssignment.wasForgotten()).to.be.true;
        });
    });
    describe("setInitializer", function () {
        it("should set the initializer", function () {
            var sourceFile = testHelpers_1.getInfoFromText("const t = { prop: 5, prop2: 6 };").sourceFile;
            var propAssignment = sourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.PropertyAssignment);
            propAssignment.setInitializer("{ t } as string");
            chai_1.expect(sourceFile.getFullText()).to.equal("const t = { prop: { t } as string, prop2: 6 };");
        });
    });
});
