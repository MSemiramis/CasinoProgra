"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../../typescript");
var testHelpers_1 = require("../../testHelpers");
describe("ArrayLiteralExpression", function () {
    function getArrayLiteralExpression(text) {
        var opts = testHelpers_1.getInfoFromText(text);
        var declaration = opts.firstChild.getDeclarations()[0];
        return __assign({ arrayLiteralExpression: declaration.getFirstChildByKindOrThrow(typescript_1.SyntaxKind.ArrayLiteralExpression) }, opts);
    }
    describe("getElements", function () {
        function doTest(text, elementTexts) {
            var arrayLiteralExpression = getArrayLiteralExpression(text).arrayLiteralExpression;
            chai_1.expect(arrayLiteralExpression.getElements().map(function (e) { return e.getText(); })).to.deep.equal(elementTexts);
        }
        it("should get the elements when there are none", function () {
            doTest("var t = []", []);
        });
        it("should get the elements when there are some", function () {
            doTest("var t = [5, 3, 'test']", ["5", "3", "'test'"]);
        });
    });
    describe("insertElements", function () {
        function doTest(text, index, elementTexts, expectedText, options) {
            var _a = getArrayLiteralExpression(text), arrayLiteralExpression = _a.arrayLiteralExpression, sourceFile = _a.sourceFile;
            var result = arrayLiteralExpression.insertElements(index, elementTexts, options);
            chai_1.expect(result.map(function (r) { return r.getText(); })).to.deep.equal(elementTexts);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should insert into an empty array", function () {
            doTest("var t = []", 0, ["5", "3", "'test'"], "var t = [5, 3, 'test']");
        });
        it("should insert in at the start of the array", function () {
            doTest("var t = [3, 4]", 0, ["1", "2"], "var t = [1, 2, 3, 4]");
        });
        it("should insert in the middle of the array", function () {
            doTest("var t = [1, 4]", 1, ["2", "3"], "var t = [1, 2, 3, 4]");
        });
        it("should insert in at the end of the array", function () {
            doTest("var t = [1, 2]", 2, ["3", "4"], "var t = [1, 2, 3, 4]");
        });
        it("should insert on new lines when the array literal expression spans multiple lines", function () {
            doTest("var t = [\n]", 0, ["1", "2"], "var t = [\n    1,\n    2\n]");
        });
        it("should insert on the same line when two elements are on the same line", function () {
            doTest("var t = [1, 3,\n    4, 5\n]", 1, ["2"], "var t = [1, 2, 3,\n    4, 5\n]");
        });
        it("should insert on new lines when all the elements are on new lines", function () {
            doTest("var t = [\n    1,\n    4,\n    5\n]", 1, ["2", "3"], "var t = [\n    1,\n    2,\n    3,\n    4,\n    5\n]");
        });
        it("should insert on new lines when specifying to", function () {
            doTest("var t = [1, 3, 4]", 1, ["2"], "var t = [1,\n    2,\n    3, 4]", { useNewLines: true });
        });
        it("should insert first element on new lines specifying to", function () {
            doTest("var t = [2, 3, 4]", 0, ["1"], "var t = [\n    1,\n    2, 3, 4]", { useNewLines: true });
        });
        function doWriterTest(text, index, writerFunction, expectedText, options) {
            var _a = getArrayLiteralExpression(text), arrayLiteralExpression = _a.arrayLiteralExpression, sourceFile = _a.sourceFile;
            var result = arrayLiteralExpression.insertElements(index, writerFunction, options);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should support writing with a writer", function () {
            doWriterTest("var t = [1, 4, 5]", 1, function (writer) { return writer.writeLine("2,").write("3"); }, "var t = [1,\n    2,\n    3,\n    4, 5]", { useNewLines: true });
        });
    });
    describe("insertElement", function () {
        function doTest(text, index, elementText, expectedText) {
            var _a = getArrayLiteralExpression(text), arrayLiteralExpression = _a.arrayLiteralExpression, sourceFile = _a.sourceFile;
            var result = arrayLiteralExpression.insertElement(index, elementText);
            chai_1.expect(result.getText()).to.equal(elementText);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should insert into an empty array", function () {
            doTest("var t = []", 0, "1", "var t = [1]");
        });
        it("should insert in at the start of the array", function () {
            doTest("var t = [2, 3]", 0, "1", "var t = [1, 2, 3]");
        });
        it("should insert in the middle of the array", function () {
            doTest("var t = [1, 3]", 1, "2", "var t = [1, 2, 3]");
        });
        it("should insert in at the end of the array", function () {
            doTest("var t = [1, 2]", 2, "3", "var t = [1, 2, 3]");
        });
    });
    describe("addElements", function () {
        function doTest(text, elementTexts, expectedText) {
            var _a = getArrayLiteralExpression(text), arrayLiteralExpression = _a.arrayLiteralExpression, sourceFile = _a.sourceFile;
            var result = arrayLiteralExpression.addElements(elementTexts);
            chai_1.expect(result.map(function (r) { return r.getText(); })).to.deep.equal(elementTexts);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should add into an empty array", function () {
            doTest("var t = []", ["1", "2", "3"], "var t = [1, 2, 3]");
        });
        it("should add at the end of the array", function () {
            doTest("var t = [1, 2]", ["3", "4"], "var t = [1, 2, 3, 4]");
        });
    });
    describe("addElement", function () {
        function doTest(text, elementText, expectedText) {
            var _a = getArrayLiteralExpression(text), arrayLiteralExpression = _a.arrayLiteralExpression, sourceFile = _a.sourceFile;
            var result = arrayLiteralExpression.addElement(elementText);
            chai_1.expect(result.getText()).to.equal(elementText);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should add into an empty array", function () {
            doTest("var t = []", "1", "var t = [1]");
        });
        it("should add at the end of the array", function () {
            doTest("var t = [1, 2]", "3", "var t = [1, 2, 3]");
        });
    });
    describe("removeElement", function () {
        it("should throw when none exist", function () {
            var _a = getArrayLiteralExpression("var t = []"), arrayLiteralExpression = _a.arrayLiteralExpression, sourceFile = _a.sourceFile;
            chai_1.expect(function () { return arrayLiteralExpression.removeElement(0); }).to.throw();
        });
        it("should throw when specifying an invalid index", function () {
            var _a = getArrayLiteralExpression("var t = [1]"), arrayLiteralExpression = _a.arrayLiteralExpression, sourceFile = _a.sourceFile;
            chai_1.expect(function () { return arrayLiteralExpression.removeElement(1); }).to.throw();
        });
        describe("index", function () {
            function doTest(text, index, expectedText) {
                var _a = getArrayLiteralExpression(text), arrayLiteralExpression = _a.arrayLiteralExpression, sourceFile = _a.sourceFile;
                arrayLiteralExpression.removeElement(index);
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            }
            it("should remove at the start", function () {
                doTest("var t = [1, 2, 3]", 0, "var t = [2, 3]");
            });
            it("should remove in the middle", function () {
                doTest("var t = [1, 2, 3]", 1, "var t = [1, 3]");
            });
            it("should remove at the end", function () {
                doTest("var t = [1, 2, 3]", 2, "var t = [1, 2]");
            });
        });
        describe("element", function () {
            function doTest(text, index, expectedText) {
                var _a = getArrayLiteralExpression(text), arrayLiteralExpression = _a.arrayLiteralExpression, sourceFile = _a.sourceFile;
                arrayLiteralExpression.removeElement(arrayLiteralExpression.getElements()[index]);
                chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
            }
            it("should remove by element", function () {
                doTest("var t = [1, 2, 3]", 1, "var t = [1, 3]");
            });
        });
    });
});
