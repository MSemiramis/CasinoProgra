"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
function getInfoFromTextWithExpression(text) {
    var info = testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.ConditionalExpression);
    return __assign({}, info, { expression: info.descendant });
}
describe("ConditionalExpression", function () {
    var condition = "x > 0";
    var questionToken = "?";
    var whenTrue = "0";
    var colonToken = ":";
    var whenFalse = "x";
    var conditional = condition + " " + questionToken + " " + whenTrue + " " + colonToken + " " + whenFalse;
    describe("getCondition", function () {
        function doTest(text, expectedText) {
            var expression = getInfoFromTextWithExpression(text).expression;
            chai_1.expect(expression.getCondition().getText()).to.equal(expectedText);
        }
        it("should get the correct condition", function () {
            doTest(conditional, condition);
        });
    });
    describe("getQuestionToken", function () {
        function doTest(text, expectedText) {
            var expression = getInfoFromTextWithExpression(text).expression;
            chai_1.expect(expression.getQuestionToken().getText()).to.equal(expectedText);
        }
        it("should get the correct question token", function () {
            doTest(conditional, questionToken);
        });
    });
    describe("getWhenTrue", function () {
        function doTest(text, expectedText) {
            var expression = getInfoFromTextWithExpression(text).expression;
            chai_1.expect(expression.getWhenTrue().getText()).to.equal(expectedText);
        }
        it("should get the correct when true", function () {
            doTest(conditional, whenTrue);
        });
    });
    describe("getColonToken", function () {
        function doTest(text, expectedText) {
            var expression = getInfoFromTextWithExpression(text).expression;
            chai_1.expect(expression.getColonToken().getText()).to.equal(expectedText);
        }
        it("should get the correct colon token", function () {
            doTest(conditional, colonToken);
        });
    });
    describe("getWhenFalse", function () {
        function doTest(text, expectedText) {
            var expression = getInfoFromTextWithExpression(text).expression;
            chai_1.expect(expression.getWhenFalse().getText()).to.equal(expectedText);
        }
        it("should get the correct when false", function () {
            doTest(conditional, whenFalse);
        });
    });
});
