"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
function getInfoFromTextWithElementAccessExpression(text) {
    var info = testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.ElementAccessExpression);
    return __assign({}, info, { elementAccessExpression: info.descendant });
}
describe("ElementAccessExpression", function () {
    var expression = "1 + 2";
    var expr = "x[" + expression + "]";
    var emptyExpr = "x[]";
    var elementAccessExpression = getInfoFromTextWithElementAccessExpression(expr).elementAccessExpression;
    var emptyElementAccessExpression = getInfoFromTextWithElementAccessExpression(emptyExpr).elementAccessExpression;
    describe("getArgumentExpression", function () {
        it("should get the correct argument expression", function () {
            chai_1.expect(elementAccessExpression.getArgumentExpression().getText()).to.equal(expression);
        });
        it("should get the correct undefined argument expression", function () {
            chai_1.expect(emptyElementAccessExpression.getArgumentExpression()).to.be.undefined;
        });
    });
    describe("getArgumentExpressionOrThrow", function () {
        it("should should return the argument expression", function () {
            chai_1.expect(elementAccessExpression.getArgumentExpressionOrThrow().getText()).to.equal(expression);
        });
        it("should throw without an argument expression", function () {
            chai_1.expect(function () { return emptyElementAccessExpression.getArgumentExpressionOrThrow(); }).to.throw();
        });
    });
});
