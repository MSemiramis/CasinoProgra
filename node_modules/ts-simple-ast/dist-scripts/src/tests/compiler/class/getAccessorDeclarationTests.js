"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var utils_1 = require("../../../utils");
var testHelpers_1 = require("../testHelpers");
function getGetAccessorInfo(text) {
    var result = testHelpers_1.getInfoFromText(text);
    var getAccessor = utils_1.ArrayUtils.find(result.firstChild.getInstanceProperties(), function (f) { return f.getKind() === typescript_1.SyntaxKind.GetAccessor; });
    return __assign({}, result, { getAccessor: getAccessor });
}
describe("GetAccessorDeclaration", function () {
    describe("getSetAccessor", function () {
        it("should return undefined if no corresponding get accessor exists", function () {
            var getAccessor = getGetAccessorInfo("class Identifier { get identifier(): string { return \"\" } }").getAccessor;
            chai_1.expect(getAccessor.getSetAccessor()).to.be.undefined;
        });
        it("should return the set accessor if a corresponding one exists", function () {
            var code = "class Identifier { get identifier() { return \"\"; } set identifier(val: string) {}\n" +
                "get identifier2(): string { return \"\" }\nset identifier2(value: string) {} }";
            var getAccessor = getGetAccessorInfo(code).getAccessor;
            chai_1.expect(getAccessor.getSetAccessor().getText()).to.equal("set identifier(val: string) {}");
        });
    });
    describe("getSetAccessorOrThrow", function () {
        it("should throw if no corresponding get accessor exists", function () {
            var getAccessor = getGetAccessorInfo("class Identifier { get identifier(): string { return \"\" } }").getAccessor;
            chai_1.expect(function () { return getAccessor.getSetAccessorOrThrow(); }).to.throw();
        });
        it("should return the set accessor if a corresponding one exists", function () {
            var code = "class Identifier { get identifier() { return \"\"; } set identifier(val: string) {}\n" +
                "get identifier2(): string { return \"\" }\nset identifier2(value: string) {} }";
            var getAccessor = getGetAccessorInfo(code).getAccessor;
            chai_1.expect(getAccessor.getSetAccessorOrThrow().getText()).to.equal("set identifier(val: string) {}");
        });
    });
    describe("remove", function () {
        function doTest(code, nameToRemove, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(code), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.getInstanceProperty(nameToRemove).remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should remove when it's the only member", function () {
            doTest("class Identifier {\n    get prop(): string { return ''; }\n}", "prop", "class Identifier {\n}");
        });
        it("should not remove the set accessor", function () {
            doTest("class Identifier {\n    get prop(): string { return ''; }\n\n    set prop(val: string) {}\n}", "prop", "class Identifier {\n    set prop(val: string) {}\n}");
        });
        it("should remove when it's the first member", function () {
            doTest("class Identifier {\n    get prop(): string {}\n\n    get prop2(): string {}\n}", "prop", "class Identifier {\n    get prop2(): string {}\n}");
        });
        it("should remove when it's the middle member", function () {
            doTest("class Identifier {\n    get prop(): string {}\n\n    get prop2(): string {}\n\n    get prop3(): string {}\n}", "prop2", "class Identifier {\n    get prop(): string {}\n\n    get prop3(): string {}\n}");
        });
        it("should remove when it's the last member", function () {
            doTest("class Identifier {\n    prop: string;\n    get prop2(): string {}\n}", "prop2", "class Identifier {\n    prop: string;\n}");
        });
    });
});
