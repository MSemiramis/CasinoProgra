"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../../testHelpers");
describe("AbstractableNode", function () {
    describe("getAbstractKeyword", function () {
        it("should get the abstract keyword when abstract", function () {
            var firstChild = testHelpers_1.getInfoFromText("abstract class Identifier {}").firstChild;
            chai_1.expect(firstChild.getAbstractKeyword().getText()).to.be.equal("abstract");
        });
        it("should return undefined when not abstract", function () {
            var firstChild = testHelpers_1.getInfoFromText("class Identifier {}").firstChild;
            chai_1.expect(firstChild.getAbstractKeyword()).to.be.undefined;
        });
    });
    describe("getAbstractKeywordOrThrow", function () {
        it("should get the abstract keyword when abstract", function () {
            var firstChild = testHelpers_1.getInfoFromText("abstract class Identifier {}").firstChild;
            chai_1.expect(firstChild.getAbstractKeywordOrThrow().getText()).to.be.equal("abstract");
        });
        it("should throw when not abstract", function () {
            var firstChild = testHelpers_1.getInfoFromText("class Identifier {}").firstChild;
            chai_1.expect(function () { return firstChild.getAbstractKeywordOrThrow(); }).to.throw();
        });
    });
    describe("isAbstract", function () {
        it("should be abstract when abstract", function () {
            var firstChild = testHelpers_1.getInfoFromText("abstract class Identifier {}").firstChild;
            chai_1.expect(firstChild.isAbstract()).to.be.true;
        });
        it("should be not abstract when not abstract", function () {
            var firstChild = testHelpers_1.getInfoFromText("class Identifier {}").firstChild;
            chai_1.expect(firstChild.isAbstract()).to.be.false;
        });
    });
    describe("setIsAbstract", function () {
        it("should be set to abstract", function () {
            var firstChild = testHelpers_1.getInfoFromText("class Identifier {}").firstChild;
            firstChild.setIsAbstract(true);
            chai_1.expect(firstChild.getText()).to.equal("abstract class Identifier {}");
        });
        it("should be set to not abstract", function () {
            var firstChild = testHelpers_1.getInfoFromText("abstract class Identifier {}").firstChild;
            firstChild.setIsAbstract(false);
            chai_1.expect(firstChild.getText()).to.equal("class Identifier {}");
        });
    });
    describe("fill", function () {
        function doTest(startingCode, structure, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startingCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.fill(structure);
            chai_1.expect(firstChild.getText()).to.equal(expectedCode);
        }
        it("should not modify anything if the structure doesn't change anything", function () {
            doTest("class MyClass {}", {}, "class MyClass {}");
        });
        it("should not modify anything if the structure doesn't change anything and the node has everything set", function () {
            doTest("abstract class MyClass {}", {}, "abstract class MyClass {}");
        });
        it("should modify when setting as abstract", function () {
            doTest("class MyClass {}", { isAbstract: true }, "abstract class MyClass {}");
        });
    });
});
