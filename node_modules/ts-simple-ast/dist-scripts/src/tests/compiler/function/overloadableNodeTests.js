"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var compiler_1 = require("../../../compiler");
var testHelpers_1 = require("../testHelpers");
describe("OverloadableNode", function () {
    var functionCode = "function myFunction();function myFunction() {}";
    var functionSourceFile = testHelpers_1.getInfoFromText(functionCode).sourceFile;
    var functions = functionSourceFile.getChildSyntaxListOrThrow().getChildren();
    var constructorCode = "class MyClass { constructor();constructor();constructor() {} myMethod(): void;myMethod() {} }";
    var classChild = testHelpers_1.getInfoFromText(constructorCode).firstChild;
    var constructors = classChild.getChildSyntaxListOrThrow().getChildren().filter(function (c) { return c instanceof compiler_1.ConstructorDeclaration; });
    describe("isImplementation", function () {
        it("should not be an implementation when not one", function () {
            chai_1.expect(functions[0].isImplementation()).to.be.false;
        });
        it("should be an implementation when is one", function () {
            chai_1.expect(functions[1].isImplementation()).to.be.true;
        });
    });
    describe("isOverload", function () {
        it("should be an overload when is on", function () {
            chai_1.expect(functions[0].isOverload()).to.be.true;
        });
        it("should not be an overload when not one", function () {
            chai_1.expect(functions[1].isOverload()).to.be.false;
        });
    });
    describe("getOverloads", function () {
        describe("functions", function () {
            it("should have the right number of overloads when asking an overload", function () {
                var overloads = functions[0].getOverloads();
                chai_1.expect(functions[0].isOverload()).to.be.true;
                chai_1.expect(overloads.length).to.equal(1);
                chai_1.expect(overloads[0]).to.equal(functions[0]);
            });
            it("should have the right number of overloads when asking an implementation", function () {
                var overloads = functions[1].getOverloads();
                chai_1.expect(functions[1].isImplementation()).to.be.true;
                chai_1.expect(overloads.length).to.equal(1);
                chai_1.expect(overloads[0]).to.equal(functions[0]);
            });
        });
        describe("constructors", function () {
            it("should have the right number of overloads when asking an overload", function () {
                var overloads = constructors[0].getOverloads();
                chai_1.expect(constructors[0].isOverload()).to.be.true;
                chai_1.expect(overloads.length).to.equal(2);
                chai_1.expect(overloads.map(function (o) { return o.isOverload(); })).to.deep.equal([true, true]);
            });
            it("should have the right number of overloads when asking an implementation", function () {
                var overloads = constructors[2].getOverloads();
                chai_1.expect(constructors[2].isImplementation()).to.be.true;
                chai_1.expect(overloads.length).to.equal(2);
                chai_1.expect(overloads.map(function (o) { return o.isOverload(); })).to.deep.equal([true, true]);
            });
        });
        describe("ambient context", function () {
            it("should return all the overloads in an ambient context", function () {
                var code = "declare function myFunction(): void;declare function myFunction(): void;";
                var firstChild = testHelpers_1.getInfoFromText(code).firstChild;
                chai_1.expect(firstChild.getOverloads().length).to.equal(2);
            });
        });
    });
    describe("getImplementation", function () {
        describe("functions", function () {
            it("should get the implementation when asking an overload", function () {
                var implementation = functions[0].getImplementation();
                chai_1.expect(implementation).to.equal(functions[1]);
            });
            it("should have the right number of overloads when asking an implementation", function () {
                var implementation = functions[1].getImplementation();
                chai_1.expect(implementation).to.equal(functions[1]);
            });
        });
        describe("constructors", function () {
            it("should get the implementation when asking an overload", function () {
                var implementation = constructors[0].getImplementation();
                chai_1.expect(implementation).to.equal(constructors[2]);
            });
            it("should have the right number of overloads when asking an implementation", function () {
                var implementation = constructors[2].getImplementation();
                chai_1.expect(implementation).to.equal(constructors[2]);
            });
        });
        describe("ambient context", function () {
            it("should return undefined in an ambient context", function () {
                var code = "declare function myFunction(): void;declare function myFunction(): void;";
                var firstChild = testHelpers_1.getInfoFromText(code).firstChild;
                chai_1.expect(firstChild.getImplementation()).to.be.undefined;
            });
        });
    });
    describe("getImplementationOrThrow", function () {
        it("should get the implementation when asking an overload", function () {
            var implementation = functions[0].getImplementationOrThrow();
            chai_1.expect(implementation).to.equal(functions[1]);
        });
        it("should throw in an ambient context", function () {
            var code = "declare function myFunction(): void;declare function myFunction(): void;";
            var firstChild = testHelpers_1.getInfoFromText(code).firstChild;
            chai_1.expect(function () { return firstChild.getImplementationOrThrow(); }).to.throw();
        });
    });
});
