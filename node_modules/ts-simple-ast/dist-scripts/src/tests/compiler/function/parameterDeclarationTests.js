"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var utils_1 = require("../../../utils");
var testHelpers_1 = require("../testHelpers");
describe("ParameterDeclaration", function () {
    describe("isRestParameter", function () {
        function doTest(startCode, isRestParameter) {
            var firstChild = testHelpers_1.getInfoFromText(startCode).firstChild;
            var firstParam = firstChild.getParameters()[0];
            chai_1.expect(firstParam.isRestParameter()).to.be.equal(isRestParameter);
        }
        it("should be a rest parameter when is one", function () {
            doTest("function func(...param: string[]){}", true);
        });
        it("should not be a rest parameter when not one", function () {
            doTest("function func(param: string[]){}", false);
        });
    });
    describe("setIsRestParameter", function () {
        function doTest(startCode, isRestParameter, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var firstParam = firstChild.getParameters()[0];
            firstParam.setIsRestParameter(isRestParameter);
            chai_1.expect(sourceFile.getFullText()).to.be.equal(expectedCode);
        }
        it("should not change when not changing", function () {
            doTest("function func(...param: string[]){}", true, "function func(...param: string[]){}");
        });
        it("should set as rest parameter", function () {
            doTest("function func(param: string[]){}", true, "function func(...param: string[]){}");
        });
        it("should remove as rest parameter", function () {
            doTest("function func(...param: string[]){}", false, "function func(param: string[]){}");
        });
    });
    describe("isParameterProperty", function () {
        function doTest(startCode, isParameterProperty) {
            var firstChild = testHelpers_1.getInfoFromText(startCode).firstChild;
            var firstParam = firstChild.getParameters()[0];
            chai_1.expect(firstParam.isParameterProperty()).to.be.equal(isParameterProperty);
        }
        it("should be parameter property when has a scope", function () {
            doTest("function func(public param: any){}", true);
        });
        it("should be parameter property when is readonly", function () {
            doTest("function func(readonly param: any){}", true);
        });
        it("should not be parameter property when not readonly or having a scope", function () {
            doTest("function func(param: any){}", false);
        });
    });
    describe("isOptional", function () {
        function doTest(startCode, isOptional) {
            var firstChild = testHelpers_1.getInfoFromText(startCode).firstChild;
            var firstParam = firstChild.getParameters()[0];
            chai_1.expect(firstParam.isOptional()).to.be.equal(isOptional);
        }
        it("should be a optional when optional", function () {
            doTest("function func(param?: string){}", true);
        });
        it("should be a optional when has a default value", function () {
            doTest("function func(param = 4){}", true);
        });
        it("should be optional when has a rest parameter", function () {
            doTest("function func(...param: string[]){}", true);
        });
        it("should not be a optional otherwise", function () {
            doTest("function func(param: string){}", false);
        });
    });
    describe("fill", function () {
        function doTest(startCode, structure, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(startCode), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            var firstParam = firstChild.getParameters()[0];
            firstParam.fill(structure);
            chai_1.expect(sourceFile.getFullText()).to.be.equal(expectedCode);
        }
        it("should not modify when not changing", function () {
            doTest("function func(param: string) {}", {}, "function func(param: string) {}");
        });
        it("should modify when setting", function () {
            var structure = {
                isRestParameter: true
            };
            doTest("function func(param: string) {}", structure, "function func(...param: string) {}");
        });
    });
    describe("remove", function () {
        function doTest(code, nameToRemove, expectedCode) {
            var _a = testHelpers_1.getInfoFromText(code), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            utils_1.ArrayUtils.find(firstChild.getParameters(), function (p) { return p.getName() === nameToRemove; }).remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedCode);
        }
        it("should remove when it's the only parameter", function () {
            doTest("function identifier(param) {}", "param", "function identifier() {}");
        });
        it("should remove when it's the first parameter", function () {
            doTest("function identifier(param: string, param2) {}", "param", "function identifier(param2) {}");
        });
        it("should remove when it's the last parameter", function () {
            doTest("function identifier(param: string, param2?: string = '') {}", "param2", "function identifier(param: string) {}");
        });
        it("should remove when it's the middle parameter", function () {
            doTest("function identifier(param, param2, param3) {}", "param2", "function identifier(param, param3) {}");
        });
    });
});
