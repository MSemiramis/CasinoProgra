"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var Project_1 = require("../../../Project");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
describe("ImportEqualsDeclaration", function () {
    describe("getName", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.getName()).to.equal(expected);
        }
        it("should get the name", function () {
            doTest("import test = Namespace.Test;", "test");
        });
    });
    describe("getModuleReference", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.getModuleReference().getText()).to.equal(expected);
        }
        it("should get the module reference when specifying an entity", function () {
            doTest("import test = Namespace.Test;", "Namespace.Test");
        });
        it("should get the module specifier when importing a require", function () {
            doTest("import test = require(\"testing\");", "require(\"testing\")");
        });
    });
    describe("isExternalModuleReferenceRelative", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.isExternalModuleReferenceRelative()).to.equal(expected);
        }
        it("should not be when specifying an entity", function () {
            doTest("import test = Namespace.Test;", false);
        });
        it("should be when using ./", function () {
            doTest("import test = require('./test');", true);
        });
        it("should be when using ../", function () {
            doTest("import test = require('../test');", true);
        });
        it("should not be when using /", function () {
            doTest("import test = require('/test');", false);
        });
        it("should not be when not", function () {
            doTest("import test = require('test');", false);
        });
        it("should not be when empty", function () {
            doTest("import test = require();", false);
        });
        it("should not be when a number for some reason", function () {
            doTest("import test = require(5);", false);
        });
    });
    describe("setExternalModuleReference", function () {
        function doTest(text, externalModuleReference, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            firstChild.setExternalModuleReference(externalModuleReference);
            chai_1.expect(firstChild.getText()).to.equal(expected);
        }
        it("should set the external module reference when currently a namespace", function () {
            doTest("import test = Namespace.Test;", "./test", "import test = require(\"./test\");");
        });
        it("should set the external module reference when currently a require with no text", function () {
            doTest("import test = require();", "./test", "import test = require(\"./test\");");
        });
        it("should set the external module reference when currently a require with other text", function () {
            doTest("import test = require('./test2');", "./test", "import test = require(\"./test\");");
        });
        it("should set the external module reference when specifying a source file", function () {
            var _a = testHelpers_1.getInfoFromText("import test = require('./test2');"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setExternalModuleReference(sourceFile.getDirectory().createSourceFile("test3.ts"));
            chai_1.expect(firstChild.getText()).to.equal("import test = require(\"./test3\");");
        });
    });
    describe("remove", function () {
        function doTest(text, index, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            sourceFile.getStatements()[index].remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should remove the import equals declaration", function () {
            doTest("import test = Namespace.Test;", 0, "");
        });
    });
    describe("getExternalModuleReferenceSourceFile", function () {
        it("should get the referenced source file", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import test = require('./class');");
            var classSourceFile = project.createSourceFile("class.ts", "export class Class {}");
            chai_1.expect(mainSourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.ImportEqualsDeclaration).getExternalModuleReferenceSourceFile()).to.equal(classSourceFile);
        });
        it("should return undefined when the referenced file doesn't exist", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import test = require('./class');");
            chai_1.expect(mainSourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.ImportEqualsDeclaration).getExternalModuleReferenceSourceFile()).to.be.undefined;
        });
        it("should return undefined when doesn't have an external module reference", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import test = Namespace.Test);");
            chai_1.expect(mainSourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.ImportEqualsDeclaration).getExternalModuleReferenceSourceFile()).to.be.undefined;
        });
    });
    describe("getExternalModuleReferenceSourceFileOrThrow", function () {
        it("should get the referenced source file", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import test = require('./class');");
            var classSourceFile = project.createSourceFile("class.ts", "export class Class {}");
            chai_1.expect(mainSourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.ImportEqualsDeclaration).getExternalModuleReferenceSourceFileOrThrow()).to.equal(classSourceFile);
        });
        it("should throw when doesn't have an external module reference", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import test = Namespace.Test;");
            chai_1.expect(function () { return mainSourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.ImportEqualsDeclaration).getExternalModuleReferenceSourceFileOrThrow(); }).to.throw();
        });
    });
});
