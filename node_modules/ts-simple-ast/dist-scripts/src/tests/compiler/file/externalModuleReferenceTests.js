"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var Project_1 = require("../../../Project");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
describe("ExternalModuleReference", function () {
    function getNode(text) {
        return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.ExternalModuleReference);
    }
    // I'm not sure how to make expression null
    describe("getExpression", function () {
        it("should get the expression", function () {
            var descendant = getNode("import test = require('expression');").descendant;
            chai_1.expect(descendant.getExpression().getText()).to.equal("'expression'");
        });
    });
    describe("getExpressionOrThrow", function () {
        it("should get the expression", function () {
            var descendant = getNode("import test = require('expression');").descendant;
            chai_1.expect(descendant.getExpressionOrThrow().getText()).to.equal("'expression'");
        });
    });
    describe("isRelative", function () {
        function doTest(text, expected) {
            var descendant = getNode(text).descendant;
            chai_1.expect(descendant.isRelative()).to.equal(expected);
        }
        it("should be when using ./", function () {
            doTest("import test = require('./test');", true);
        });
        it("should be when using ../", function () {
            doTest("import test = require('../test');", true);
        });
        it("should not be when using /", function () {
            doTest("import test = require('/test');", false);
        });
        it("should not be when not", function () {
            doTest("import test = require('test');", false);
        });
        it("should not be when empty", function () {
            doTest("import test = require();", false);
        });
        it("should not be when a number for some reason", function () {
            doTest("import test = require(5);", false);
        });
    });
    describe("getReferencedSourceFile", function () {
        it("should get the referenced source file", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import test = require('./class');");
            var classSourceFile = project.createSourceFile("class.ts", "export class Class {}");
            chai_1.expect(mainSourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.ExternalModuleReference).getReferencedSourceFile()).to.equal(classSourceFile);
        });
        it("should return undefined when the referenced file doesn't exist", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import test = require('./class');");
            chai_1.expect(mainSourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.ExternalModuleReference).getReferencedSourceFile()).to.be.undefined;
        });
    });
    describe("getReferencedSourceFileOrThrow", function () {
        it("should get the referenced source file", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import test = require('./class');");
            var classSourceFile = project.createSourceFile("class.ts", "export class Class {}");
            chai_1.expect(mainSourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.ExternalModuleReference).getReferencedSourceFileOrThrow()).to.equal(classSourceFile);
        });
        it("should throw when the referenced file doesn't exist", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import test = require('./class');");
            chai_1.expect(function () { return mainSourceFile.getFirstDescendantByKindOrThrow(typescript_1.SyntaxKind.ExternalModuleReference).getReferencedSourceFileOrThrow(); }).to.throw();
        });
    });
});
