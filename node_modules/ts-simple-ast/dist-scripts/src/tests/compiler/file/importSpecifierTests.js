"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var utils_1 = require("../../../utils");
var testHelpers_1 = require("../testHelpers");
describe("ImportSpecifier", function () {
    describe("setName", function () {
        it("should only change what's imported", function () {
            var _a = testHelpers_1.getInfoFromText("import {name} from './file'; const t = name;"), firstChild = _a.firstChild, sourceFile = _a.sourceFile, project = _a.project;
            var namedImport = firstChild.getNamedImports()[0];
            var otherSourceFile = project.createSourceFile("file.ts", "export class name {}\nexport class newName {}");
            namedImport.setName("newName");
            chai_1.expect(sourceFile.getText()).to.equal("import {newName} from './file'; const t = name;");
            chai_1.expect(otherSourceFile.getText()).to.equal("export class name {}\nexport class newName {}");
        });
        it("should set only the identifier when an alias already exists", function () {
            var _a = testHelpers_1.getInfoFromText("import {name as alias} from './file'; const t = alias;"), firstChild = _a.firstChild, sourceFile = _a.sourceFile, project = _a.project;
            var namedImport = firstChild.getNamedImports()[0];
            var otherSourceFile = project.createSourceFile("file.ts", "export class name {}\nexport class newName {}");
            namedImport.setName("newName");
            chai_1.expect(sourceFile.getText()).to.equal("import {newName as alias} from './file'; const t = alias;");
            chai_1.expect(otherSourceFile.getText()).to.equal("export class name {}\nexport class newName {}");
        });
    });
    describe("renameName", function () {
        it("should rename what's being imported", function () {
            var _a = testHelpers_1.getInfoFromText("import {name} from './file'; const t = name;"), firstChild = _a.firstChild, sourceFile = _a.sourceFile, project = _a.project;
            var namedImport = firstChild.getNamedImports()[0];
            var otherSourceFile = project.createSourceFile("file.ts", "export class name {}");
            namedImport.renameName("newName");
            chai_1.expect(sourceFile.getText()).to.equal("import {newName} from './file'; const t = newName;");
            chai_1.expect(otherSourceFile.getText()).to.equal("export class newName {}");
        });
    });
    describe("getNameNode", function () {
        function doTest(text, name) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            var namedImport = firstChild.getNamedImports()[0];
            chai_1.expect(namedImport.getNameNode().getText()).to.equal(name);
        }
        it("should get the name when there is no alias", function () {
            doTest("import {name} from \"./test\";", "name");
        });
        it("should get the name when there is an alias", function () {
            doTest("import {name as alias} from \"./test\";", "name");
        });
        it("should get the identifier when it's a default keyword", function () {
            doTest("import {default as alias} from \"./test\";", "default");
        });
    });
    describe("getNameNode", function () {
        function doTest(text, name) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            var namedImport = firstChild.getNamedImports()[0];
            chai_1.expect(namedImport.getName()).to.equal(name);
        }
        it("should get the name", function () {
            doTest("import {name} from \"./test\";", "name");
        });
    });
    describe("setAlias", function () {
        function doTest(text, alias, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile, project = _a.project;
            var otherSourceFile = project.createSourceFile("file.ts", "export class name {}");
            var namedImport = firstChild.getNamedImports()[0];
            namedImport.setAlias(alias);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
            chai_1.expect(otherSourceFile.getText()).to.equal("export class name {}");
        }
        it("should be set when there is no alias", function () {
            doTest("import {name} from './file';", "alias", "import {name as alias} from './file';");
        });
        it("should be set and rename anything in the current file to the alias", function () {
            doTest("import {name} from './file'; const t = name;", "alias", "import {name as alias} from './file'; const t = alias;");
        });
        it("should rename when there is an alias", function () {
            doTest("import {name as alias} from './file'; const t = alias;", "newAlias", "import {name as newAlias} from './file'; const t = newAlias;");
        });
    });
    describe("getAliasIdentifier", function () {
        function doTest(text, alias) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            var namedImport = firstChild.getNamedImports()[0];
            if (alias == null)
                chai_1.expect(namedImport.getAliasIdentifier()).to.equal(undefined);
            else
                chai_1.expect(namedImport.getAliasIdentifier().getText()).to.equal(alias);
        }
        it("should be undefined there is no alias", function () {
            doTest("import {name} from \"./test\";", undefined);
        });
        it("should get the alias when there is an alias", function () {
            doTest("import {name as alias} from \"./test\";", "alias");
        });
        it("should get the alias when there is a default keyword", function () {
            doTest("import {default as alias} from \"./test\";", "alias");
        });
    });
    describe("getImportDeclaration", function () {
        it("should get the parent import declaration", function () {
            var firstChild = testHelpers_1.getInfoFromText("import {name} from \"./test\";").firstChild;
            var namedImport = firstChild.getNamedImports()[0];
            chai_1.expect(namedImport.getImportDeclaration()).to.equal(firstChild);
        });
    });
    describe("remove", function () {
        function doTest(text, nameToRemove, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            var importSpecifier = utils_1.ArrayUtils.find(sourceFile.getImportDeclarations()[0].getNamedImports(), function (i) { return i.getNameNode().getText() === nameToRemove; });
            importSpecifier.remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should remove the named import when it's the first one", function () {
            doTest("import {Name1, Name2} from \"module-name\";", "Name1", "import {Name2} from \"module-name\";");
        });
        it("should remove the named import when it's in the middle", function () {
            doTest("import {Name1, Name2, Name3} from \"module-name\";", "Name2", "import {Name1, Name3} from \"module-name\";");
        });
        it("should remove the named import when it's the last one", function () {
            doTest("import {Name1, Name2} from \"module-name\";", "Name2", "import {Name1} from \"module-name\";");
        });
        it("should remove the named imports when only one exist", function () {
            doTest("import {Name1} from \"module-name\";", "Name1", "import \"module-name\";");
        });
        it("should remove the named imports when only one exists and a default import exist", function () {
            doTest("import defaultExport, {Name1} from \"module-name\";", "Name1", "import defaultExport from \"module-name\";");
        });
    });
});
