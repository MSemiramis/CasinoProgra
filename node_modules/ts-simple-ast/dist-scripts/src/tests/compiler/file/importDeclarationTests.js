"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var Project_1 = require("../../../Project");
var errors = require("../../../errors");
var testHelpers_1 = require("../testHelpers");
describe("ImportDeclaration", function () {
    describe("setModuleSpecifier", function () {
        function doTest(text, newModuleSpecifier, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setModuleSpecifier(newModuleSpecifier);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        it("should set the module specifier when using single quotes", function () {
            doTest("import test from './test';", "./new-test", "import test from './new-test';");
        });
        it("should set the module specifier when using double quotes", function () {
            doTest("import test from \"./test\";", "./new-test", "import test from \"./new-test\";");
        });
        it("should set the module specifier when it's empty", function () {
            doTest("import test from \"\";", "./new-test", "import test from \"./new-test\";");
        });
        it("should set the module specifier when it's provided a source file", function () {
            var _a = testHelpers_1.getInfoFromText("import {test} from \"./other\";"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setModuleSpecifier(sourceFile.copy("newFile.ts"));
            chai_1.expect(sourceFile.getText()).to.equal("import {test} from \"./newFile\";");
        });
    });
    describe("getModuleSpecifier", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.getModuleSpecifier()).to.equal(expected);
        }
        it("should get the module specifier when using single quotes", function () {
            doTest("import * as test from './test'", "./test");
        });
        it("should get the module specifier when using double quotes", function () {
            doTest("import defaultExport, {test} from \"./test\"", "./test");
        });
        it("should get the module specifier when importing for side effects", function () {
            doTest("import \"./test\"", "./test");
        });
    });
    describe("getModuleSpecifierSourceFileOrThrow", function () {
        it("should get the source file", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import {Class} from \"./class\";");
            var classSourceFile = project.createSourceFile("class.ts", "export class Class {}");
            chai_1.expect(mainSourceFile.getImportDeclarations()[0].getModuleSpecifierSourceFileOrThrow()).to.equal(classSourceFile);
        });
        it("should throw when it doesn't exist", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import {Class} from \"./class\";");
            chai_1.expect(function () { return mainSourceFile.getImportDeclarations()[0].getModuleSpecifierSourceFileOrThrow(); }).to.throw();
        });
    });
    describe("getModuleSpecifierSourceFile", function () {
        it("should get the source file", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import {Class} from \"./class\";");
            var classSourceFile = project.createSourceFile("class.ts", "export class Class {}");
            chai_1.expect(mainSourceFile.getImportDeclarations()[0].getModuleSpecifierSourceFile()).to.equal(classSourceFile);
        });
        it("should get the source file when it's an index.ts file", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import {Class} from \"./class\";");
            var classSourceFile = project.createSourceFile("class/index.ts", "export class Class {}");
            chai_1.expect(mainSourceFile.getImportDeclarations()[0].getModuleSpecifierSourceFile()).to.equal(classSourceFile);
        });
        it("should return undefined when it doesn't exist", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "import {Class} from \"./class\";");
            chai_1.expect(mainSourceFile.getImportDeclarations()[0].getModuleSpecifierSourceFile()).to.be.undefined;
        });
    });
    describe("isModuleSpecifierRelative", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.isModuleSpecifierRelative()).to.equal(expected);
        }
        it("should be when using ./", function () {
            doTest("import * as test from './test'", true);
        });
        it("should be when using ../", function () {
            doTest("import * as test from '../test'", true);
        });
        it("should not be when using /", function () {
            doTest("import * as test from '/test'", false);
        });
        it("should not be when not", function () {
            doTest("import * as test from 'test'", false);
        });
    });
    describe("setDefaultImport", function () {
        function doTest(text, newDefaultImport, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setDefaultImport(newDefaultImport);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        it("should throw when whitespace", function () {
            var _a = testHelpers_1.getInfoFromText("import d from './file';"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            chai_1.expect(function () { return firstChild.setDefaultImport(" "); }).to.throw(errors.ArgumentNullOrWhitespaceError);
        });
        it("should rename when exists", function () {
            doTest("import identifier from './file'; const t = identifier;", "newName", "import newName from './file'; const t = newName;");
        });
        it("should set the default import when importing for side effects", function () {
            doTest("import './file';", "identifier", "import identifier from './file';");
        });
        it("should set the default import when named import exists", function () {
            doTest("import {named} from './file';", "identifier", "import identifier, {named} from './file';");
        });
        it("should set the default import when namespace import exists", function () {
            doTest("import * as name from './file';", "identifier", "import identifier, * as name from './file';");
        });
    });
    describe("getDefaultImport", function () {
        function doTest(text, expectedName) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            var defaultImport = firstChild.getDefaultImport();
            if (expectedName == null)
                chai_1.expect(defaultImport).to.be.undefined;
            else
                chai_1.expect(defaultImport.getText()).to.equal(expectedName);
        }
        it("should get the default import when it exists", function () {
            doTest("import defaultImport from \"./test\";", "defaultImport");
        });
        it("should get the default import when a named import exists as well", function () {
            doTest("import defaultImport, {name as any} from \"./test\";", "defaultImport");
        });
        it("should get the default import when a namespace import exists as well", function () {
            doTest("import defaultImport, * as name from \"./test\";", "defaultImport");
        });
        it("should not get the default import when a named import exists", function () {
            doTest("import {name as any} from \"./test\";", undefined);
        });
        it("should not get the default import when a namespace import exists", function () {
            doTest("import * as name from \"./test\";", undefined);
        });
        it("should not get the default import when importing for the side effects", function () {
            doTest("import \"./test\";", undefined);
        });
    });
    describe("setNamespaceImport", function () {
        function doTest(text, newNamespaceImport, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setNamespaceImport(newNamespaceImport);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        it("should rename when exists", function () {
            doTest("import * as identifier from './file'; const t = identifier;", "newName", "import * as newName from './file'; const t = newName;");
        });
        it("should set the namespace import when importing for side effects", function () {
            doTest("import './file';", "identifier", "import * as identifier from './file';");
        });
        it("should throw an error when a named import exists", function () {
            chai_1.expect(function () {
                var _a = testHelpers_1.getInfoFromText("import {named} from './file';"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
                firstChild.setNamespaceImport("identifier");
            }).to.throw();
        });
        it("should set the namespace import when a default import exists", function () {
            doTest("import name from './file';", "identifier", "import name, * as identifier from './file';");
        });
    });
    describe("getNamespaceImport", function () {
        function doTest(text, expectedName) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            var identifier = firstChild.getNamespaceImport();
            if (expectedName == null)
                chai_1.expect(identifier).to.be.undefined;
            else
                chai_1.expect(identifier.getText()).to.equal(expectedName);
        }
        it("should get the namespace import when it exists", function () {
            doTest("import * as name from \"./test\";", "name");
        });
        it("should get the namespace import when a default import exists as well", function () {
            doTest("import defaultImport, * as name from \"./test\";", "name");
        });
        it("should not get the default import when a default and named import exist", function () {
            doTest("import defaultImport, {name as any} from \"./test\";", undefined);
        });
        it("should not get the default import when a named import exists", function () {
            doTest("import {name as any} from \"./test\";", undefined);
        });
        it("should not get the default import when a default import exists", function () {
            doTest("import defaultImport from \"./test\";", undefined);
        });
        it("should not get the default import when importing for the side effects", function () {
            doTest("import \"./test\";", undefined);
        });
    });
    describe("getNamedImports", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            var namedImports = firstChild.getNamedImports();
            chai_1.expect(namedImports.length).to.equal(expected.length);
            for (var i = 0; i < namedImports.length; i++) {
                chai_1.expect(namedImports[i].getNameNode().getText()).to.equal(expected[i].name);
                if (expected[i].alias == null)
                    chai_1.expect(namedImports[i].getAliasIdentifier()).to.equal(undefined);
                else
                    chai_1.expect(namedImports[i].getAliasIdentifier().getText()).to.equal(expected[i].alias);
            }
        }
        it("should get the named imports", function () {
            doTest("import {name, name2, name3 as name4} from \"./test\";", [{ name: "name" }, { name: "name2" }, { name: "name3", alias: "name4" }]);
        });
        it("should get the named import when a default and named import exist", function () {
            doTest("import defaultImport, {name as any} from \"./test\";", [{ name: "name", alias: "any" }]);
        });
        it("should not get anything when only a namespace import exists", function () {
            doTest("import * as name from \"./test\";", []);
        });
        it("should not get anything when a a namespace import and a default import exists", function () {
            doTest("import defaultImport, * as name from \"./test\";", []);
        });
        it("should not get anything when a default import exists", function () {
            doTest("import defaultImport from \"./test\";", []);
        });
        it("should not get anything when importing for the side effects", function () {
            doTest("import \"./test\";", []);
        });
    });
    describe("insertNamedImports", function () {
        function doTest(text, index, structuresOrNames, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.insertNamedImports(index, structuresOrNames);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        it("should insert named imports when importing for the side effects", function () {
            doTest("import \"./test\";", 0, ["name", { name: "name", alias: "alias" }], "import {name, name as alias} from \"./test\";");
        });
        it("should insert named imports when a default import exists", function () {
            doTest("import Default from \"./test\";", 0, [{ name: "name" }, { name: "name2" }], "import Default, {name, name2} from \"./test\";");
        });
        it("should insert named imports at the start", function () {
            doTest("import {name3} from \"./test\";", 0, [{ name: "name1" }, { name: "name2" }], "import {name1, name2, name3} from \"./test\";");
        });
        it("should insert named imports at the end", function () {
            doTest("import {name1} from \"./test\";", 1, [{ name: "name2" }, { name: "name3" }], "import {name1, name2, name3} from \"./test\";");
        });
        it("should insert named imports in the middle", function () {
            doTest("import {name1, name4} from \"./test\";", 1, [{ name: "name2" }, { name: "name3" }], "import {name1, name2, name3, name4} from \"./test\";");
        });
    });
    describe("insertNamedImport", function () {
        function doTest(text, index, structureOrName, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.insertNamedImport(index, structureOrName);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        it("should insert at the specified index", function () {
            doTest("import {name1, name3} from \"./test\";", 1, { name: "name2" }, "import {name1, name2, name3} from \"./test\";");
        });
        it("should insert at the specified index as a string", function () {
            doTest("import {name1, name3} from \"./test\";", 1, "name2", "import {name1, name2, name3} from \"./test\";");
        });
    });
    describe("addNamedImport", function () {
        function doTest(text, structureOrName, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.addNamedImport(structureOrName);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        it("should add at the end", function () {
            doTest("import {name1, name2} from \"./test\";", { name: "name3" }, "import {name1, name2, name3} from \"./test\";");
        });
        it("should add at the end as a string", function () {
            doTest("import {name1, name2} from \"./test\";", "name3", "import {name1, name2, name3} from \"./test\";");
        });
    });
    describe("addNamedImports", function () {
        function doTest(text, structures, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.addNamedImports(structures);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        it("should add named imports at the end", function () {
            doTest("import {name1} from \"./test\";", [{ name: "name2" }, { name: "name3" }, "name4"], "import {name1, name2, name3, name4} from \"./test\";");
        });
    });
    describe("remove", function () {
        function doTest(text, index, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            sourceFile.getImportDeclarations()[index].remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should remove the import declaration", function () {
            doTest("import * from 'i';\nimport * from 'j';\nimport * from 'k';\n", 1, "import * from 'i';\nimport * from 'k';\n");
        });
    });
    describe("removeNamedImports", function () {
        function doTest(text, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            sourceFile.getImportDeclarations()[0].removeNamedImports();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should remove the named imports when only named imports exist", function () {
            doTest("import {Name1, Name2} from \"module-name\";", "import \"module-name\";");
        });
        it("should remove the named imports when a default import exist", function () {
            doTest("import defaultExport, {Name1, Name2} from \"module-name\";", "import defaultExport from \"module-name\";");
        });
    });
});
