"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var Project_1 = require("../../../Project");
var errors = require("../../../errors");
var testHelpers_1 = require("../testHelpers");
describe("ExportDeclaration", function () {
    describe("isNamespaceExport", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.isNamespaceExport()).to.equal(expected);
        }
        it("should be a namespace export when is one", function () {
            doTest("export * from './test'", true);
        });
        it("should not be a namespace export when is a named export", function () {
            doTest("export {name} from \"./test\"", false);
        });
    });
    describe("hasNamedExports", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.hasNamedExports()).to.equal(expected);
        }
        it("should not have any named exports when is a namespace export", function () {
            doTest("export * from './test'", false);
        });
        it("should have named exports when has one", function () {
            doTest("export {name} from \"./test\"", true);
        });
    });
    describe("setModuleSpecifier", function () {
        function doTest(text, newModuleSpecifier, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setModuleSpecifier(newModuleSpecifier);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        it("should set the module specifier when using single quotes", function () {
            doTest("export * from './test';", "./new-test", "export * from './new-test';");
        });
        it("should set the module specifier when using double quotes", function () {
            doTest("export * from \"./test\";", "./new-test", "export * from \"./new-test\";");
        });
        it("should set the module specifier when it's empty", function () {
            doTest("export * from \"\";", "./new-test", "export * from \"./new-test\";");
        });
        it("should set the module specifier when it doesn't exist", function () {
            doTest("export {test};", "./new-test", "export {test} from \"./new-test\";");
        });
        it("should set the module specifier when it doesn't exist and there's no semi-colon", function () {
            doTest("export {test}", "./new-test", "export {test} from \"./new-test\"");
        });
        it("should set the module specifier when it's provided a source file", function () {
            doTest("export {test}", "./new-test", "export {test} from \"./new-test\"");
            var _a = testHelpers_1.getInfoFromText("export {test} from \"./other\";"), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.setModuleSpecifier(sourceFile.copy("newFile.ts"));
            chai_1.expect(sourceFile.getText()).to.equal("export {test} from \"./newFile\";");
        });
    });
    describe("getModuleSpecifier", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.getModuleSpecifier()).to.equal(expected);
        }
        it("should get the module specifier when using single quotes", function () {
            doTest("export * from './test'", "./test");
        });
        it("should get the module specifier when using double quotes", function () {
            doTest("export {name} from \"./test\"", "./test");
        });
        it("should return undefined when it doesn't exist", function () {
            doTest("export {name}", undefined);
        });
    });
    describe("hasModuleSpecifier", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.hasModuleSpecifier()).to.equal(expected);
        }
        it("should have a module specifier when using single quotes", function () {
            doTest("export * from './test'", true);
        });
        it("should have a module specifier when using double quotes", function () {
            doTest("export {name} from \"./test\"", true);
        });
        it("should not have a module specifier when one doesn't exist", function () {
            doTest("export {name}", false);
        });
    });
    describe("getModuleSpecifierSourceFileOrThrow", function () {
        it("should get the source file when it exists", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "export * from \"./class\";");
            var classSourceFile = project.createSourceFile("class.ts", "export class Class {}");
            chai_1.expect(mainSourceFile.getExportDeclarations()[0].getModuleSpecifierSourceFileOrThrow()).to.equal(classSourceFile);
        });
        it("should throw when the referenced file doesn't exist", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "export * from \"./class\";");
            chai_1.expect(function () { return mainSourceFile.getExportDeclarations()[0].getModuleSpecifierSourceFileOrThrow(); }).to.throw();
        });
        it("should throw when there is no module specifier", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "export {MyClass};");
            chai_1.expect(function () { return mainSourceFile.getExportDeclarations()[0].getModuleSpecifierSourceFileOrThrow(); }).to.throw();
        });
    });
    describe("getModuleSpecifierSourceFile", function () {
        it("should get the source file when it exists", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "export * from \"./class\";");
            var classSourceFile = project.createSourceFile("class.ts", "export class Class {}");
            chai_1.expect(mainSourceFile.getExportDeclarations()[0].getModuleSpecifierSourceFile()).to.equal(classSourceFile);
        });
        it("should get the source file when it's an index.ts file", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "export * from \"./class\";");
            var classSourceFile = project.createSourceFile("class/index.ts", "export class Class {}");
            chai_1.expect(mainSourceFile.getExportDeclarations()[0].getModuleSpecifierSourceFile()).to.equal(classSourceFile);
        });
        it("should return undefined when the referenced file doesn't exist", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "export * from \"./class\";");
            chai_1.expect(mainSourceFile.getExportDeclarations()[0].getModuleSpecifierSourceFile()).to.be.undefined;
        });
        it("should return undefined when there is no module specifier", function () {
            var project = new Project_1.Project({ useVirtualFileSystem: true });
            var mainSourceFile = project.createSourceFile("main.ts", "export {MyClass};");
            chai_1.expect(mainSourceFile.getExportDeclarations()[0].getModuleSpecifierSourceFile()).to.be.undefined;
        });
    });
    describe("isModuleSpecifierRelative", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            chai_1.expect(firstChild.isModuleSpecifierRelative()).to.equal(expected);
        }
        it("should be when using ./", function () {
            doTest("export * from './test'", true);
        });
        it("should be when using ../", function () {
            doTest("export * from '../test'", true);
        });
        it("should not be when using /", function () {
            doTest("export * from '/test'", false);
        });
        it("should not be when not", function () {
            doTest("export * from 'test'", false);
        });
        it("should not be when not existing", function () {
            doTest("export {test}", false);
        });
    });
    describe("getNamedExports", function () {
        function doTest(text, expected) {
            var firstChild = testHelpers_1.getInfoFromText(text).firstChild;
            var namedExports = firstChild.getNamedExports();
            chai_1.expect(namedExports.length).to.equal(expected.length);
            for (var i = 0; i < namedExports.length; i++) {
                chai_1.expect(namedExports[i].getNameNode().getText()).to.equal(expected[i].name);
                if (expected[i].alias == null)
                    chai_1.expect(namedExports[i].getAliasIdentifier()).to.equal(undefined);
                else
                    chai_1.expect(namedExports[i].getAliasIdentifier().getText()).to.equal(expected[i].alias);
            }
        }
        it("should get the named exports", function () {
            doTest("export {name, name2, name3 as name4} from \"./test\";", [{ name: "name" }, { name: "name2" }, { name: "name3", alias: "name4" }]);
        });
        it("should not get anything when only a namespace export exists", function () {
            doTest("export * from \"./test\";", []);
        });
    });
    describe("insertNamedExports", function () {
        function doTest(text, index, structures, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.insertNamedExports(index, structures);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        it("should insert named exports when doing a namespace export", function () {
            doTest("export * from \"./test\";", 0, [{ name: "name", alias: "alias" }], "export {name as alias} from \"./test\";");
        });
        it("should insert named exports at the start", function () {
            doTest("export {name3} from \"./test\";", 0, [{ name: "name1" }, "name2"], "export {name1, name2, name3} from \"./test\";");
        });
        it("should insert named exports at the end", function () {
            doTest("export {name1} from \"./test\";", 1, ["name2", { name: "name3" }], "export {name1, name2, name3} from \"./test\";");
        });
        it("should insert named exports in the middle", function () {
            doTest("export {name1, name4} from \"./test\";", 1, [{ name: "name2" }, { name: "name3" }], "export {name1, name2, name3, name4} from \"./test\";");
        });
    });
    describe("insertNamedExport", function () {
        function doTest(text, index, structureOrName, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.insertNamedExport(index, structureOrName);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        it("should insert at the specified index", function () {
            doTest("export {name1, name3} from \"./test\";", 1, { name: "name2" }, "export {name1, name2, name3} from \"./test\";");
        });
        it("should insert at the specified index as a string", function () {
            doTest("export {name1, name3} from \"./test\";", 1, "name2", "export {name1, name2, name3} from \"./test\";");
        });
    });
    describe("addNamedExport", function () {
        function doTest(text, structureOrName, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.addNamedExport(structureOrName);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        it("should add at the end", function () {
            doTest("export {name1, name2} from \"./test\";", { name: "name3" }, "export {name1, name2, name3} from \"./test\";");
        });
        it("should add at the end as a string", function () {
            doTest("export {name1, name2} from \"./test\";", "name3", "export {name1, name2, name3} from \"./test\";");
        });
    });
    describe("addNamedExports", function () {
        function doTest(text, structures, expected) {
            var _a = testHelpers_1.getInfoFromText(text), firstChild = _a.firstChild, sourceFile = _a.sourceFile;
            firstChild.addNamedExports(structures);
            chai_1.expect(sourceFile.getText()).to.equal(expected);
        }
        it("should add named exports at the end", function () {
            doTest("export {name1} from \"./test\";", [{ name: "name2" }, "name3"], "export {name1, name2, name3} from \"./test\";");
        });
    });
    describe("remove", function () {
        function doTest(text, index, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            sourceFile.getExportDeclarations()[index].remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should remove the export declaration", function () {
            doTest("export * from 'i';\nexport * from 'j';\nexport * from 'k';\n", 1, "export * from 'i';\nexport * from 'k';\n");
        });
    });
    describe("toNamespaceExport", function () {
        function doTest(text, expectedText) {
            var _a = testHelpers_1.getInfoFromText(text), sourceFile = _a.sourceFile, firstChild = _a.firstChild;
            firstChild.toNamespaceExport();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should throw when no module specifier exists", function () {
            var _a = testHelpers_1.getInfoFromText("export {name};"), sourceFile = _a.sourceFile, firstChild = _a.firstChild;
            chai_1.expect(function () { return firstChild.toNamespaceExport(); }).to.throw(errors.InvalidOperationError);
        });
        it("should change to a namespace import when there's only one to remove", function () {
            doTest("export {name} from \"./test\";", "export * from \"./test\";");
        });
        it("should change to a namespace import when there's multiple to remove", function () {
            doTest("export {name, name2, name3, name4} from \"./test\";", "export * from \"./test\";");
        });
    });
});
