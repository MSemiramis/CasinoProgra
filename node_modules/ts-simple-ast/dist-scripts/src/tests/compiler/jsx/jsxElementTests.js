"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
function getInfo(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.JsxElement, { isJsx: true });
}
describe("JsxElement", function () {
    describe("getOpeningElement", function () {
        function doTest(text, expected) {
            var descendant = getInfo(text).descendant;
            chai_1.expect(descendant.getOpeningElement().getText()).to.equal(expected);
        }
        it("should get the opening element", function () {
            doTest("var t = (<jsx></jsx>);", "<jsx>");
        });
    });
    describe("getClosingElement", function () {
        function doTest(text, expected) {
            var descendant = getInfo(text).descendant;
            chai_1.expect(descendant.getClosingElement().getText()).to.equal(expected);
        }
        it("should get the closing element", function () {
            doTest("var t = (<jsx></jsx>);", "</jsx>");
        });
    });
    describe("getJsxChildren", function () {
        function doTest(text, expected) {
            var descendant = getInfo(text).descendant;
            chai_1.expect(descendant.getJsxChildren().map(function (c) { return c.getText(); })).to.deep.equal(expected);
        }
        it("should get the children", function () {
            doTest("var t = (<jsx>\n    <Child1 />\n    <Child2 />\n</jsx>);", ["", "<Child1 />", "", "<Child2 />", ""]);
        });
    });
    describe("setBodyText", function () {
        function doTest(text, bodyText, expected) {
            var _a = getInfo(text), descendant = _a.descendant, sourceFile = _a.sourceFile;
            descendant.setBodyText(bodyText);
            chai_1.expect(sourceFile.getFullText()).to.equal(expected);
        }
        it("should set the body text", function () {
            doTest("var t = (<jsx></jsx>);", "<element />", "var t = (<jsx>\n    <element />\n</jsx>);");
        });
        it("should set the body text when currently on multiple lines", function () {
            doTest("var t = (\n    <jsx>\n    </jsx>);", "<element />", "var t = (\n    <jsx>\n        <element />\n    </jsx>);");
        });
        it("should set the body text when specifying multiple lines", function () {
            doTest("var t = (<jsx></jsx>);", "<element>\n</element>", "var t = (<jsx>\n    <element>\n    </element>\n</jsx>);");
        });
        it("should set the body text when specifying multiple lines and other elements exist", function () {
            doTest("var t = (<jsx>   <Element> </Element>   </jsx>);", "<element>\n</element>", "var t = (<jsx>\n    <element>\n    </element>\n</jsx>);");
        });
    });
    describe("setBodyTextInline", function () {
        function doTest(text, bodyText, expected) {
            var _a = getInfo(text), descendant = _a.descendant, sourceFile = _a.sourceFile;
            descendant.setBodyTextInline(bodyText);
            chai_1.expect(sourceFile.getFullText()).to.equal(expected);
        }
        it("should set the body text inline", function () {
            doTest("var t = (<jsx></jsx>);", "<element />", "var t = (<jsx><element /></jsx>);");
        });
        it("should set the body text inline when other elements exist", function () {
            doTest("var t = (<jsx><element2 /></jsx>);", "<element />", "var t = (<jsx><element /></jsx>);");
        });
        it("should indent if writing a new line", function () {
            doTest("var t = (<jsx></jsx>);", "<element>\n</element>", "var t = (<jsx><element>\n    </element></jsx>);");
        });
        it("should indent if ending with a new line", function () {
            doTest("var t = (<jsx></jsx>);", "<element>\n</element>\n", "var t = (<jsx><element>\n    </element>\n</jsx>);");
        });
    });
});
