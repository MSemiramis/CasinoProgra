"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
function getInfo(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.JsxExpression, { isJsx: true });
}
describe("JsxExpression", function () {
    describe("getExpression", function () {
        function doTest(text, expected) {
            var descendant = getInfo(text).descendant;
            if (expected == null)
                chai_1.expect(descendant.getExpression()).to.be.undefined;
            else
                chai_1.expect(descendant.getExpression().getText()).to.equal(expected);
        }
        it("should get the expression", function () {
            doTest("var t = (<jsx>{test}</jsx>);", "test");
        });
        it("should return undefined when it doesn't exist", function () {
            doTest("var t = (<jsx>{}</jsx>);", undefined);
        });
    });
    describe("getExpressionOrThrow", function () {
        function doTest(text, expected) {
            var descendant = getInfo(text).descendant;
            if (expected == null)
                chai_1.expect(function () { return descendant.getExpressionOrThrow(); }).to.throw();
            else
                chai_1.expect(descendant.getExpressionOrThrow().getText()).to.equal(expected);
        }
        it("should get the expression", function () {
            doTest("var t = (<jsx>{test}</jsx>);", "test");
        });
        it("should throw when it doesn't exist", function () {
            doTest("var t = (<jsx>{}</jsx>);", undefined);
        });
    });
    describe("getDotDotDotToken", function () {
        function doTest(text, expected) {
            var descendant = getInfo(text).descendant;
            if (expected == null)
                chai_1.expect(descendant.getDotDotDotToken()).to.be.undefined;
            else
                chai_1.expect(descendant.getDotDotDotToken().getText()).to.equal(expected);
        }
        it("should get the dot dot dot token", function () {
            doTest("var t = (<jsx>{...test}</jsx>);", "...");
        });
        it("should return undefined when it doesn't exist", function () {
            doTest("var t = (<jsx>{test}</jsx>);", undefined);
        });
    });
    describe("getDotDotDotTokenOrThrow", function () {
        function doTest(text, expected) {
            var descendant = getInfo(text).descendant;
            if (expected == null)
                chai_1.expect(function () { return descendant.getDotDotDotTokenOrThrow(); }).to.throw();
            else
                chai_1.expect(descendant.getDotDotDotTokenOrThrow().getText()).to.equal(expected);
        }
        it("should get the dot dot dot token", function () {
            doTest("var t = (<jsx>{...test}</jsx>);", "...");
        });
        it("should throw when it doesn't exist", function () {
            doTest("var t = (<jsx>{test}</jsx>);", undefined);
        });
    });
});
