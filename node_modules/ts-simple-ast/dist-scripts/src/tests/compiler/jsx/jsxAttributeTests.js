"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../typescript");
var testHelpers_1 = require("../testHelpers");
function getInfo(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.JsxAttribute, { isJsx: true });
}
function getInfoForSelfClosingElement(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.JsxSelfClosingElement, { isJsx: true });
}
describe("JsxAttribute", function () {
    describe("getName", function () {
        function doTest(text, expected) {
            var descendant = getInfo(text).descendant;
            chai_1.expect(descendant.getName()).to.equal(expected);
        }
        it("should get the name", function () {
            doTest("var t = (<jsx attribute=\"4\" />);", "attribute");
        });
    });
    describe("rename", function () {
        function doTest(text, newName, expected) {
            var _a = getInfo(text), descendant = _a.descendant, sourceFile = _a.sourceFile;
            descendant.rename(newName);
            chai_1.expect(sourceFile.getFullText()).to.equal(expected);
        }
        it("should get the name", function () {
            doTest("var t = (<jsx attribute=\"4\" />);", "newName", "var t = (<jsx newName=\"4\" />);");
        });
    });
    describe("getInitializer", function () {
        function doTest(text, expected) {
            var descendant = getInfo(text).descendant;
            var initializer = descendant.getInitializer();
            if (expected == null)
                chai_1.expect(initializer).to.be.undefined;
            else {
                chai_1.expect(initializer).to.not.be.undefined;
                chai_1.expect(initializer.getText()).to.equal(expected);
            }
        }
        it("should get the initializer when it exists and is a string literal", function () {
            doTest("var t = (<jsx attribute=\"4\" />);", "\"4\"");
        });
        it("should get the initializer when it exists and is an expression", function () {
            doTest("var t = (<jsx attribute={4} />);", "{4}");
        });
        it("should return undefined when the initializer does not exists", function () {
            doTest("var t = (<jsx attribute />);", undefined);
        });
    });
    describe("getInitializerOrThrow", function () {
        function doTest(text, expected) {
            var descendant = getInfo(text).descendant;
            if (expected == null)
                chai_1.expect(function () { return descendant.getInitializerOrThrow(); }).to.throw();
            else
                chai_1.expect(descendant.getInitializerOrThrow().getText()).to.equal(expected);
        }
        it("should get the initializer when it exists", function () {
            doTest("var t = (<jsx attribute=\"4\" />);", "\"4\"");
        });
        it("should throw when the initializer does not exists", function () {
            doTest("var t = (<jsx attribute />);", undefined);
        });
    });
    describe("remove", function () {
        function doTest(text, index, expected) {
            var _a = getInfoForSelfClosingElement(text), descendant = _a.descendant, sourceFile = _a.sourceFile;
            descendant.getAttributes()[index].remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expected);
        }
        it("should remove the only attribute", function () {
            doTest("var t = (<jsx attribute=\"4\" />);", 0, "var t = (<jsx />);");
        });
        it("should remove the attribute at the start", function () {
            doTest("var t = (<jsx attribute=\"4\" a2 />);", 0, "var t = (<jsx a2 />);");
        });
        it("should remove the attribute in the middle", function () {
            doTest("var t = (<jsx a1 a2 a3 />);", 1, "var t = (<jsx a1 a3 />);");
        });
        it("should remove the attribute at the end", function () {
            doTest("var t = (<jsx a1 a2 />);", 1, "var t = (<jsx a1 />);");
        });
        it("should remove the attribute at the end when on a new line", function () {
            doTest("var t = (<jsx a1\n    a2 />);", 1, "var t = (<jsx a1 />);");
        });
    });
});
