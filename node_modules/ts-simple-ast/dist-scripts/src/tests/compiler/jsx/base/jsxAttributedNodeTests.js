"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var typescript_1 = require("../../../../typescript");
var testHelpers_1 = require("../../testHelpers");
function getInfo(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.JsxOpeningElement, { isJsx: true });
}
function getInfoFromSelfClosing(text) {
    return testHelpers_1.getInfoFromTextWithDescendant(text, typescript_1.SyntaxKind.JsxSelfClosingElement, { isJsx: true });
}
describe("JsxAttributedNode", function () {
    describe("getAttributes", function () {
        function doTest(text, expected) {
            var descendant = getInfo(text).descendant;
            chai_1.expect(descendant.getAttributes().map(function (c) { return c.getText(); })).to.deep.equal(expected);
        }
        it("should get the attributes", function () {
            doTest("var t = (<jsx attrib1 attrib2={5} {...attribs}></jsx>);", ["attrib1", "attrib2={5}", "{...attribs}"]);
        });
    });
    describe("getAttribute", function () {
        function doNameTest(text, name, expected) {
            var descendant = getInfo(text).descendant;
            var attrib = descendant.getAttribute(name);
            if (expected == null)
                chai_1.expect(attrib).to.be.undefined;
            else
                chai_1.expect(attrib.getText()).to.equal(expected);
        }
        it("should get the correct attribute", function () {
            doNameTest("var t = (<jsx attrib1 attrib2={5} {...attribs} attrib3={7}></jsx>);", "attrib3", "attrib3={7}");
        });
        it("should return undefined when not found", function () {
            doNameTest("var t = (<jsx attrib1 attrib2={5} {...attribs} attrib3={7}></jsx>);", "attrib4", undefined);
        });
        function doFindFunctionTest(text, findFunc, expected) {
            var descendant = getInfo(text).descendant;
            var attrib = descendant.getAttribute(findFunc);
            if (expected == null)
                chai_1.expect(attrib).to.be.undefined;
            else
                chai_1.expect(attrib.getText()).to.equal(expected);
        }
        it("should get the correct attribute using a find function", function () {
            doFindFunctionTest("var t = (<jsx attrib1 attrib2={5} {...attribs} attrib3={7}></jsx>);", function (attrib) { return attrib.getText() === "attrib1"; }, "attrib1");
        });
        it("should be undefined when can't find using a find function", function () {
            doFindFunctionTest("var t = (<jsx attrib1 attrib2={5} {...attribs} attrib3={7}></jsx>);", function (attrib) { return false; }, undefined);
        });
    });
    describe("getAttributeOrThrow", function () {
        function doNameTest(text, name, expected) {
            var descendant = getInfo(text).descendant;
            if (expected == null)
                chai_1.expect(function () { return descendant.getAttributeOrThrow(name); }).to.throw();
            else
                chai_1.expect(descendant.getAttributeOrThrow(name).getText()).to.equal(expected);
        }
        it("should get the correct attribute", function () {
            doNameTest("var t = (<jsx attrib1 attrib2={5} {...attribs} attrib3={7}></jsx>);", "attrib3", "attrib3={7}");
        });
        it("should return undefined when not found", function () {
            doNameTest("var t = (<jsx attrib1 attrib2={5} {...attribs} attrib3={7}></jsx>);", "attrib4", undefined);
        });
    });
    describe("insertAttributes", function () {
        describe("element", function () {
            function doTest(text, index, structures, expected) {
                var descendant = getInfo(text).descendant;
                chai_1.expect(descendant.insertAttributes(index, structures).length).to.equal(structures.length);
                chai_1.expect(descendant.getFullText()).to.equal(expected);
            }
            it("should do nothing when providing an empty array", function () {
                doTest("var t = (<jsx></jsx>);", 0, [], "<jsx>");
            });
            it("should insert the attributes when none exists", function () {
                doTest("var t = (<jsx></jsx>);", 0, [{ name: "attrib" }], "<jsx attrib>");
            });
            it("should insert the attributes in the middle", function () {
                doTest("var t = (<jsx attrib attrib5={2}></jsx>);", 1, [{ name: "attrib2" }, { name: "attrib3", initializer: "{3}" }, { name: "attrib4", isSpreadAttribute: true }], "<jsx attrib attrib2 attrib3={3} ...attrib4 attrib5={2}>");
            });
            it("should insert the attributes at the end", function () {
                doTest("var t = (<jsx attrib></jsx>);", 1, [{ name: "attrib2" }], "<jsx attrib attrib2>");
            });
        });
        describe("self closing", function () {
            function doTest(text, index, structures, expected) {
                var descendant = getInfoFromSelfClosing(text).descendant;
                chai_1.expect(descendant.insertAttributes(index, structures).length).to.equal(structures.length);
                chai_1.expect(descendant.getFullText()).to.equal(expected);
            }
            it("should insert the attributes when none exists", function () {
                doTest("var t = (<jsx />);", 0, [{ name: "attrib" }], "<jsx attrib />");
            });
            it("should insert the attributes at the end", function () {
                doTest("var t = (<jsx attrib />);", 1, [{ name: "attrib2" }], "<jsx attrib attrib2 />");
            });
        });
    });
    describe("insertAttribute", function () {
        function doTest(text, index, structure, expected) {
            var descendant = getInfo(text).descendant;
            descendant.insertAttribute(index, structure);
            chai_1.expect(descendant.getFullText()).to.equal(expected);
        }
        it("should insert the attribute", function () {
            doTest("var t = (<jsx attrib></jsx>);", 1, { name: "attrib1" }, "<jsx attrib attrib1>");
        });
    });
    describe("addAttributes", function () {
        function doTest(text, structures, expected) {
            var descendant = getInfo(text).descendant;
            chai_1.expect(descendant.addAttributes(structures).length).to.equal(structures.length);
            chai_1.expect(descendant.getFullText()).to.equal(expected);
        }
        it("should add the attributes", function () {
            doTest("var t = (<jsx a1></jsx>);", [{ name: "a2" }, { name: "a3" }], "<jsx a1 a2 a3>");
        });
    });
    describe("addAttribute", function () {
        function doTest(text, structure, expected) {
            var descendant = getInfo(text).descendant;
            descendant.addAttribute(structure);
            chai_1.expect(descendant.getFullText()).to.equal(expected);
        }
        it("should add the attributes", function () {
            doTest("var t = (<jsx a1></jsx>);", { name: "a2" }, "<jsx a1 a2>");
        });
    });
});
