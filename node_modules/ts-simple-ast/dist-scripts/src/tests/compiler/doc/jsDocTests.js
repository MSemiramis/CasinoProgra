"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testHelpers_1 = require("../testHelpers");
describe("JSDoc", function () {
    describe("remove", function () {
        function doTest(text, index, jsDocIndex, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            sourceFile.getFunctions()[index].getJsDocs()[jsDocIndex].remove();
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should remove the js doc", function () {
            doTest("enum I {}\n\n/** Test */\nfunction func() {}", 0, 0, "enum I {}\n\nfunction func() {}");
        });
        it("should remove the js doc when first", function () {
            doTest("enum I {}\n\n/** first */\n/** second */\nfunction func() {}", 0, 0, "enum I {}\n\n/** second */\nfunction func() {}");
        });
        it("should remove the js doc when in the middle", function () {
            doTest("enum I {}\n\n/** first */\n/** second */\n/** third */\nfunction func() {}", 0, 1, "enum I {}\n\n/** first */\n/** third */\nfunction func() {}");
        });
        it("should remove the js doc when last", function () {
            doTest("enum I {}\n\n/** first */\n/** second */\nfunction func() {}", 0, 1, "enum I {}\n\n/** first */\nfunction func() {}");
        });
    });
    describe("getComment", function () {
        function doTest(text, expectedComment) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            var comment = sourceFile.getFunctions()[0].getJsDocs()[0].getComment();
            chai_1.expect(comment).to.equal(expectedComment);
        }
        it("should get the comment when it exists", function () {
            doTest("/**\n * Description\n */function identifier() {}", "Description");
        });
        it("should be undefined when it doesn't exist", function () {
            doTest("/**\n *\n */function identifier() {}", undefined);
        });
    });
    describe("setComment", function () {
        function doTest(text, comment, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            sourceFile.getFunctions()[0].getJsDocs()[0].setComment(comment);
            chai_1.expect(sourceFile.getFullText()).to.equal(expectedText);
        }
        it("should set a new comment with one line", function () {
            doTest("/**\n * Description\n */function identifier() {}", "New Text", "/**\n * New Text\n */function identifier() {}");
        });
        it("should set a new comment with multiple lines", function () {
            doTest("/**\n * Description\n */function identifier() {}", "One\nTwo\r\nThree", "/**\n * One\n * Two\n * Three\n */function identifier() {}");
        });
        it("should set a new comment when originally all on the same line", function () {
            doTest("/** Description */function identifier() {}", "New", "/**\n * New\n */function identifier() {}");
        });
        it("should set a new comment without affecting the tags", function () {
            doTest("/**\n * Description\n * @param - Something */function identifier() {}", "New", "/**\n * New\n * @param - Something */function identifier() {}");
        });
        it("should set a new comment without affecting the tags when the first tag has some space before it", function () {
            doTest("/**\n * Description\n *   @param - Something */function identifier() {}", "New", "/**\n * New\n *   @param - Something */function identifier() {}");
        });
    });
    describe("getTags", function () {
        function doTest(text, expectedTags) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            var tags = sourceFile.getFunctions()[0].getJsDocs()[0].getTags();
            chai_1.expect(tags.map(function (t) { return t.getText(); })).to.deep.equal(expectedTags);
        }
        it("should return an empty array when no tags exist", function () {
            doTest("/**\n * Description\n */function identifier() {}", []);
        });
        it("should return the tags when they exist", function () {
            doTest("/**\n * Description\n * @param test - Test\n * @returns A value\n */function identifier() {}", ["@param test ", "@returns "]);
        });
    });
    describe("getInnerText", function () {
        function doTest(text, expectedText) {
            var sourceFile = testHelpers_1.getInfoFromText(text).sourceFile;
            var innerText = sourceFile.getFunctions()[0].getJsDocs()[0].getInnerText();
            chai_1.expect(innerText).to.deep.equal(expectedText);
        }
        it("should return the correct inner text when on one line", function () {
            doTest("/** Description */function identifier() {}", "Description");
        });
        it("should return the correct inner text when there's no space", function () {
            doTest("/**Description*/function identifier() {}", "Description");
        });
        it("should return the correct inner text when on multiple lines", function () {
            doTest("/**\n * Description\n */function identifier() {}", "Description");
        });
        it("should return the correct inner text on multiple lines when there's no space", function () {
            doTest("/**\n *Description\n */function identifier() {}", "Description");
        });
        it("should return the correct inner text on multiple lines when there's indentation", function () {
            doTest("/**\n *     Description\n */function identifier() {}", "    Description");
        });
        it("should return the correct inner text on multiple lines when there's no star", function () {
            doTest("/**\nDescription\n */function identifier() {}", "Description");
        });
        it("should return the correct inner text with tags", function () {
            doTest("/**\n * Description\n * @param - Test\n */function identifier() {}", "Description\n@param - Test");
        });
        it("should return the correct inner text when using slash r slash n", function () {
            doTest("/**\r\n * Description\r\n * @param - Test\r\n */function identifier() {}", "Description\r\n@param - Test");
        });
    });
});
