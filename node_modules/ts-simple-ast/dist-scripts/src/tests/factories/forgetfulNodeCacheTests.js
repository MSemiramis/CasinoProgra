"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = require("../../typescript");
var chai_1 = require("chai");
var testHelpers_1 = require("../compiler/testHelpers");
var ForgetfulNodeCache_1 = require("../../factories/ForgetfulNodeCache");
describe("ForgetfulNodeCache", function () {
    it("should forget nodes created after a forget point", function () {
        var firstChild = testHelpers_1.getInfoFromText("class MyClass { prop: string; }").firstChild;
        var cache = new ForgetfulNodeCache_1.ForgetfulNodeCache();
        cache.getOrCreate(firstChild.compilerNode, function () { return firstChild; });
        cache.setForgetPoint();
        var classKeyword = firstChild.getFirstChildByKindOrThrow(typescript_1.SyntaxKind.ClassKeyword);
        cache.getOrCreate(classKeyword.compilerNode, function () { return classKeyword; });
        cache.setForgetPoint();
        var openBraceToken = firstChild.getFirstChildByKindOrThrow(typescript_1.SyntaxKind.OpenBraceToken);
        cache.getOrCreate(openBraceToken.compilerNode, function () { return openBraceToken; });
        cache.forgetLastPoint();
        chai_1.expect(openBraceToken.wasForgotten()).to.be.true;
        chai_1.expect(classKeyword.wasForgotten()).to.be.false;
        chai_1.expect(firstChild.wasForgotten()).to.be.false;
        cache.setForgetPoint();
        var closeBraceToken = firstChild.getFirstChildByKindOrThrow(typescript_1.SyntaxKind.CloseBraceToken);
        cache.getOrCreate(closeBraceToken.compilerNode, function () { return closeBraceToken; });
        cache.forgetLastPoint();
        chai_1.expect(closeBraceToken.wasForgotten()).to.be.true;
        chai_1.expect(firstChild.wasForgotten()).to.be.false;
        var syntaxList = firstChild.getChildSyntaxListOrThrow();
        var property = syntaxList.getChildren()[0];
        cache.rememberNode(property);
        cache.forgetLastPoint();
        chai_1.expect(openBraceToken.wasForgotten()).to.be.true;
        chai_1.expect(closeBraceToken.wasForgotten()).to.be.true;
        chai_1.expect(classKeyword.wasForgotten()).to.be.true;
        chai_1.expect(property.wasForgotten()).to.be.false; // it was remembered
        chai_1.expect(syntaxList.wasForgotten()).to.be.false; // it should remember the parents
        chai_1.expect(firstChild.wasForgotten()).to.be.false;
    });
});
