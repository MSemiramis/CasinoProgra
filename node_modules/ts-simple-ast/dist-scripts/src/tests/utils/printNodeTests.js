"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var utils_1 = require("../../utils");
var typescript_1 = require("../../typescript");
var testHelpers_1 = require("../compiler/testHelpers");
describe("printNode", function () {
    var nodeText = "class MyClass {\n    // comment\n    prop: string;\n}";
    var nodeTextNoComment = nodeText.replace("    // comment\n", "");
    var _a = testHelpers_1.getInfoFromText(nodeText), sourceFile = _a.sourceFile, firstChild = _a.firstChild;
    var tsSourceFile = typescript_1.ts.createSourceFile("file.tsx", nodeText, typescript_1.ScriptTarget.Latest, false, typescript_1.ScriptKind.TSX);
    var tsClass = tsSourceFile.getChildren(tsSourceFile)[0].getChildren(tsSourceFile)[0];
    it("should print the node when specifying a compiler node and options", function () {
        chai_1.expect(utils_1.printNode(tsClass, { newLineKind: typescript_1.NewLineKind.CarriageReturnLineFeed })).to.equal(nodeTextNoComment.replace(/\n/g, "\r\n"));
    });
    it("should print with comments when specifying a source file", function () {
        chai_1.expect(utils_1.printNode(tsSourceFile)).to.equal(nodeText + "\n");
    });
    it("should print the node when specifying a compiler node and source file", function () {
        chai_1.expect(utils_1.printNode(tsClass, tsSourceFile)).to.equal(nodeText);
    });
    it("should print the node when specifying a compiler node, source file, and options", function () {
        chai_1.expect(utils_1.printNode(tsClass, tsSourceFile, { newLineKind: typescript_1.NewLineKind.CarriageReturnLineFeed })).to.equal(nodeText.replace(/\n/g, "\r\n"));
    });
    it("should print the node when specifying a compiler node and source file", function () {
        chai_1.expect(utils_1.printNode(tsClass)).to.equal(nodeTextNoComment);
    });
    it("general compiler api test", function () {
        // https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API
        var tsFunctionDeclaration = typescript_1.ts.createFunctionDeclaration(
        /*decorators*/ undefined, 
        /*modifiers*/ [typescript_1.ts.createToken(typescript_1.SyntaxKind.ExportKeyword)], 
        /*asteriskToken*/ undefined, "myFunction", 
        /*typeParameters*/ undefined, 
        /*parameters*/ [], 
        /*returnType*/ typescript_1.ts.createKeywordTypeNode(typescript_1.SyntaxKind.NumberKeyword), typescript_1.ts.createBlock([typescript_1.ts.createReturn(typescript_1.ts.createLiteral(5))], /*multiline*/ true));
        chai_1.expect(utils_1.printNode(tsFunctionDeclaration)).to.equal("export function myFunction(): number {\n    return 5;\n}");
    });
    it("should print the node when printing a jsx file", function () {
        var node = typescript_1.ts.createJsxOpeningElement(typescript_1.ts.createIdentifier("Test"), typescript_1.ts.createJsxAttributes([]));
        chai_1.expect(utils_1.printNode(node, { scriptKind: typescript_1.ScriptKind.TSX })).to.equal("<Test>");
    });
    it("should print the node when printing a non-jsx file", function () {
        var node = typescript_1.ts.createTypeAssertion(typescript_1.ts.createKeywordTypeNode(typescript_1.SyntaxKind.StringKeyword), typescript_1.ts.createIdentifier("test"));
        chai_1.expect(utils_1.printNode(node, { scriptKind: typescript_1.ScriptKind.TS })).to.equal("<string>test");
    });
});
