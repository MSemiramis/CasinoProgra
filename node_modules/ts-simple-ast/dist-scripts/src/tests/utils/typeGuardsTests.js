"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var utils_1 = require("../../utils");
var testHelpers_1 = require("../compiler/testHelpers");
describe("TypeGuards", function () {
    // most of the code in TypeGuards is not worth the effort to test... it's auto generated from code so it should be close to correct
    describe("hasExpression", function () {
        it("should have an expression when it's a function call", function () {
            var firstChild = testHelpers_1.getInfoFromText("funcCall()").firstChild;
            chai_1.expect(utils_1.TypeGuards.hasExpression(firstChild)).to.be.true;
            if (utils_1.TypeGuards.hasExpression(firstChild))
                chai_1.expect(firstChild.getExpression().getText()).to.equal("funcCall()");
        });
        it("should not have an expression when it doesn't", function () {
            var firstChild = testHelpers_1.getInfoFromText("class Test {}").firstChild;
            chai_1.expect(utils_1.TypeGuards.hasExpression(firstChild)).to.be.false;
        });
        it("should have an expression when it's a return statement with a value", function () {
            var firstChild = testHelpers_1.getInfoFromText("return 5;").firstChild;
            chai_1.expect(utils_1.TypeGuards.hasExpression(firstChild)).to.be.true;
            if (utils_1.TypeGuards.hasExpression(firstChild))
                chai_1.expect(firstChild.getExpression().getText()).to.equal("5");
        });
        it("should not have an expression when it's a return statement without a value", function () {
            var firstChild = testHelpers_1.getInfoFromText("return;").firstChild;
            chai_1.expect(utils_1.TypeGuards.hasExpression(firstChild)).to.be.false;
        });
    });
    describe("hasName", function () {
        it("should have a name when it does", function () {
            var firstChild = testHelpers_1.getInfoFromText("class MyClass {}").firstChild;
            chai_1.expect(utils_1.TypeGuards.hasName(firstChild)).to.be.true;
            if (utils_1.TypeGuards.hasName(firstChild))
                chai_1.expect(firstChild.getName()).to.equal("MyClass");
        });
        it("should not have a name when it doesn't", function () {
            var firstChild = testHelpers_1.getInfoFromText("func()").firstChild;
            chai_1.expect(utils_1.TypeGuards.hasName(firstChild)).to.be.false;
        });
    });
});
