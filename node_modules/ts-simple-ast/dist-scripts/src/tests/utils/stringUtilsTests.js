"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var errors = require("../../errors");
var utils_1 = require("../../utils");
describe("StringUtils", function () {
    describe("getLineNumberFromPos", function () {
        it("should throw if providing a negative pos", function () {
            chai_1.expect(function () { return utils_1.StringUtils.getLineNumberFromPos("", -1); }).to.throw(errors.ArgumentOutOfRangeError);
        });
        it("should not throw if providing a pos the length of the string", function () {
            chai_1.expect(function () { return utils_1.StringUtils.getLineNumberFromPos("", 1); }).to.not.throw();
        });
        it("should throw if providing a pos greater than the length + 1", function () {
            chai_1.expect(function () { return utils_1.StringUtils.getLineNumberFromPos("", 2); }).to.throw(errors.ArgumentOutOfRangeError);
        });
        function doTest(newLineType) {
            var str = "testing" + newLineType + "this" + newLineType + "out";
            var pos = str.length;
            str += newLineType + "more and more" + newLineType + "and more";
            chai_1.expect(utils_1.StringUtils.getLineNumberFromPos(str, pos)).to.equal(3);
        }
        it("should get the line position for the specified pos when using \r newlines", function () {
            doTest("\r");
        });
        it("should get the line position for the specified pos when using \n newlines", function () {
            doTest("\n");
        });
        it("should get the line position for the specified pos when using \r\n newlines", function () {
            doTest("\r\n");
        });
        it("should get the line position for the specified pos when right after the newline when mixing newlines", function () {
            var str = "testing\r\nthis\nout\rmore\r\nandmore\n";
            var pos = str.length;
            str += "out\r\nmore and more";
            chai_1.expect(utils_1.StringUtils.getLineNumberFromPos(str, pos)).to.equal(6);
        });
    });
    describe("escapeChar", function () {
        function doTest(input, char, expected) {
            chai_1.expect(utils_1.StringUtils.escapeChar(input, char)).to.equal(expected);
        }
        it("should throw when specifying a char length > 1", function () {
            chai_1.expect(function () { return utils_1.StringUtils.escapeChar("", "ab"); }).to.throw();
        });
        it("should throw when specifying a char length < 1", function () {
            chai_1.expect(function () { return utils_1.StringUtils.escapeChar("", ""); }).to.throw();
        });
        it("should escape the single quotes when specified", function () {
            doTest("'testing \"this\" out'", "'", "\\'testing \"this\" out\\'");
        });
        it("should escape regardless of if the character is already escaped", function () {
            doTest("\"testing \\\"this\\\" out\"", "\"", "\\\"testing \\\\\"this\\\\\" out\\\"");
        });
    });
});
describe("Es5StringUtils", function () {
    describe("startsWith", function () {
        function doTest(str, startsWith, expected) {
            chai_1.expect(utils_1.Es5StringUtils.startsWith(str, startsWith)).to.equal(expected);
        }
        it("should be true when it does", function () {
            doTest("testing", "test", true);
        });
        it("should be false when it doesn't", function () {
            doTest("testing", "test2", false);
        });
    });
    describe("endsWith", function () {
        function doTest(str, endsWith, expected) {
            chai_1.expect(utils_1.Es5StringUtils.endsWith(str, endsWith)).to.equal(expected);
        }
        it("should be true when it does", function () {
            doTest("testing", "ing", true);
        });
        it("should be false when it doesn't", function () {
            doTest("testing", "3ing", false);
        });
    });
});
