"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var utils_1 = require("../../utils");
describe("ArrayUtils", function () {
    describe("#" + "isNullOrEmpty" + "()", function () {
        it("should return true when null", function () {
            chai_1.expect(utils_1.ArrayUtils.isNullOrEmpty(null)).to.equal(true);
        });
        it("should return true when undefined", function () {
            chai_1.expect(utils_1.ArrayUtils.isNullOrEmpty(undefined)).to.equal(true);
        });
        it("should return true when empty", function () {
            chai_1.expect(utils_1.ArrayUtils.isNullOrEmpty([])).to.equal(true);
        });
        it("should return false when not empty", function () {
            chai_1.expect(utils_1.ArrayUtils.isNullOrEmpty([1])).to.equal(false);
        });
    });
    describe("#" + "getUniqueItems" + "()", function () {
        it("should return all the unique items in the array", function () {
            chai_1.expect(utils_1.ArrayUtils.getUniqueItems([1, 2, 3, 3, 2, 1])).to.eql([1, 2, 3]);
        });
    });
    describe("#" + "removeFirst" + "()", function () {
        it("should remove the first value", function () {
            var a = [1, 2, 3, 3];
            var result = utils_1.ArrayUtils.removeFirst(a, 3);
            chai_1.expect(a).to.eql([1, 2, 3]);
            chai_1.expect(result).to.equal(true);
        });
        it("should not remove if not found", function () {
            var a = [1, 2, 3, 3];
            var result = utils_1.ArrayUtils.removeFirst(a, 4);
            chai_1.expect(a).to.eql([1, 2, 3, 3]);
            chai_1.expect(result).to.equal(false);
        });
    });
    describe("#" + "binarySearch" + "()", function () {
        function doTest(items, value, expectedValue) {
            var result = utils_1.ArrayUtils.binarySearch(items, function (item) { return item === value; }, function (item) { return item > value; });
            chai_1.expect(result).to.equal(expectedValue);
        }
        it("should find the value is at the beginning of the array", function () {
            doTest([1, 2, 3, 4], 1, 0);
        });
        it("should find the value is at the end of the array", function () {
            doTest([1, 2, 3, 4], 4, 3);
        });
        it("should find the value right before the middle in an even length array", function () {
            doTest([1, 2, 3, 4], 2, 1);
        });
        it("should find the value right after the middle in an even length array", function () {
            doTest([1, 2, 3, 4], 3, 2);
        });
        it("should find the value right before the middle in an odd length array", function () {
            doTest([1, 2, 3, 4, 5], 2, 1);
        });
        it("should find the value in the middle in an odd length array", function () {
            doTest([1, 2, 3, 4, 5], 3, 2);
        });
        it("should find the value right after the middle in an odd length array", function () {
            doTest([1, 2, 3, 4, 5], 4, 3);
        });
        it("should not find a number in the middle of the array that doesn't exist", function () {
            doTest([1, 2, 4, 5, 6], 3, -1);
        });
        it("should not find a number beyond the left of the array", function () {
            doTest([1, 2, 3, 4, 5], 0, -1);
        });
        it("should not find a number beyond the right of the array", function () {
            doTest([1, 2, 3, 4, 5], 6, -1);
        });
    });
    describe("#" + "binaryInsert" + "()", function () {
        function doTest(items, value, expectedItems) {
            utils_1.ArrayUtils.binaryInsert(items, value, function (item) { return item > value; });
            chai_1.expect(items).to.deep.equal(expectedItems);
        }
        it("should add a number in the correct place when equal", function () {
            doTest([1, 2, 3], 2, [1, 2, 2, 3]);
        });
        it("should add a number in the correct place in an odd position", function () {
            doTest([1, 2, 4], 3, [1, 2, 3, 4]);
        });
        it("should add a number in the correct place in an even position", function () {
            doTest([1, 2, 3, 5], 4, [1, 2, 3, 4, 5]);
        });
        it("should add a number in the correct place at the beginning", function () {
            doTest([1, 2, 3, 5], 0, [0, 1, 2, 3, 5]);
        });
        it("should add a number in the correct place at the end", function () {
            doTest([1, 2, 3, 5], 6, [1, 2, 3, 5, 6]);
        });
    });
    describe("#" + "containsSubArray" + "()", function () {
        function doTest(items, subArray, result) {
            chai_1.expect(utils_1.ArrayUtils.containsSubArray(items, subArray)).equal(result);
        }
        it("should be true when it contains the sub array at the start", function () {
            doTest([1, 2, 3, 4, 5], [1, 2, 3], true);
        });
        it("should be true when it contains the sub array at the end", function () {
            doTest([1, 2, 3, 4, 5], [3, 4, 5], true);
        });
        it("should be true when it contains the sub array in the middle", function () {
            doTest([1, 2, 3, 4, 5], [2, 3, 4], true);
        });
        it("should be false when it doesn't contain the sub array", function () {
            doTest([1, 2, 3, 4, 5], [1, 2, 2], false);
        });
        it("should be false when it doesn't contain the sub array in a different order", function () {
            doTest([1, 2, 3, 4, 5], [3, 2, 1], false);
        });
        it("should be false when it doesn't contain all the sub array", function () {
            doTest([1, 2, 3, 4, 5], [3, 4, 5, 6], false);
        });
    });
});
