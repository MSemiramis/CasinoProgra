"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var utils_1 = require("../../utils");
describe("AdvancedIterator", function () {
    function getNumIterator() {
        var i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < 10)) return [3 /*break*/, 4];
                    return [4 /*yield*/, i];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    }
    function getIteratedIterator() {
        var iterator = new utils_1.AdvancedIterator(getNumIterator());
        while (!iterator.done)
            iterator.next();
        return iterator;
    }
    describe("done", function () {
        it("should not be done when not done", function () {
            var iterator = new utils_1.AdvancedIterator(getNumIterator());
            chai_1.expect(iterator.done).to.be.false;
        });
        it("should be done when done", function () {
            chai_1.expect(getIteratedIterator().done).to.be.true;
        });
    });
    describe("next", function () {
        it("should get the next until it runs out", function () {
            var iterator = new utils_1.AdvancedIterator(getNumIterator());
            var nums = [];
            while (!iterator.done)
                nums.push(iterator.next());
            chai_1.expect(nums).to.deep.equal(utils_1.ArrayUtils.from(getNumIterator()));
        });
        it("should throw when calling .next at the end of the iterator", function () {
            var iterator = getIteratedIterator();
            chai_1.expect(function () { return iterator.next(); }).to.throw();
        });
    });
    describe("current", function () {
        it("should throw if called before anything else", function () {
            var iterator = new utils_1.AdvancedIterator(getNumIterator());
            chai_1.expect(function () { return iterator.current; }).to.throw();
        });
        it("should not advance the iterator if called multiple times", function () {
            var iterator = new utils_1.AdvancedIterator(getNumIterator());
            iterator.next();
            chai_1.expect(iterator.current).to.equal(0);
            chai_1.expect(iterator.current).to.equal(0);
        });
        it("should get the current after going next", function () {
            var iterator = new utils_1.AdvancedIterator(getNumIterator());
            iterator.next();
            iterator.next();
            chai_1.expect(iterator.current).to.equal(1);
        });
        it("should get the current at the end of an iterator", function () {
            var iterator = getIteratedIterator();
            chai_1.expect(iterator.current).to.equal(9);
        });
    });
    describe("previous", function () {
        it("should throw if called before anything else", function () {
            var iterator = new utils_1.AdvancedIterator(getNumIterator());
            chai_1.expect(function () { return iterator.previous; }).to.throw();
        });
        it("should throw if called after only moving forward once", function () {
            var iterator = new utils_1.AdvancedIterator(getNumIterator());
            iterator.next();
            chai_1.expect(function () { return iterator.previous; }).to.throw();
        });
        it("should get previous if moved forward twice", function () {
            var iterator = new utils_1.AdvancedIterator(getNumIterator());
            iterator.next();
            iterator.next();
            chai_1.expect(iterator.previous).to.equal(0);
        });
        it("should get previous", function () {
            var iterator = new utils_1.AdvancedIterator(getNumIterator());
            iterator.next();
            iterator.next();
            iterator.next();
            chai_1.expect(iterator.previous).to.equal(1);
        });
    });
    describe("peek", function () {
        it("should peek the value if called before anything else", function () {
            var iterator = new utils_1.AdvancedIterator(getNumIterator());
            chai_1.expect(iterator.peek).to.equal(0);
        });
        it("should not advance the iterator if called multiple times", function () {
            var iterator = new utils_1.AdvancedIterator(getNumIterator());
            iterator.next();
            chai_1.expect(iterator.peek).to.equal(1);
            chai_1.expect(iterator.peek).to.equal(1);
        });
        it("should throw at the end of an iterator", function () {
            var iterator = getIteratedIterator();
            chai_1.expect(function () { return iterator.peek; }).to.throw();
        });
    });
    describe("rest", function () {
        it("should iterate through the rest of the values", function () {
            var iterator = new utils_1.AdvancedIterator(getNumIterator());
            iterator.next();
            iterator.next();
            chai_1.expect(utils_1.ArrayUtils.from(iterator.rest())).to.deep.equal(utils_1.ArrayUtils.from(getNumIterator()).slice(2));
        });
    });
});
