"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var utils_1 = require("../../../utils");
var errors = require("../../../errors");
var testHelpers = require("../../testHelpers");
describe("getCompilerOptionsFromTsConfig", function () {
    it("should throw an error when the path doesn't exist", function () {
        var host = testHelpers.getFileSystemHostWithFiles([]);
        chai_1.expect(function () { return utils_1.getCompilerOptionsFromTsConfig("tsconfig.json", { fileSystem: host }); })
            .to.throw(errors.FileNotFoundError, "File not found: /tsconfig.json");
    });
    it("should throw an error when the file doesn't parse", function () {
        var host = testHelpers.getFileSystemHostWithFiles([{ filePath: "tsconfig.json", text: "*&($%0583$#@%" }]);
        chai_1.expect(function () { return utils_1.getCompilerOptionsFromTsConfig("tsconfig.json", { fileSystem: host }); }).to.throw(Error);
    });
    it("should get the compiler options plus the defaults when providing some", function () {
        var host = testHelpers.getFileSystemHostWithFiles([{ filePath: "tsconfig.json", text: "{ \"compilerOptions\": { \"rootDir\": \"test\", \"target\": \"ES5\" } }" }]);
        var compilerOptionsResult = utils_1.getCompilerOptionsFromTsConfig("tsconfig.json", { fileSystem: host });
        chai_1.expect(compilerOptionsResult.options).to.deep.equal({ rootDir: "/test", target: 1 });
        chai_1.expect(compilerOptionsResult.errors).to.deep.equal([]);
    });
    it("should get the error when specifying an invalid compiler option", function () {
        var host = testHelpers.getFileSystemHostWithFiles([{ filePath: "tsconfig.json", text: "{ \"compilerOptions\": { \"target\": \"FUN\" } }" }]);
        var compilerOptionsResult = utils_1.getCompilerOptionsFromTsConfig("tsconfig.json", { fileSystem: host });
        chai_1.expect(compilerOptionsResult.options).to.deep.equal({ target: undefined });
        chai_1.expect(compilerOptionsResult.errors.length).to.equal(1);
    });
});
