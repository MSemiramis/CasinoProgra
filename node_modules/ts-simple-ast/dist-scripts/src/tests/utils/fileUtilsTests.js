"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var fileSystem_1 = require("../../fileSystem");
var utils_1 = require("../../utils");
var testHelpers_1 = require("../testHelpers");
describe("FileUtils", function () {
    describe("ensureDirectoryExistsSync", function () {
        it("should ensure the specified directory exists and the parent directories", function () {
            var host = testHelpers_1.getFileSystemHostWithFiles([], ["/some"]);
            utils_1.FileUtils.ensureDirectoryExistsSync(new fileSystem_1.FileSystemWrapper(host), "/some/dir/path");
            chai_1.expect(host.getCreatedDirectories()).to.deep.equal([
                "/some/dir",
                "/some/dir/path"
            ]);
        });
    });
    describe("ensureDirectoryExists", function () {
        it("should ensure the specified directory exists and the parent directories", function () { return __awaiter(_this, void 0, void 0, function () {
            var host;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        host = testHelpers_1.getFileSystemHostWithFiles([], ["/some"]);
                        return [4 /*yield*/, utils_1.FileUtils.ensureDirectoryExists(new fileSystem_1.FileSystemWrapper(host), "/some/dir/path")];
                    case 1:
                        _a.sent();
                        chai_1.expect(host.getCreatedDirectories()).to.deep.equal([
                            "/some/dir",
                            "/some/dir/path"
                        ]);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("getStandardizedAbsolutePath", function () {
        var fileSystem = new fileSystem_1.VirtualFileSystemHost();
        it("should get the absolute path when absolute", function () {
            chai_1.expect(utils_1.FileUtils.getStandardizedAbsolutePath(fileSystem, "/absolute/path", "/basedir")).to.equal("/absolute/path");
        });
        it("should get the relative path when relative", function () {
            chai_1.expect(utils_1.FileUtils.getStandardizedAbsolutePath(fileSystem, "relative/path", "/basedir")).to.equal("/basedir/relative/path");
        });
        it("should get the relative path without dots", function () {
            chai_1.expect(utils_1.FileUtils.getStandardizedAbsolutePath(fileSystem, "../relative/path", "/basedir")).to.equal("/relative/path");
        });
    });
    describe("standardizeSlashes", function () {
        it("should change all back slashes to forward slashes", function () {
            chai_1.expect(utils_1.FileUtils.standardizeSlashes("/some/path\\including\\back/spaces")).to.equal("/some/path/including/back/spaces");
        });
    });
    describe("pathStartsWith", function () {
        it("should return false for a undefined path", function () {
            chai_1.expect(utils_1.FileUtils.pathStartsWith(undefined, "test.ts")).to.be.false;
        });
        it("should return false for an empty path", function () {
            chai_1.expect(utils_1.FileUtils.pathStartsWith("", "test.ts")).to.be.false;
        });
        it("should return true when both are undefined", function () {
            chai_1.expect(utils_1.FileUtils.pathStartsWith(undefined, undefined)).to.be.true;
        });
        it("should return true when both are empty", function () {
            chai_1.expect(utils_1.FileUtils.pathStartsWith("", "")).to.be.true;
        });
        it("should return false for empty search", function () {
            chai_1.expect(utils_1.FileUtils.pathStartsWith("V:/dir/tests.ts", "")).to.be.false;
        });
        it("should return false for undefined search", function () {
            chai_1.expect(utils_1.FileUtils.pathStartsWith("V:/dir/tests.ts", undefined)).to.be.false;
        });
        it("should return false for a file name only", function () {
            chai_1.expect(utils_1.FileUtils.pathStartsWith("V:/dir/test.ts", "test.ts")).to.be.false;
        });
        it("should return true when matches start directory without a slash", function () {
            chai_1.expect(utils_1.FileUtils.pathStartsWith("V:/dir/test.ts", "V:/dir")).to.be.true;
        });
        it("should return true when matches start directory with a slash", function () {
            chai_1.expect(utils_1.FileUtils.pathStartsWith("V:/dir/test.ts", "V:/dir/")).to.be.true;
        });
        it("should return true for a full match", function () {
            chai_1.expect(utils_1.FileUtils.pathStartsWith("V:/dir/test.ts", "V:/dir/test.ts")).to.be.true;
        });
        it("should not error when the file path being searched for is longer", function () {
            chai_1.expect(utils_1.FileUtils.pathStartsWith("V:/dir/test.ts", "V:/dir/dir/test.ts")).to.be.false;
        });
        it("should return false when the end name doesn't exactly match", function () {
            chai_1.expect(utils_1.FileUtils.pathStartsWith("V:/dir/test.ts", "V:/dir/test.t")).to.be.false;
        });
    });
    describe("pathEndsWith", function () {
        it("should return false for a undefined path", function () {
            chai_1.expect(utils_1.FileUtils.pathEndsWith(undefined, "test.ts")).to.be.false;
        });
        it("should return false for an empty path", function () {
            chai_1.expect(utils_1.FileUtils.pathEndsWith("", "test.ts")).to.be.false;
        });
        it("should return true when both are undefined", function () {
            chai_1.expect(utils_1.FileUtils.pathEndsWith(undefined, undefined)).to.be.true;
        });
        it("should return true when both are empty", function () {
            chai_1.expect(utils_1.FileUtils.pathEndsWith("", "")).to.be.true;
        });
        it("should return false for empty search", function () {
            chai_1.expect(utils_1.FileUtils.pathEndsWith("V:/dir/tests.ts", "")).to.be.false;
        });
        it("should return false for undefined search", function () {
            chai_1.expect(utils_1.FileUtils.pathEndsWith("V:/dir/tests.ts", undefined)).to.be.false;
        });
        it("should return true for a file name only", function () {
            chai_1.expect(utils_1.FileUtils.pathEndsWith("V:/dir/test.ts", "test.ts")).to.be.true;
        });
        it("should return true for a file name and dir", function () {
            chai_1.expect(utils_1.FileUtils.pathEndsWith("V:/dir/test.ts", "dir/test.ts")).to.be.true;
        });
        it("should return true for a file name and dir with a slash at the front", function () {
            chai_1.expect(utils_1.FileUtils.pathEndsWith("V:/dir/test.ts", "/dir/test.ts")).to.be.true;
        });
        it("should return true for a full match", function () {
            chai_1.expect(utils_1.FileUtils.pathEndsWith("V:/dir/test.ts", "V:/dir/test.ts")).to.be.true;
        });
        it("should not error when the file path being searched for is longer", function () {
            chai_1.expect(utils_1.FileUtils.pathEndsWith("V:/dir/test.ts", "V:/dir/dir/test.ts")).to.be.false;
        });
        it("should return false when the directory name doesn't exactly match", function () {
            chai_1.expect(utils_1.FileUtils.pathEndsWith("V:/dir/test.ts", "ir/test.ts")).to.be.false;
        });
    });
    describe("getRelativePathTo", function () {
        function doTest(from, to, expected) {
            chai_1.expect(utils_1.FileUtils.getRelativePathTo(from, to)).to.equal(expected);
        }
        it("should get the relative path when the file is in the parent directory", function () {
            doTest("V:/testing/this/out/from.ts", "V:/testing/this/to.ts", "../to.ts");
        });
        it("should get the relative path when the file is in a child directory", function () {
            doTest("V:/testing/this/from.ts", "V:/testing/this/out/to.ts", "out/to.ts");
        });
        it("should get the relative path when the files are in different child directories", function () {
            doTest("V:/testing/this/child1/from.ts", "V:/testing/this/child2/to.ts", "../child2/to.ts");
        });
        it("should get the relative path when the files are in the same directory", function () {
            doTest("V:/testing/this/out/from.ts", "V:/testing/this/out/to.ts", "to.ts");
        });
        it("should get the relative path when the files are the same", function () {
            doTest("V:/testing/this/out/to.ts", "V:/testing/this/out/to.ts", "to.ts");
        });
    });
    describe("getExtension", function () {
        function doTest(path, expected) {
            chai_1.expect(utils_1.FileUtils.getExtension(path)).to.equal(expected);
        }
        // copying behaviour from https://nodejs.org/api/path.html#path_path_extname_path
        it("should return a dot for a file that ends with a dot", function () {
            doTest("path/file.", ".");
        });
        it("should return only the last extension for a file name with multiple dots", function () {
            doTest("path/file.coffee.md", ".md");
        });
        it("should return an empty string when there's no dot in the file name", function () {
            doTest("path/file", "");
        });
        it("should return an empty string when the dot is at the start of the file name", function () {
            doTest("path/.file", "");
        });
        it("should return an empty string when there's no dot in the file name and a dot in the directory path", function () {
            doTest("path.something/file", "");
        });
        it("should return the extension for a .ts file", function () {
            doTest("path/file.ts", ".ts");
        });
        it("should return the extension for a .d.ts file", function () {
            doTest("path/file.d.ts", ".d.ts");
        });
        it("should return the extension for a .d.ts file that's upper case", function () {
            doTest("path/file.D.TS", ".D.TS");
        });
        it("should return the extension for a .js.map file", function () {
            doTest("path/file.js.map", ".js.map");
        });
        it("should return the extension for a .js.map file that's upper case", function () {
            doTest("path/file.JS.MAP", ".JS.MAP");
        });
    });
});
