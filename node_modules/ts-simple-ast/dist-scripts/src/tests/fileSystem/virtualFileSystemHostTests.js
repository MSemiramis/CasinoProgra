"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var fileSystem_1 = require("../../fileSystem");
var errors = require("../../errors");
describe("VirtualFileSystemHost", function () {
    describe("constructor", function () {
        it("should have the main directory after being constructed", function () {
            chai_1.expect(new fileSystem_1.VirtualFileSystemHost().directoryExistsSync("/")).to.be.true;
        });
    });
    describe("getCurrentDirectory", function () {
        it("should have a current directory of just a forward slash", function () {
            chai_1.expect(new fileSystem_1.VirtualFileSystemHost().getCurrentDirectory()).to.equal("/");
        });
    });
    describe("deleteSync", function () {
        it("should delete a file", function () {
            var fs = new fileSystem_1.VirtualFileSystemHost();
            var filePath = "/dir/file.ts";
            fs.writeFileSync(filePath, "");
            fs.deleteSync(filePath);
            chai_1.expect(fs.fileExistsSync("/dir/file.ts")).to.be.false;
        });
        it("should delete a directory and all its sub directories", function () {
            var fs = new fileSystem_1.VirtualFileSystemHost();
            fs.writeFileSync("/dir/file.ts", "");
            fs.writeFileSync("/dir/subdir/file.ts", "");
            fs.writeFileSync("/otherDir/subdir/file.ts", "");
            fs.deleteSync("/dir");
            chai_1.expect(fs.fileExistsSync("/dir/file.ts")).to.be.false;
            chai_1.expect(fs.fileExistsSync("/dir/subdir/file.ts")).to.be.false;
            chai_1.expect(fs.directoryExistsSync("/dir/subdir")).to.be.false;
            chai_1.expect(fs.directoryExistsSync("/dir")).to.be.false;
            chai_1.expect(fs.directoryExistsSync("/otherDir")).to.be.true;
            chai_1.expect(fs.fileExistsSync("/otherDir/subdir/file.ts")).to.be.true;
        });
        it("should throw an error deleting a directory that doesn't exist", function () {
            var fs = new fileSystem_1.VirtualFileSystemHost();
            chai_1.expect(function () { return fs.deleteSync("/somePath"); }).to.throw(errors.FileNotFoundError);
        });
        it("should throw an error deleting a file that doesn't exist", function () {
            var fs = new fileSystem_1.VirtualFileSystemHost();
            fs.mkdirSync("dir");
            chai_1.expect(function () { return fs.deleteSync("/dir/file.ts"); }).to.throw(errors.FileNotFoundError);
        });
    });
    describe("delete", function () {
        // most tests done in deleteSync
        it("should delete a file", function () { return __awaiter(_this, void 0, void 0, function () {
            var fs, filePath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fs = new fileSystem_1.VirtualFileSystemHost();
                        filePath = "/dir/file.ts";
                        fs.writeFileSync(filePath, "");
                        return [4 /*yield*/, fs.delete(filePath)];
                    case 1:
                        _a.sent();
                        chai_1.expect(fs.fileExistsSync("/dir/file.ts")).to.be.false;
                        return [2 /*return*/];
                }
            });
        }); });
        it("should throw an error deleting a directory that doesn't exist", function () { return __awaiter(_this, void 0, void 0, function () {
            var fs, caughtErr, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fs = new fileSystem_1.VirtualFileSystemHost();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fs.delete("/somePath")];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        caughtErr = err_1;
                        return [3 /*break*/, 4];
                    case 4:
                        chai_1.expect(caughtErr).to.be.instanceOf(errors.FileNotFoundError);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("readDirSync", function () {
        it("should read a directory that exists", function () {
            var fs = new fileSystem_1.VirtualFileSystemHost();
            fs.writeFileSync("/dir/file.ts", "");
            fs.writeFileSync("/dir/subDir/file.ts", "");
            fs.writeFileSync("/dir2/file.ts", "");
            fs.writeFileSync("/file.ts", "");
            chai_1.expect(fs.readDirSync("/dir")).to.deep.equal(["/dir/subDir", "/dir/file.ts"]);
        });
        it("should throw when reading a directory that doesn't exists", function () {
            var fs = new fileSystem_1.VirtualFileSystemHost();
            chai_1.expect(function () { return fs.readDirSync("/dir"); }).to.throw(errors.DirectoryNotFoundError);
        });
    });
    describe("readFileSync", function () {
        it("should read a file that exists", function () {
            var fs = new fileSystem_1.VirtualFileSystemHost();
            var filePath = "/dir/file.ts";
            var text = "some text";
            fs.writeFileSync(filePath, text);
            chai_1.expect(fs.readFileSync(filePath)).to.equal(text);
        });
        it("should throw reading a file that doesn't exist", function () {
            var fs = new fileSystem_1.VirtualFileSystemHost();
            chai_1.expect(function () { return fs.readFileSync("/NonExistent.ts"); }).to.throw(errors.FileNotFoundError);
        });
    });
    describe("readFile", function () {
        it("should read a file that exists", function () { return __awaiter(_this, void 0, void 0, function () {
            var fs, filePath, text, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        fs = new fileSystem_1.VirtualFileSystemHost();
                        filePath = "/dir/file.ts";
                        text = "some text";
                        fs.writeFileSync(filePath, text);
                        _a = chai_1.expect;
                        return [4 /*yield*/, fs.readFile(filePath)];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.equal(text);
                        return [2 /*return*/];
                }
            });
        }); });
        it("should throw reading a file that doesn't exist", function () { return __awaiter(_this, void 0, void 0, function () {
            var fs, thrownErr, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fs = new fileSystem_1.VirtualFileSystemHost();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fs.readFile("/NonExistent.ts")];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        thrownErr = err_2;
                        return [3 /*break*/, 4];
                    case 4:
                        chai_1.expect(thrownErr).to.be.instanceof(errors.FileNotFoundError);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("writeFileSync", function () {
        it("should write a file", function () {
            var fs = new fileSystem_1.VirtualFileSystemHost();
            var filePath = "/dir/file.ts";
            var text = "some text";
            fs.writeFileSync(filePath, text);
            chai_1.expect(fs.readFileSync(filePath)).to.equal(text);
        });
        it("should over write a file that exists", function () {
            var fs = new fileSystem_1.VirtualFileSystemHost();
            var filePath = "/dir/file.ts";
            var text = "some text";
            fs.writeFileSync(filePath, "");
            fs.writeFileSync(filePath, text);
            chai_1.expect(fs.readFileSync(filePath)).to.equal(text);
        });
        it("should create the directories", function () {
            var fs = new fileSystem_1.VirtualFileSystemHost();
            var filePath = "/dir/subdir/file.ts";
            fs.writeFileSync(filePath, "");
            chai_1.expect(fs.directoryExistsSync("/dir")).to.be.true;
            chai_1.expect(fs.directoryExistsSync("/dir/subdir")).to.be.true;
        });
    });
    describe("writeFile", function () {
        it("should write a file", function () { return __awaiter(_this, void 0, void 0, function () {
            var fs, filePath, text;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fs = new fileSystem_1.VirtualFileSystemHost();
                        filePath = "/dir/file.ts";
                        text = "some text";
                        return [4 /*yield*/, fs.writeFile(filePath, text)];
                    case 1:
                        _a.sent();
                        chai_1.expect(fs.readFileSync(filePath)).to.equal(text);
                        return [2 /*return*/];
                }
            });
        }); });
        it("should over write a file that exists", function () { return __awaiter(_this, void 0, void 0, function () {
            var fs, filePath, text;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fs = new fileSystem_1.VirtualFileSystemHost();
                        filePath = "/dir/file.ts";
                        text = "some text";
                        return [4 /*yield*/, fs.writeFile(filePath, "")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, fs.writeFile(filePath, text)];
                    case 2:
                        _a.sent();
                        chai_1.expect(fs.readFileSync(filePath)).to.equal(text);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("mkdirSync", function () {
        it("should create the directory and all its parent directories", function () {
            var fs = new fileSystem_1.VirtualFileSystemHost();
            var path = "/dir/subdir";
            fs.mkdirSync(path);
            chai_1.expect(fs.directoryExistsSync("/dir")).to.be.true;
            chai_1.expect(fs.directoryExistsSync("/dir/subdir")).to.be.true;
        });
    });
    describe("mkdir", function () {
        it("should create the directory and all its parent directories", function () { return __awaiter(_this, void 0, void 0, function () {
            var fs, path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fs = new fileSystem_1.VirtualFileSystemHost();
                        path = "/dir/subdir";
                        return [4 /*yield*/, fs.mkdir(path)];
                    case 1:
                        _a.sent();
                        chai_1.expect(fs.directoryExistsSync("/dir")).to.be.true;
                        chai_1.expect(fs.directoryExistsSync("/dir/subdir")).to.be.true;
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("fileExists", function () {
        var fs = new fileSystem_1.VirtualFileSystemHost();
        fs.writeFileSync("/file.ts", "");
        it("should return true for a file that exists", function () { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, fs.fileExists("/file.ts")];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.be.true;
                        return [2 /*return*/];
                }
            });
        }); });
        it("should return false for a file that doesn't exist", function () { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, fs.fileExists("/file2.ts")];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.be.false;
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("fileExistsSync", function () {
        var fs = new fileSystem_1.VirtualFileSystemHost();
        fs.writeFileSync("/file.ts", "");
        it("should return true for a file that exists", function () {
            chai_1.expect(fs.fileExistsSync("/file.ts")).to.be.true;
        });
        it("should return false for a file that doesn't exist", function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                chai_1.expect(fs.fileExistsSync("/file2.ts")).to.be.false;
                return [2 /*return*/];
            });
        }); });
    });
    describe("directoryExists", function () {
        var fs = new fileSystem_1.VirtualFileSystemHost();
        fs.mkdirSync("/dir");
        it("should return true for a directory that exists", function () { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, fs.directoryExists("/dir")];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.be.true;
                        return [2 /*return*/];
                }
            });
        }); });
        it("should return false for a directory that doesn't exist", function () { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = chai_1.expect;
                        return [4 /*yield*/, fs.directoryExists("/dir2")];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).to.be.false;
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe("directoryExistsSync", function () {
        var fs = new fileSystem_1.VirtualFileSystemHost();
        fs.mkdirSync("/dir");
        it("should return true for a directory that exists", function () {
            chai_1.expect(fs.directoryExistsSync("/dir")).to.be.true;
        });
        it("should return false for a directory that doesn't exist", function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                chai_1.expect(fs.directoryExistsSync("/dir2")).to.be.false;
                return [2 /*return*/];
            });
        }); });
    });
    describe("glob", function () {
        var fs = new fileSystem_1.VirtualFileSystemHost();
        fs.writeFileSync("/dir/file1.ts", "");
        fs.writeFileSync("/dir/file1.d.ts", "");
        fs.writeFileSync("/dir/subDir/file2.ts", "");
        fs.writeFileSync("/dir/file3.js", "");
        fs.writeFileSync("/otherDir/file4.ts", "");
        fs.writeFileSync("/dir2/file5.txt", "");
        fs.writeFileSync("/dir2/file6.ts", "");
        it("should match all the patterns provided", function () {
            chai_1.expect(fs.glob(["/dir/**/*.ts", "/**/*.txt", "!/**/*.d.ts"])).to.deep.equal([
                "/dir/file1.ts",
                "/dir/subDir/file2.ts",
                "/dir2/file5.txt"
            ]);
        });
        it("should match all the patterns provided for a relative path", function () {
            chai_1.expect(fs.glob(["dir/subDir/**/*.ts"])).to.deep.equal([
                "/dir/subDir/file2.ts"
            ]);
        });
        it("should match all the patterns provided for a relative path with a dot", function () {
            chai_1.expect(fs.glob(["./dir/subDir/**/*.ts"])).to.deep.equal([
                "/dir/subDir/file2.ts"
            ]);
        });
    });
});
