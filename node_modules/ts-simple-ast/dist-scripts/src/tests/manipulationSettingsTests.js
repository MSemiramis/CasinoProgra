"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var ManipulationSettings_1 = require("../ManipulationSettings");
var typescript_1 = require("../typescript");
var compiler_1 = require("../compiler");
var utils_1 = require("../utils");
describe("IndentationText", function () {
    // ensure this enum is correct. It's hard to read all the spaces since string enums can't use computed values
    it("should have a tab when has a tab", function () {
        chai_1.expect(ManipulationSettings_1.IndentationText.Tab).to.equal("\t");
    });
    it("should have two spaces when has two", function () {
        chai_1.expect(ManipulationSettings_1.IndentationText.TwoSpaces).to.equal(utils_1.StringUtils.repeat(" ", 2));
    });
    it("should have four spaces when has four", function () {
        chai_1.expect(ManipulationSettings_1.IndentationText.FourSpaces).to.equal(utils_1.StringUtils.repeat(" ", 4));
    });
    it("should have eight spaces when has eight", function () {
        chai_1.expect(ManipulationSettings_1.IndentationText.EightSpaces).to.equal(utils_1.StringUtils.repeat(" ", 8));
    });
});
describe("ManipulationSettingsContainer", function () {
    function checkSettings(settings, settingsSettings) {
        chai_1.expect(settings.getQuoteType()).to.equal(settingsSettings.quoteType);
        chai_1.expect(settings.getNewLineKind()).to.equal(settingsSettings.newLineKind);
        chai_1.expect(settings.getIndentationText()).to.equal(settingsSettings.indentationText);
        chai_1.expect(settings.getScriptTarget()).to.equal(settingsSettings.scriptTarget);
    }
    it("should have the correct defaults", function () {
        var settings = new ManipulationSettings_1.ManipulationSettingsContainer();
        checkSettings(settings, {
            quoteType: compiler_1.QuoteType.Double,
            newLineKind: typescript_1.NewLineKind.LineFeed,
            indentationText: ManipulationSettings_1.IndentationText.FourSpaces,
            scriptTarget: typescript_1.ScriptTarget.Latest
        });
    });
    it("should set the settings when partially setting them", function () {
        var settings = new ManipulationSettings_1.ManipulationSettingsContainer();
        settings.set({
            quoteType: compiler_1.QuoteType.Single
        });
        checkSettings(settings, {
            quoteType: compiler_1.QuoteType.Single,
            newLineKind: typescript_1.NewLineKind.LineFeed,
            indentationText: ManipulationSettings_1.IndentationText.FourSpaces,
            scriptTarget: typescript_1.ScriptTarget.Latest
        });
    });
    it("should set the settings when setting all of them", function () {
        var settings = new ManipulationSettings_1.ManipulationSettingsContainer();
        settings.set({
            quoteType: compiler_1.QuoteType.Single,
            newLineKind: typescript_1.NewLineKind.CarriageReturnLineFeed,
            indentationText: ManipulationSettings_1.IndentationText.EightSpaces,
            scriptTarget: typescript_1.ScriptTarget.ES3
        });
        checkSettings(settings, {
            quoteType: compiler_1.QuoteType.Single,
            newLineKind: typescript_1.NewLineKind.CarriageReturnLineFeed,
            indentationText: ManipulationSettings_1.IndentationText.EightSpaces,
            scriptTarget: typescript_1.ScriptTarget.ES3
        });
    });
    describe("getEditorSettings", function () {
        function doTest(actual, expected) {
            chai_1.expect(actual).is.deep.equal(expected);
        }
        it("should get the default editor settings", function () {
            doTest(new ManipulationSettings_1.ManipulationSettingsContainer().getEditorSettings(), {
                convertTabsToSpaces: true,
                newLineCharacter: "\n",
                indentStyle: typescript_1.IndentStyle.Smart,
                indentSize: 4,
                tabSize: 4
            });
        });
        it("should get the correct editor settings after changing", function () {
            var container = new ManipulationSettings_1.ManipulationSettingsContainer();
            container.getEditorSettings(); // fill the internal cache
            container.set({
                indentationText: ManipulationSettings_1.IndentationText.Tab,
                newLineKind: typescript_1.NewLineKind.CarriageReturnLineFeed
            });
            doTest(container.getEditorSettings(), {
                convertTabsToSpaces: false,
                newLineCharacter: "\r\n",
                indentStyle: typescript_1.IndentStyle.Smart,
                indentSize: 1,
                tabSize: 1
            });
        });
    });
});
