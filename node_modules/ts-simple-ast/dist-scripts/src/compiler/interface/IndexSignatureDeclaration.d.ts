import { ts } from "../../typescript";
import { IndexSignatureDeclarationStructure } from "../../structures";
import { Identifier } from "../common";
import { TypeNode, Type } from "../type";
import { JSDocableNode, ChildOrderableNode, ModifierableNode, ReadonlyableNode } from "../base";
import { TypeElement } from "./TypeElement";
export declare const IndexSignatureDeclarationBase: (new (...args: any[]) => ChildOrderableNode) & (new (...args: any[]) => JSDocableNode) & (new (...args: any[]) => ReadonlyableNode) & (new (...args: any[]) => ModifierableNode) & typeof TypeElement;
export declare class IndexSignatureDeclaration extends IndexSignatureDeclarationBase<ts.IndexSignatureDeclaration> {
    /**
     * Fills the node from a structure.
     * @param structure - Structure to fill.
     */
    fill(structure: Partial<IndexSignatureDeclarationStructure>): this;
    /**
     * Gets the key name.
     */
    getKeyName(): string;
    /**
     * Sets the key name.
     * @param name - New name.
     */
    setKeyName(name: string): void;
    /**
     * Gets the key name node.
     */
    getKeyNameNode(): Identifier;
    /**
     * Gets the key type.
     */
    getKeyType(): Type;
    /**
     * Sets the key type.
     * @param type - Type.
     */
    setKeyType(type: string): void;
    /**
     * Gets the key type node.
     */
    getKeyTypeNode(): TypeNode<ts.TypeNode>;
    /**
     * Gets the return type.
     */
    getReturnType(): Type<ts.Type>;
    /**
     * Gets the return type node.
     */
    getReturnTypeNode(): TypeNode<ts.TypeNode>;
    /**
     * Sets the return type.
     * @param text
     */
    setReturnType(text: string): this;
    /**
     * Removes this index signature.
     */
    remove(): void;
}
