import { ts } from "../../typescript";
import { InterfaceDeclarationStructure } from "../../structures";
import { NamedNode, ExportableNode, ModifierableNode, AmbientableNode, JSDocableNode, TypeParameteredNode, HeritageClauseableNode, ExtendsClauseableNode, TextInsertableNode, ChildOrderableNode, TypeElementMemberedNode } from "../base";
import { ClassDeclaration } from "../class";
import { NamespaceChildableNode } from "../namespace";
import { Statement } from "../statement";
import { Type, TypeAliasDeclaration } from "../type";
import { ImplementationLocation } from "../tools";
export declare const InterfaceDeclarationBase: (new (...args: any[]) => TypeElementMemberedNode) & (new (...args: any[]) => ChildOrderableNode) & (new (...args: any[]) => TextInsertableNode) & (new (...args: any[]) => ExtendsClauseableNode) & (new (...args: any[]) => HeritageClauseableNode) & (new (...args: any[]) => TypeParameteredNode) & (new (...args: any[]) => JSDocableNode) & (new (...args: any[]) => AmbientableNode) & (new (...args: any[]) => NamespaceChildableNode) & (new (...args: any[]) => ExportableNode) & (new (...args: any[]) => ModifierableNode) & (new (...args: any[]) => NamedNode) & typeof Statement;
export declare class InterfaceDeclaration extends InterfaceDeclarationBase<ts.InterfaceDeclaration> {
    /**
     * Fills the node from a structure.
     * @param structure - Structure to fill.
     */
    fill(structure: Partial<InterfaceDeclarationStructure>): this;
    /**
     * Gets the base types.
     */
    getBaseTypes(): Type[];
    /**
     * Gets the base declarations.
     */
    getBaseDeclarations(): (TypeAliasDeclaration | InterfaceDeclaration | ClassDeclaration)[];
    /**
     * Gets all the implementations of the interface.
     *
     * This is similar to "go to implementation."
     */
    getImplementations(): ImplementationLocation[];
}
