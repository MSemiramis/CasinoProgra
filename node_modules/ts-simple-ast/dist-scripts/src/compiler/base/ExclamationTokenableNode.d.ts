import { ts } from "../../typescript";
import { Constructor } from "../../Constructor";
import { Node } from "../common";
export declare type ExclamationTokenableNodeExtensionType = Node<ts.Node & {
    exclamationToken?: ts.ExclamationToken;
}>;
export interface ExclamationTokenableNode {
    /**
     * If it has a exclamation token.
     */
    hasExclamationToken(): boolean;
    /**
     * Gets the exclamation token node or returns undefined if it doesn't exist.
     */
    getExclamationTokenNode(): Node<ts.ExclamationToken> | undefined;
    /**
     * Gets the exclamation token node or throws.
     */
    getExclamationTokenNodeOrThrow(): Node<ts.ExclamationToken>;
    /**
     * Sets if this node has a exclamation token.
     * @param value - If it should have a exclamation token or not.
     */
    setHasExclamationToken(value: boolean): this;
}
export declare function ExclamationTokenableNode<T extends Constructor<ExclamationTokenableNodeExtensionType>>(Base: T): Constructor<ExclamationTokenableNode> & T;
