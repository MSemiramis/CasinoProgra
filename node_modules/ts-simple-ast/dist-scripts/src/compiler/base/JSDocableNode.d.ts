import { ts } from "../../typescript";
import { Constructor } from "../../Constructor";
import { JSDocStructure } from "../../structures";
import { Node } from "../common";
import { JSDoc } from "../doc/JSDoc";
export declare type JSDocableNodeExtensionType = Node<ts.Node & {
    jsDoc?: ts.NodeArray<ts.JSDoc>;
}>;
export interface JSDocableNode {
    /**
     * Gets the JS doc nodes.
     */
    getJsDocs(): JSDoc[];
    /**
     * Adds a JS doc.
     * @param structure - Structure to add.
     */
    addJsDoc(structure: JSDocStructure): JSDoc;
    /**
     * Adds JS docs.
     * @param structures - Structures to add.
     */
    addJsDocs(structures: JSDocStructure[]): JSDoc[];
    /**
     * Inserts a JS doc.
     * @param index - Index to insert at.
     * @param structure - Structure to insert.
     */
    insertJsDoc(index: number, structure: JSDocStructure): JSDoc;
    /**
     * Inserts JS docs.
     * @param index - Index to insert at.
     * @param structures - Structures to insert.
     */
    insertJsDocs(index: number, structures: JSDocStructure[]): JSDoc[];
}
export declare function JSDocableNode<T extends Constructor<JSDocableNodeExtensionType>>(Base: T): Constructor<JSDocableNode> & T;
