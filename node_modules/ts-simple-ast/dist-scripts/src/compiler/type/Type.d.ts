import { ts, TypeFlags, ObjectFlags, TypeFormatFlags } from "../../typescript";
import { Node } from "../common/Node";
import { Symbol } from "../common/Symbol";
import { Signature } from "../common/Signature";
import { TypeParameter } from "./TypeParameter";
export declare class Type<TType extends ts.Type = ts.Type> {
    /**
     * Gets the underlying compiler type.
     */
    readonly compilerType: TType;
    /**
     * Gets the type text.
     * @param enclosingNode - The enclosing node.
     * @param typeFormatFlags - Format flags for the type text.
     */
    getText(enclosingNode?: Node, typeFormatFlags?: TypeFormatFlags): string;
    /**
     * Gets the alias symbol if it exists.
     */
    getAliasSymbol(): Symbol | undefined;
    /**
     * Gets the alias symbol if it exists, or throws.
     */
    getAliasSymbolOrThrow(): Symbol;
    /**
     * Gets the alias type arguments.
     */
    getAliasTypeArguments(): Type[];
    /**
     * Gets the apparent type.
     */
    getApparentType(): Type;
    /**
     * Gets the array type
     */
    getArrayType(): Type<ts.Type> | undefined;
    /**
     * Gets the base types.
     */
    getBaseTypes(): Type<ts.BaseType>[];
    /**
     * Gets the call signatures.
     */
    getCallSignatures(): Signature[];
    /**
     * Gets the construct signatures.
     */
    getConstructSignatures(): Signature[];
    /**
     * Gets the constraint or throws if it doesn't exist.
     */
    getConstraintOrThrow(): Type<ts.Type>;
    /**
     * Gets the constraint or returns undefined if it doesn't exist.
     */
    getConstraint(): Type<ts.Type> | undefined;
    /**
     * Gets the default type or throws if it doesn't exist.
     */
    getDefaultOrThrow(): Type<ts.Type>;
    /**
     * Gets the default type or returns undefined if it doesn't exist.
     */
    getDefault(): Type<ts.Type> | undefined;
    /**
     * Gets the properties of the type.
     */
    getProperties(): Symbol[];
    /**
     * Gets a property.
     * @param name - By a name.
     * @param findFunction - Function for searching for a property.
     */
    getProperty(name: string): Symbol | undefined;
    getProperty(findFunction: (declaration: Symbol) => boolean): Symbol | undefined;
    /**
     * Gets the apparent properties of the type.
     */
    getApparentProperties(): Symbol[];
    /**
     * Gets an apparent property.
     * @param name - By a name.
     * @param findFunction - Function for searching for an apparent property.
     */
    getApparentProperty(name: string): Symbol | undefined;
    getApparentProperty(findFunction: (declaration: Symbol) => boolean): Symbol | undefined;
    /**
     * Gets if the type is possibly null or undefined.
     */
    isNullable(): boolean;
    /**
     * Gets the non-nullable type.
     */
    getNonNullableType(): Type;
    /**
     * Gets the number index type.
     */
    getNumberIndexType(): Type | undefined;
    /**
     * Gets the string index type.
     */
    getStringIndexType(): Type | undefined;
    /**
     * Gets the target type of a type reference if it exists.
     */
    getTargetType(): Type<ts.GenericType> | undefined;
    /**
     * Gets the target type of a type reference or throws if it doesn't exist.
     */
    getTargetTypeOrThrow(): Type<ts.GenericType>;
    /**
     * Gets type arguments.
     */
    getTypeArguments(): Type[];
    /**
     * Gets the individual element types of the tuple.
     */
    getTupleElements(): Type[];
    /**
     * Gets the union types.
     */
    getUnionTypes(): Type[];
    /**
     * Gets the intersection types.
     */
    getIntersectionTypes(): Type[];
    /**
     * Gets the symbol of the type.
     */
    getSymbol(): Symbol | undefined;
    /**
     * Gets the symbol of the type or throws.
     */
    getSymbolOrThrow(): Symbol;
    /**
     * Gets if this is an anonymous type.
     */
    isAnonymousType(): boolean;
    /**
     * Gets if this is an array type.
     */
    isArrayType(): boolean;
    /**
     * Gets if this is a boolean type.
     */
    isBooleanType(): boolean;
    /**
     * Gets if this is a string type.
     */
    isStringType(): boolean;
    /**
     * Gets if this is a number type.
     */
    isNumberType(): boolean;
    /**
     * Gets if this is an enum type.
     */
    isEnumType(): boolean;
    /**
     * Gets if this is an interface type.
     */
    isInterfaceType(): boolean;
    /**
     * Gets if this is an intersection type.
     */
    isIntersectionType(): boolean;
    /**
     * Gets if this is the null type.
     */
    isNullType(): boolean;
    /**
     * Gets if this is an object type.
     */
    isObjectType(): boolean;
    /**
     * Gets if this is a type parameter.
     */
    isTypeParameter(): this is TypeParameter;
    /**
     * Gets if this is a tuple type.
     */
    isTupleType(): boolean;
    /**
     * Gets if this is a union type.
     */
    isUnionType(): boolean;
    /**
     * Gets if this is the undefined type.
     */
    isUndefinedType(): boolean;
    /**
     * Gets the type flags.
     */
    getFlags(): TypeFlags;
    /**
     * Gets the object flags.
     */
    getObjectFlags(): 0 | ObjectFlags;
}
