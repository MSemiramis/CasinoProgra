import { ts, SyntaxKind } from "../../typescript";
import { Expression } from "../expression";
import { JSDocableNode, ModifierableNode, AsyncableNode, BodiedNode, TextInsertableNode, TypeParameteredNode, SignaturedDeclaration } from "../base";
import { Node } from "../common";
import { StatementedNode } from "../statement";
export declare const ArrowFunctionBase: (new (...args: any[]) => JSDocableNode) & (new (...args: any[]) => TextInsertableNode) & (new (...args: any[]) => BodiedNode) & (new (...args: any[]) => AsyncableNode) & (new (...args: any[]) => StatementedNode) & (new (...args: any[]) => TypeParameteredNode) & (new (...args: any[]) => SignaturedDeclaration) & (new (...args: any[]) => ModifierableNode) & typeof Expression;
export declare class ArrowFunction extends ArrowFunctionBase<ts.ArrowFunction> {
    /**
     * Gets the equals greater than token of the arrow function.
     */
    getEqualsGreaterThan(): Node<ts.Token<SyntaxKind.EqualsGreaterThanToken>>;
}
