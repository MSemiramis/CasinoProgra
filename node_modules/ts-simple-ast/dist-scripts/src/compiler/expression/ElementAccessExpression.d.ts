import { ts } from "../../typescript";
import { Expression } from "./Expression";
import { MemberExpression } from "./MemberExpression";
import { LeftHandSideExpressionedNode } from "./expressioned";
export declare const ElementAccessExpressionBase: (new (...args: any[]) => LeftHandSideExpressionedNode) & typeof MemberExpression;
export declare class ElementAccessExpression<T extends ts.ElementAccessExpression = ts.ElementAccessExpression> extends ElementAccessExpressionBase<T> {
    /**
     * Gets this element access expression's argument expression or undefined if none exists.
     */
    getArgumentExpression(): Expression<ts.Expression> | undefined;
    /**
     * Gets this element access expression's argument expression or throws if none exists.
     */
    getArgumentExpressionOrThrow(): Expression<ts.Expression>;
}
