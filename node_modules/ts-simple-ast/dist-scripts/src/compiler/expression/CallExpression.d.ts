import { ts } from "../../typescript";
import { ArgumentedNode, TypeArgumentedNode } from "../base";
import { LeftHandSideExpression } from "./LeftHandSideExpression";
import { LeftHandSideExpressionedNode } from "./expressioned";
import { Type } from "../type";
export declare const CallExpressionBase: (new (...args: any[]) => TypeArgumentedNode) & (new (...args: any[]) => ArgumentedNode) & (new (...args: any[]) => LeftHandSideExpressionedNode) & typeof LeftHandSideExpression;
export declare class CallExpression<T extends ts.CallExpression = ts.CallExpression> extends CallExpressionBase<T> {
    /**
     * Gets the return type of the call expression.
     */
    getReturnType(): Type;
}
