"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var VariableDeclarationType_1 = require("../../compiler/statement/VariableDeclarationType");
var StructureToText_1 = require("../StructureToText");
var base_1 = require("../base");
var VariableStatementStructureToText = /** @class */ (function (_super) {
    __extends(VariableStatementStructureToText, _super);
    function VariableStatementStructureToText() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.modifierWriter = new base_1.ModifierableNodeStructureToText(_this.writer);
        return _this;
    }
    VariableStatementStructureToText.prototype.writeText = function (structure) {
        this.modifierWriter.writeText(structure);
        this.writer.write((structure.declarationType || VariableDeclarationType_1.VariableDeclarationType.Let) + " ");
        for (var i = 0; i < structure.declarations.length; i++) {
            var declarationStructure = structure.declarations[i];
            this.writer.conditionalWrite(i > 0, ", ");
            this.writer.write(declarationStructure.name);
            if (declarationStructure.type != null)
                this.writer.write(": " + declarationStructure.type);
            if (declarationStructure.initializer != null)
                this.writer.write(" = " + declarationStructure.initializer);
        }
        this.writer.write(";");
    };
    return VariableStatementStructureToText;
}(StructureToText_1.StructureToText));
exports.VariableStatementStructureToText = VariableStatementStructureToText;
