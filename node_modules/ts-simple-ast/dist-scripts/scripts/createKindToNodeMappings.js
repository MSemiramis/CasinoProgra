"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Code Manipulation - Create kind to node mappings
 * ------------------------------------------------
 * This creates the kindToNodeMappings.ts file so that type assertions are necessary in
 * the getDescendantsOfKind, getChildrenOfKind, etc... methods.
 * ----------------------------------------------
 */
var main_1 = require("../src/main");
var common_1 = require("./common");
// this can go away once conditional types are well supported (maybe a few versions after)
function createKindToNodeMappings(inspector, tsInspector) {
    var project = inspector.getProject();
    var kindToNodeMappingsFile = project.getSourceFileOrThrow("kindToNodeMappings.ts");
    var nodeToWrapperMappings = inspector.getNodeToWrapperMappings();
    kindToNodeMappingsFile.removeText();
    // add imports
    kindToNodeMappingsFile.addImportDeclaration({
        namespaceImport: "compiler",
        moduleSpecifier: kindToNodeMappingsFile.getRelativePathToSourceFileAsModuleSpecifier(project.getSourceFileOrThrow("src/compiler/index.ts"))
    });
    kindToNodeMappingsFile.addImportDeclaration({
        namedImports: ["SyntaxKind"],
        moduleSpecifier: kindToNodeMappingsFile.getRelativePathToSourceFileAsModuleSpecifier(project.getSourceFileOrThrow("src/typescript/index.ts"))
    });
    addTypeForSubSet("KindToNodeMappings", project.getSourceFileOrThrow("Node.ts").getClassOrThrow("Node"));
    addTypeForSubSet("KindToExpressionMappings", project.getSourceFileOrThrow("Expression.ts").getClassOrThrow("Expression"));
    kindToNodeMappingsFile.insertText(0, function (writer) {
        return writer.writeLine("// DO NOT EDIT - Automatically maintained by createKindToNodeMappings.ts until conditional types have been released for a while.");
    });
    function addTypeForSubSet(name, nodeClass) {
        var classType = nodeClass.getType();
        var newInterface = kindToNodeMappingsFile.addInterface({
            isExported: true,
            name: name
        });
        newInterface.addIndexSignature({
            keyName: "kind",
            keyType: "number",
            returnType: "compiler.Node"
        });
        try {
            for (var nodeToWrapperMappings_1 = __values(nodeToWrapperMappings), nodeToWrapperMappings_1_1 = nodeToWrapperMappings_1.next(); !nodeToWrapperMappings_1_1.done; nodeToWrapperMappings_1_1 = nodeToWrapperMappings_1.next()) {
                var mapping = nodeToWrapperMappings_1_1.value;
                if (!common_1.hasDescendantBaseType(mapping.wrappedNode.getType(), function (t) { return t.getText() === classType.getText(); }))
                    continue;
                try {
                    for (var _a = __values(mapping.syntaxKindNames), _b = _a.next(); !_b.done; _b = _a.next()) {
                        var kindName = _b.value;
                        try {
                            for (var _c = __values(tsInspector.getNamesFromKind(main_1.SyntaxKind[kindName])), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var possibleKindName = _d.value;
                                newInterface.addProperty({
                                    name: "[SyntaxKind." + possibleKindName + "]",
                                    type: "compiler." + mapping.wrapperName
                                });
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_e = _c.return)) _e.call(_c);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (nodeToWrapperMappings_1_1 && !nodeToWrapperMappings_1_1.done && (_g = nodeToWrapperMappings_1.return)) _g.call(nodeToWrapperMappings_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        var e_3, _g, e_2, _f, e_1, _e;
    }
}
exports.createKindToNodeMappings = createKindToNodeMappings;
