"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inspectors_1 = require("./inspectors");
var inspector = new inspectors_1.InspectorFactory().getTsSimpleAstInspector();
var problems = [];
try {
    for (var _a = __values(inspector.getPublicClasses()), _b = _a.next(); !_b.done; _b = _a.next()) {
        var c = _b.value;
        try {
            for (var _c = __values(c.getInstanceMethods()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var method = _d.value;
                if (!doesReturnTypeRequireOrThrow(method.getReturnType()))
                    continue;
                var orThrowMethod = c.getInstanceMethod(method.getName() + "OrThrow");
                if (orThrowMethod == null && !isIgnoredMethod(c, method))
                    problems.push("Expected method " + c.getName() + "." + method.getName() + " to have a corresponding OrThrow method.");
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_e = _c.return)) _e.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
}
catch (e_2_1) { e_2 = { error: e_2_1 }; }
finally {
    try {
        if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
    }
    finally { if (e_2) throw e_2.error; }
}
try {
    for (var _g = __values(inspector.getPublicInterfaces()), _h = _g.next(); !_h.done; _h = _g.next()) {
        var i = _h.value;
        try {
            for (var _j = __values(i.getMethods()), _k = _j.next(); !_k.done; _k = _j.next()) {
                var method = _k.value;
                if (!doesReturnTypeRequireOrThrow(method.getReturnType()))
                    continue;
                var orThrowMethod = i.getMethod(method.getName() + "OrThrow");
                if (orThrowMethod == null && !isIgnoredMethod(i, method))
                    problems.push("Expected method " + i.getName() + "." + method.getName() + " to have a corresponding OrThrow method.");
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_k && !_k.done && (_l = _j.return)) _l.call(_j);
            }
            finally { if (e_3) throw e_3.error; }
        }
    }
}
catch (e_4_1) { e_4 = { error: e_4_1 }; }
finally {
    try {
        if (_h && !_h.done && (_m = _g.return)) _m.call(_g);
    }
    finally { if (e_4) throw e_4.error; }
}
problems.forEach(function (p) { return console.error(p); });
function doesReturnTypeRequireOrThrow(returnType) {
    return returnType.isNullable();
}
function isIgnoredMethod(parent, method) {
    switch (parent.getName()) {
        case "Project":
            return matches(method.getName(), [
                "addDirectoryIfExists",
                "addSourceFileIfExists"
            ]);
        case "Directory":
            return matches(method.getName(), [
                "addDirectoryIfExists",
                "addSourceFileIfExists"
            ]);
        default:
            return false;
    }
}
function matches(name, names) {
    return names.indexOf(name) >= 0;
}
var e_2, _f, e_1, _e, e_4, _m, e_3, _l;
