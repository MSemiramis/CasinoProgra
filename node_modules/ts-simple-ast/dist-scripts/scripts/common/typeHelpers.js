"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
function isNodeType(type) {
    return type.getText() === "Node<NodeType>";
}
exports.isNodeType = isNodeType;
function hasDescendantNodeType(type) {
    return hasDescendantBaseType(type, isNodeType);
}
exports.hasDescendantNodeType = hasDescendantNodeType;
function hasDescendantBaseType(type, isMatch) {
    return getDescendantBaseType(type, isMatch) != null;
}
exports.hasDescendantBaseType = hasDescendantBaseType;
function getDescendantBaseType(type, isMatch) {
    if (type.isIntersectionType()) {
        try {
            for (var _a = __values(type.getIntersectionTypes()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var intersectionType = _b.value;
                var descendantType = getDescendantBaseType(intersectionType, isMatch);
                if (descendantType != null)
                    return descendantType;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return undefined;
    }
    if (isMatch(type))
        return type;
    var targetType = type.getTargetType();
    if (targetType != null && isMatch(targetType))
        return targetType;
    var allBaseTypes = type.getBaseTypes();
    if (targetType != null)
        allBaseTypes.push.apply(allBaseTypes, __spread(targetType.getBaseTypes()));
    try {
        for (var allBaseTypes_1 = __values(allBaseTypes), allBaseTypes_1_1 = allBaseTypes_1.next(); !allBaseTypes_1_1.done; allBaseTypes_1_1 = allBaseTypes_1.next()) {
            var baseType = allBaseTypes_1_1.value;
            var descendantType = getDescendantBaseType(baseType, isMatch);
            if (descendantType != null)
                return descendantType;
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (allBaseTypes_1_1 && !allBaseTypes_1_1.done && (_d = allBaseTypes_1.return)) _d.call(allBaseTypes_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return undefined;
    var e_1, _c, e_2, _d;
}
exports.getDescendantBaseType = getDescendantBaseType;
