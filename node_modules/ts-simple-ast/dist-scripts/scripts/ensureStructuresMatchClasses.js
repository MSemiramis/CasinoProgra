"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Code Verification - Ensure Structures Match Classes.
 * ----------------------------------------------------
 * Classes like ClassDeclaration can extend a mixin like ExportableNode. In this case, we need to then also make sure
 * that ClassDeclarationStructure will extend ExportableNodeStructure.
 *
 * This code verification ensures the equivalent class' mixins match the equivalent structure's base structures.
 * ----------------------------------------------------
 */
var utils_1 = require("../src/utils");
var config_1 = require("./config");
var inspectors_1 = require("./inspectors");
// setup
var factory = new inspectors_1.InspectorFactory();
var inspector = factory.getTsSimpleAstInspector();
// get info
var nodes = inspector.getWrappedNodes();
var structures = inspector.getStructures();
// find problems
var problems = [];
var _loop_1 = function (node) {
    var structureName = getStructureName(node.getName());
    var structure = utils_1.ArrayUtils.find(structures, function (s) { return s.getName() === structureName; });
    if (structure == null)
        return "continue";
    var _loop_2 = function (mixin) {
        var mixinStructureName = getStructureName(mixin.getName());
        var structureHasMixin = structure.getBaseStructures().some(function (s) { return s.getName() === mixinStructureName; });
        if (!structureHasMixin)
            problems.push(structure.getName() + " does not have " + mixinStructureName + ".");
    };
    try {
        for (var _a = __values(node.getMixins().filter(function (m) { return config_1.isAllowedMixin(m.getName()) && config_1.isAllowedMixinForStructure(m.getName(), structure.getName()); })), _b = _a.next(); !_b.done; _b = _a.next()) {
            var mixin = _b.value;
            _loop_2(mixin);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var _loop_3 = function (baseStructure) {
        var declarationName = baseStructure.getName().replace(/Structure$/, "");
        var mixin = utils_1.ArrayUtils.find(node.getMixins(), function (m) { return m.getName() === declarationName; });
        if (mixin == null)
            problems.push(structure.getName() + " has " + baseStructure.getName() + ", but it shouldn't.");
    };
    try {
        for (var _d = __values(structure.getBaseStructures().filter(function (s) { return !isStructureToIgnore(s.getName()); })), _e = _d.next(); !_e.done; _e = _d.next()) {
            var baseStructure = _e.value;
            _loop_3(baseStructure);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
        }
        finally { if (e_2) throw e_2.error; }
    }
    var e_1, _c, e_2, _f;
};
try {
    for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
        var node = nodes_1_1.value;
        _loop_1(node);
    }
}
catch (e_3_1) { e_3 = { error: e_3_1 }; }
finally {
    try {
        if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
    }
    finally { if (e_3) throw e_3.error; }
}
// output
if (problems.length > 0) {
    console.log(problems);
    throw new Error("Classes and structures did not match!");
}
function getStructureName(name) {
    return name + "Structure";
}
function isStructureToIgnore(name) {
    if (/SpecificStructure$/.test(name))
        return true;
    if (/OverloadStructure$/.test(name))
        return true;
    return false;
}
var e_3, _a;
