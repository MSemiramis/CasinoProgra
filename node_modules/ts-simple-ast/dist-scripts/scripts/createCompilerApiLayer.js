"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Code generation: Create Compiler API Layer
 * ------------------------------------------
 * This creates a file that contains the typings from the TypeScript compiler API.
 * ------------------------------------------
 */
var path = require("path");
var config_1 = require("./config");
var utils_1 = require("../src/utils");
var cloning_1 = require("./common/cloning");
var enumsToSeparate = ["SyntaxKind", "ScriptTarget", "ScriptKind", "LanguageVariant", "EmitHint", "JsxEmit", "ModuleKind", "ModuleResolutionKind",
    "NewLineKind", "TypeFlags", "ObjectFlags", "SymbolFlags", "TypeFormatFlags", "DiagnosticCategory", "IndentStyle"];
var interfacesToSeparate = ["CompilerOptions", "MapLike", "EditorSettings"];
var typeAliasesToSeparate = [];
function createCompilerApiLayer(factory) {
    var tsInspector = factory.getTsInspector();
    var project = factory.getProject();
    var declarationFile = tsInspector.getDeclarationFile();
    var tsNamespaces = declarationFile.getNamespaces().filter(function (n) { return n.getName() === "ts"; });
    var allEnums = utils_1.ArrayUtils.flatten(tsNamespaces.map(function (n) { return n.getEnums(); }));
    var allInterfaces = utils_1.ArrayUtils.flatten(tsNamespaces.map(function (n) { return n.getInterfaces(); }));
    var allTypeAliases = utils_1.ArrayUtils.flatten(tsNamespaces.map(function (n) { return n.getTypeAliases(); }));
    createTsSourceFile();
    function createTsSourceFile() {
        var sourceFile = getOrCreateSourceFile("typescript.ts");
        sourceFile.addImportDeclarations([{
                namespaceImport: "tsCompiler",
                moduleSpecifier: "typescript"
            }, {
                namedImports: ["ObjectUtils"],
                moduleSpecifier: sourceFile.getRelativePathToSourceFileAsModuleSpecifier(project.getSourceFileOrThrow("src/utils/ObjectUtils.ts"))
            }]);
        addSeparatedDeclarations();
        var tsNamespace = sourceFile.addNamespace({
            name: "ts",
            isExported: true
        });
        cloning_1.cloneNamespaces(tsNamespace, utils_1.ArrayUtils.flatten(tsNamespaces.map(function (n) { return n.getNamespaces(); })));
        cloning_1.cloneInterfaces(tsNamespace, allInterfaces.filter(function (i) { return interfacesToSeparate.indexOf(i.getName()) === -1; }));
        cloning_1.cloneEnums(tsNamespace, allEnums.filter(function (e) { return enumsToSeparate.indexOf(e.getName()) === -1; }));
        cloning_1.cloneTypeAliases(tsNamespace, allTypeAliases.filter(function (t) { return typeAliasesToSeparate.indexOf(t.getName()) === -1; }));
        cloning_1.cloneClasses(tsNamespace, utils_1.ArrayUtils.flatten(tsNamespaces.map(function (n) { return n.getClasses(); })));
        cloning_1.cloneFunctions(tsNamespace, utils_1.ArrayUtils.flatten(tsNamespaces.map(function (n) { return n.getFunctions(); })));
        cloning_1.cloneVariables(tsNamespace, utils_1.ArrayUtils.flatten(tsNamespaces.map(function (n) { return n.getVariableStatements(); })));
        tsNamespace.getInterfaceOrThrow("Node").addProperty({
            docs: [{
                    description: "This brand prevents using nodes not created within this library or not created within the ts namespace object of this library.\n" +
                        "It's recommended that you only use this library and use its ts named export for all your TypeScript compiler needs.\n" +
                        "If you want to ignore this and are using the same TypeScript compiler version as ts.versionMajorMinor then assert it to ts.Node.\n" +
                        "If you don't use this library with this same major & minor version of TypeScript then be warned, you may encounter unexpected behaviour."
                }],
            name: "_tsSimpleAstBrand",
            type: "undefined"
        });
        sourceFile.insertStatements(0, function (writer) {
            writer.writeLine("/* tslint:disable */")
                .writeLine("/*")
                .writeLine(" * TypeScript Compiler Declaration File")
                .writeLine(" * ====================================")
                .writeLine(" * DO NOT EDIT - This file is automatically generated by createCompilerApiLayer.ts")
                .writeLine(" *")
                .writeLine(" * This file contains the TypeScript compiler declarations slightly modified.")
                .writeLine(" * Note: The TypeScript compiler is licensed under the Apache 2.0 license.")
                .writeLine(" */");
        });
        tsNamespace.addStatements(function (writer) {
            writer.newLine();
            writer.writeLine("// overwrite this namespace with the TypeScript compiler");
            writer.write("ObjectUtils.assign((ts as any), tsCompiler);");
        });
        sourceFile.replaceWithText(sourceFile.getFullText().replace(/\r?\n/g, "\r\n"));
        function addSeparatedDeclarations() {
            try {
                for (var _a = __values(allEnums.filter(function (e) { return enumsToSeparate.indexOf(e.getName()) >= 0; })), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var enumDec = _b.value;
                    cloning_1.cloneEnums(sourceFile, [enumDec]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var _d = __values(allInterfaces.filter(function (i) { return interfacesToSeparate.indexOf(i.getName()) >= 0; })), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var interfaceDec = _e.value;
                    cloning_1.cloneInterfaces(sourceFile, [interfaceDec]);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
                }
                finally { if (e_2) throw e_2.error; }
            }
            try {
                for (var _g = __values(allTypeAliases.filter(function (t) { return typeAliasesToSeparate.indexOf(t.getName()) >= 0; })), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var typeAliasDec = _h.value;
                    cloning_1.cloneTypeAliases(sourceFile, [typeAliasDec]);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_j = _g.return)) _j.call(_g);
                }
                finally { if (e_3) throw e_3.error; }
            }
            // todo: need a better way of doing this in the future...
            var returnTypeNode = sourceFile.getInterfaceOrThrow("CompilerOptions").getIndexSignatures()[0].getReturnTypeNode();
            returnTypeNode.getTypeNodes().map(function (n) {
                if (n.getText() === "CompilerOptionsValue" || n.getText() === "JsonSourceFile")
                    n.replaceWithText("ts." + n.getText());
            });
            var e_1, _c, e_2, _f, e_3, _j;
        }
    }
    function getOrCreateSourceFile(fileName) {
        var filePath = path.join(config_1.rootFolder, "src/typescript", fileName);
        var existingSourceFile = project.getSourceFile(filePath);
        if (existingSourceFile != null)
            existingSourceFile.removeText();
        return existingSourceFile || project.createSourceFile(filePath);
    }
}
exports.createCompilerApiLayer = createCompilerApiLayer;
