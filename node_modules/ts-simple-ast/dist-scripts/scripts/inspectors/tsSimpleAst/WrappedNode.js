"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../../../src/utils");
var common_1 = require("../../common");
var WrappedNode = /** @class */ (function () {
    function WrappedNode(wrapperFactory, node) {
        this.wrapperFactory = wrapperFactory;
        this.node = node;
    }
    WrappedNode.prototype.getName = function () {
        return this.node.getName();
    };
    WrappedNode.prototype.getFilePath = function () {
        return this.node.getSourceFile().getFilePath();
    };
    WrappedNode.prototype.getType = function () {
        return this.node.getType();
    };
    WrappedNode.prototype.getBases = function () {
        var base = this.getBase();
        if (base == null)
            return [];
        return __spread([base], base.getBases());
    };
    WrappedNode.prototype.getBase = function () {
        var base = this.node.getBaseClass();
        return base == null ? undefined : this.wrapperFactory.getWrapperNode(base);
    };
    WrappedNode.prototype.getMixins = function () {
        var _this = this;
        var mixins = [];
        var baseTypes = this.node.getBaseTypes();
        try {
            for (var _a = __values(utils_1.ArrayUtils.flatten(baseTypes.map(function (t) { return t.getIntersectionTypes(); }))), _b = _a.next(); !_b.done; _b = _a.next()) {
                var intersectionType = _b.value;
                var interfaces = intersectionType.getSymbolOrThrow().getDeclarations().filter(function (d) { return utils_1.TypeGuards.isInterfaceDeclaration(d); });
                mixins.push.apply(mixins, __spread(interfaces.map(function (i) { return _this.wrapperFactory.getMixin(i); })));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return mixins;
        var e_1, _c;
    };
    WrappedNode.prototype.getAssociatedTsNodes = function () {
        var _this = this;
        var node = this.node;
        var typeChecker = node.global.typeChecker;
        return getFromExtends().map(function (n) {
            if (!utils_1.TypeGuards.isInterfaceDeclaration(n))
                throw new Error("Unexpected node kind: " + n.getKindName());
            return _this.wrapperFactory.getTsNode(n);
        });
        function getFromExtends() {
            var type = getCompilerType();
            return type == null ? [] : getFromType(type);
        }
        function getCompilerType() {
            var extendsExpr = node.getExtends();
            if (extendsExpr == null)
                return undefined;
            var extendsType = extendsExpr.getType();
            var possibleTypes = extendsType.isIntersectionType() ? extendsType.getIntersectionTypes() : [extendsType];
            var nodeType = utils_1.ArrayUtils.find(possibleTypes, function (t) { return common_1.hasDescendantNodeType(t); });
            if (nodeType == null)
                return undefined;
            var typeArgs = nodeType.getTypeArguments();
            if (typeArgs.length === 0)
                return undefined;
            var type = typeArgs[0];
            return type.isTypeParameter() ? type.getDefaultOrThrow() : type;
        }
        function getFromType(type) {
            if (type == null)
                return [];
            var symbol = type.getSymbol();
            if (symbol == null)
                return [];
            return symbol.getDeclarations();
        }
    };
    __decorate([
        utils_1.Memoize
    ], WrappedNode.prototype, "getType", null);
    __decorate([
        utils_1.Memoize
    ], WrappedNode.prototype, "getBases", null);
    __decorate([
        utils_1.Memoize
    ], WrappedNode.prototype, "getBase", null);
    __decorate([
        utils_1.Memoize
    ], WrappedNode.prototype, "getMixins", null);
    __decorate([
        utils_1.Memoize
    ], WrappedNode.prototype, "getAssociatedTsNodes", null);
    return WrappedNode;
}());
exports.WrappedNode = WrappedNode;
