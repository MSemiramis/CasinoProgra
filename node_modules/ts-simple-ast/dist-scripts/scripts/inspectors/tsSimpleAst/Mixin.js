"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = require("../../../src/main");
var utils_1 = require("../../../src/utils");
var Mixin = /** @class */ (function () {
    function Mixin(wrapperFactory, node) {
        this.wrapperFactory = wrapperFactory;
        this.node = node;
    }
    Mixin.prototype.getName = function () {
        return this.node.getName();
    };
    Mixin.prototype.getMixins = function () {
        var _this = this;
        var baseInterfaces = this.node.getBaseDeclarations().filter(function (d) { return utils_1.TypeGuards.isInterfaceDeclaration(d); });
        return baseInterfaces.map(function (i) { return _this.wrapperFactory.getMixin(i); });
    };
    Mixin.prototype.getCoveredTsNodePropertyNames = function () {
        // this is done just to be fast... there's definitely a more correct way of doing this
        var sourceFile = this.node.getSourceFile();
        var propertyAccessExpressions = sourceFile.getDescendantsOfKind(main_1.SyntaxKind.PropertyAccessExpression);
        var names = [];
        try {
            for (var propertyAccessExpressions_1 = __values(propertyAccessExpressions), propertyAccessExpressions_1_1 = propertyAccessExpressions_1.next(); !propertyAccessExpressions_1_1.done; propertyAccessExpressions_1_1 = propertyAccessExpressions_1.next()) {
                var expr = propertyAccessExpressions_1_1.value;
                if (expr.getText() !== "this.compilerNode")
                    continue;
                var parent = expr.getParentIfKindOrThrow(main_1.SyntaxKind.PropertyAccessExpression);
                names.push(parent.getName());
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (propertyAccessExpressions_1_1 && !propertyAccessExpressions_1_1.done && (_a = propertyAccessExpressions_1.return)) _a.call(propertyAccessExpressions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return __spread(names, utils_1.ArrayUtils.flatten(this.getMixins().map(function (m) { return m.getCoveredTsNodePropertyNames(); })));
        var e_1, _a;
    };
    __decorate([
        utils_1.Memoize
    ], Mixin.prototype, "getMixins", null);
    __decorate([
        utils_1.Memoize
    ], Mixin.prototype, "getCoveredTsNodePropertyNames", null);
    return Mixin;
}());
exports.Mixin = Mixin;
