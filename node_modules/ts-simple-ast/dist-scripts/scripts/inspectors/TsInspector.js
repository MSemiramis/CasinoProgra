"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = require("../../src/main");
var utils_1 = require("../../src/utils");
var common_1 = require("../common");
var TsInspector = /** @class */ (function () {
    function TsInspector(wrapperFactory, project) {
        this.wrapperFactory = wrapperFactory;
        this.project = project;
    }
    TsInspector.prototype.getDeclarationFile = function () {
        return this.project.getSourceFileOrThrow("node_modules/typescript/lib/typescript.d.ts");
    };
    TsInspector.prototype.getTsNodes = function () {
        var _this = this;
        var compilerApiFile = this.project.getSourceFileOrThrow("typescript/typescript.ts");
        var interfaces = [];
        try {
            for (var _a = __values(utils_1.ArrayUtils.flatten(compilerApiFile.getNamespaces().map(function (n) { return n.getInterfaces(); }))), _b = _a.next(); !_b.done; _b = _a.next()) {
                var interfaceDec = _b.value;
                if (interfaceDec.getBaseTypes().some(function (t) { return common_1.hasDescendantBaseType(t, function (checkingType) { return checkingType.getText() === "ts.Node"; }); }))
                    interfaces.push(interfaceDec);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return utils_1.ArrayUtils.sortByProperty(interfaces.map(function (i) { return _this.wrapperFactory.getTsNode(i); }), function (item) { return item.getName(); });
        var e_1, _c;
    };
    TsInspector.prototype.getNamesFromKind = function (kind) {
        var kindToNameMappings = this.getKindToNameMappings();
        return __spread(kindToNameMappings[kind]);
    };
    TsInspector.prototype.getKindToNameMappings = function () {
        var kindToNameMappings = {};
        try {
            for (var _a = __values(Object.keys(main_1.SyntaxKind).filter(function (k) { return isNaN(parseInt(k, 10)); })), _b = _a.next(); !_b.done; _b = _a.next()) {
                var name = _b.value;
                var value = main_1.SyntaxKind[name];
                if (kindToNameMappings[value] == null)
                    kindToNameMappings[value] = [];
                kindToNameMappings[value].push(name);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return kindToNameMappings;
        var e_2, _c;
    };
    __decorate([
        utils_1.Memoize
    ], TsInspector.prototype, "getTsNodes", null);
    __decorate([
        utils_1.Memoize
    ], TsInspector.prototype, "getKindToNameMappings", null);
    return TsInspector;
}());
exports.TsInspector = TsInspector;
