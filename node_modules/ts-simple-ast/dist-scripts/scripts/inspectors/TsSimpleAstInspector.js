"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../../src/utils");
var common_1 = require("../common");
var TsSimpleAstInspector = /** @class */ (function () {
    function TsSimpleAstInspector(wrapperFactory, project) {
        this.wrapperFactory = wrapperFactory;
        this.project = project;
    }
    TsSimpleAstInspector.prototype.getProject = function () {
        return this.project;
    };
    TsSimpleAstInspector.prototype.getWrappedNodes = function () {
        var _this = this;
        var compilerSourceFiles = this.project.getSourceFiles("src/compiler/**/*.ts");
        var classes = utils_1.ArrayUtils.flatten(compilerSourceFiles.map(function (f) { return f.getClasses(); }));
        return classes.filter(function (c) { return common_1.isNodeClass(c); }).map(function (c) { return _this.wrapperFactory.getWrapperNode(c); });
    };
    TsSimpleAstInspector.prototype.getMixins = function () {
        var mixins = utils_1.createHashSet();
        try {
            for (var _a = __values(this.getWrappedNodes()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var wrappedNode = _b.value;
                try {
                    for (var _c = __values(wrappedNode.getMixins()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var mixin = _d.value;
                        mixins.add(mixin);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_e = _c.return)) _e.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return utils_1.ArrayUtils.from(mixins.values());
        var e_2, _f, e_1, _e;
    };
    TsSimpleAstInspector.prototype.getPublicDeclarations = function () {
        return this.project.getSourceFileOrThrow("src/main.ts").getExportedDeclarations();
    };
    TsSimpleAstInspector.prototype.getPublicClasses = function () {
        return this.getPublicDeclarations().filter(function (d) { return utils_1.TypeGuards.isClassDeclaration(d); });
    };
    TsSimpleAstInspector.prototype.getPublicInterfaces = function () {
        return this.getPublicDeclarations().filter(function (d) { return utils_1.TypeGuards.isInterfaceDeclaration(d); });
    };
    TsSimpleAstInspector.prototype.getStructures = function () {
        var _this = this;
        var compilerSourceFiles = this.project.getSourceFiles("src/structures/**/*.ts");
        var interfaces = utils_1.ArrayUtils.flatten(compilerSourceFiles.map(function (f) { return f.getInterfaces(); }));
        return interfaces.map(function (i) { return _this.wrapperFactory.getStructure(i); });
    };
    TsSimpleAstInspector.prototype.getOverloadStructures = function () {
        return this.getStructures().filter(function (s) { return s.isOverloadStructure(); });
    };
    TsSimpleAstInspector.prototype.getNodeToWrapperMappings = function () {
        var wrappedNodes = this.getWrappedNodes();
        var sourceFile = this.project.getSourceFileOrThrow("nodeToWrapperMappings.ts");
        var nodeToWrapperMappings = sourceFile.getVariableDeclaration("nodeToWrapperMappings");
        var initializer = nodeToWrapperMappings.getInitializer();
        var propertyAssignments = initializer.getDescendants().filter(function (d) { return utils_1.TypeGuards.isPropertyAssignment(d); });
        var result = {};
        var _loop_1 = function (assignment) {
            var nameNode = assignment.getInitializerOrThrow().getNameNode();
            var wrapperName = nameNode.getText();
            if (result[wrapperName] == null) {
                var wrappedNode = utils_1.ArrayUtils.find(wrappedNodes, function (n) { return n.getName() === wrapperName; });
                if (wrappedNode == null)
                    throw new Error("Could not find the wrapped node for " + wrapperName + ".");
                result[wrapperName] = { wrapperName: wrapperName, wrappedNode: wrappedNode, syntaxKindNames: [] };
            }
            result[wrapperName].syntaxKindNames.push(getSyntaxKindName(assignment));
        };
        try {
            for (var propertyAssignments_1 = __values(propertyAssignments), propertyAssignments_1_1 = propertyAssignments_1.next(); !propertyAssignments_1_1.done; propertyAssignments_1_1 = propertyAssignments_1.next()) {
                var assignment = propertyAssignments_1_1.value;
                _loop_1(assignment);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (propertyAssignments_1_1 && !propertyAssignments_1_1.done && (_a = propertyAssignments_1.return)) _a.call(propertyAssignments_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return Object.keys(result).map(function (k) { return result[k]; });
        function getSyntaxKindName(assignment) {
            var computedPropertyName = assignment.getNameNode();
            var propAccessExpr = computedPropertyName.getExpression();
            return propAccessExpr.getNameNode().getText();
        }
        var e_3, _a;
    };
    __decorate([
        utils_1.Memoize
    ], TsSimpleAstInspector.prototype, "getWrappedNodes", null);
    __decorate([
        utils_1.Memoize
    ], TsSimpleAstInspector.prototype, "getMixins", null);
    __decorate([
        utils_1.Memoize
    ], TsSimpleAstInspector.prototype, "getPublicDeclarations", null);
    __decorate([
        utils_1.Memoize
    ], TsSimpleAstInspector.prototype, "getPublicClasses", null);
    __decorate([
        utils_1.Memoize
    ], TsSimpleAstInspector.prototype, "getPublicInterfaces", null);
    __decorate([
        utils_1.Memoize
    ], TsSimpleAstInspector.prototype, "getStructures", null);
    __decorate([
        utils_1.Memoize
    ], TsSimpleAstInspector.prototype, "getOverloadStructures", null);
    __decorate([
        utils_1.Memoize
    ], TsSimpleAstInspector.prototype, "getNodeToWrapperMappings", null);
    return TsSimpleAstInspector;
}());
exports.TsSimpleAstInspector = TsSimpleAstInspector;
