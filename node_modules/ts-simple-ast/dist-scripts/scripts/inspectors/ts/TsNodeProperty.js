"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = require("../../../src/main");
var utils_1 = require("../../../src/utils");
var TsNodeProperty = /** @class */ (function () {
    function TsNodeProperty(wrapperFactory, node) {
        this.wrapperFactory = wrapperFactory;
        this.node = node;
    }
    TsNodeProperty.prototype.getName = function () {
        return this.node.getName();
    };
    TsNodeProperty.prototype.getTsNode = function () {
        return this.wrapperFactory.getTsNode(this.node.getFirstAncestorByKindOrThrow(main_1.SyntaxKind.InterfaceDeclaration));
    };
    TsNodeProperty.prototype.isReferenced = function () {
        if (this.findReferencedNodes().length > 0)
            return true;
        var wrappedNode = this.getTsNode().getAssociatedWrappedNode();
        if (wrappedNode == null)
            return false;
        var name = this.getName();
        return wrappedNode.getMixins().some(function (m) { return m.getCoveredTsNodePropertyNames().some(function (n) { return n === name; }); });
    };
    TsNodeProperty.prototype.findReferencedNodes = function () {
        var referencedNodes = [];
        var references = this.node.getNameNode().findReferences();
        try {
            for (var _a = __values(utils_1.ArrayUtils.flatten(references.map(function (r) { return r.getReferences(); }))), _b = _a.next(); !_b.done; _b = _a.next()) {
                var reference = _b.value;
                var sourceFile = reference.getSourceFile();
                if (sourceFile.getFilePath().indexOf("compiler") === -1)
                    continue;
                var node = reference.getNode();
                referencedNodes.push(node);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return referencedNodes;
        var e_1, _c;
    };
    __decorate([
        utils_1.Memoize
    ], TsNodeProperty.prototype, "isReferenced", null);
    return TsNodeProperty;
}());
exports.TsNodeProperty = TsNodeProperty;
