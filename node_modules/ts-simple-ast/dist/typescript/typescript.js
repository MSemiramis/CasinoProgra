"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable */
/*
 * TypeScript Compiler Declaration File
 * ====================================
 * DO NOT EDIT - This file is automatically generated by createCompilerApiLayer.ts
 *
 * This file contains the TypeScript compiler declarations slightly modified.
 * Note: The TypeScript compiler is licensed under the Apache 2.0 license.
 */
var tsCompiler = require("typescript");
var ObjectUtils_1 = require("../utils/ObjectUtils");
var SyntaxKind;
(function (SyntaxKind) {
    SyntaxKind[SyntaxKind["Unknown"] = 0] = "Unknown";
    SyntaxKind[SyntaxKind["EndOfFileToken"] = 1] = "EndOfFileToken";
    SyntaxKind[SyntaxKind["SingleLineCommentTrivia"] = 2] = "SingleLineCommentTrivia";
    SyntaxKind[SyntaxKind["MultiLineCommentTrivia"] = 3] = "MultiLineCommentTrivia";
    SyntaxKind[SyntaxKind["NewLineTrivia"] = 4] = "NewLineTrivia";
    SyntaxKind[SyntaxKind["WhitespaceTrivia"] = 5] = "WhitespaceTrivia";
    SyntaxKind[SyntaxKind["ShebangTrivia"] = 6] = "ShebangTrivia";
    SyntaxKind[SyntaxKind["ConflictMarkerTrivia"] = 7] = "ConflictMarkerTrivia";
    SyntaxKind[SyntaxKind["NumericLiteral"] = 8] = "NumericLiteral";
    SyntaxKind[SyntaxKind["StringLiteral"] = 9] = "StringLiteral";
    SyntaxKind[SyntaxKind["JsxText"] = 10] = "JsxText";
    SyntaxKind[SyntaxKind["JsxTextAllWhiteSpaces"] = 11] = "JsxTextAllWhiteSpaces";
    SyntaxKind[SyntaxKind["RegularExpressionLiteral"] = 12] = "RegularExpressionLiteral";
    SyntaxKind[SyntaxKind["NoSubstitutionTemplateLiteral"] = 13] = "NoSubstitutionTemplateLiteral";
    SyntaxKind[SyntaxKind["TemplateHead"] = 14] = "TemplateHead";
    SyntaxKind[SyntaxKind["TemplateMiddle"] = 15] = "TemplateMiddle";
    SyntaxKind[SyntaxKind["TemplateTail"] = 16] = "TemplateTail";
    SyntaxKind[SyntaxKind["OpenBraceToken"] = 17] = "OpenBraceToken";
    SyntaxKind[SyntaxKind["CloseBraceToken"] = 18] = "CloseBraceToken";
    SyntaxKind[SyntaxKind["OpenParenToken"] = 19] = "OpenParenToken";
    SyntaxKind[SyntaxKind["CloseParenToken"] = 20] = "CloseParenToken";
    SyntaxKind[SyntaxKind["OpenBracketToken"] = 21] = "OpenBracketToken";
    SyntaxKind[SyntaxKind["CloseBracketToken"] = 22] = "CloseBracketToken";
    SyntaxKind[SyntaxKind["DotToken"] = 23] = "DotToken";
    SyntaxKind[SyntaxKind["DotDotDotToken"] = 24] = "DotDotDotToken";
    SyntaxKind[SyntaxKind["SemicolonToken"] = 25] = "SemicolonToken";
    SyntaxKind[SyntaxKind["CommaToken"] = 26] = "CommaToken";
    SyntaxKind[SyntaxKind["LessThanToken"] = 27] = "LessThanToken";
    SyntaxKind[SyntaxKind["LessThanSlashToken"] = 28] = "LessThanSlashToken";
    SyntaxKind[SyntaxKind["GreaterThanToken"] = 29] = "GreaterThanToken";
    SyntaxKind[SyntaxKind["LessThanEqualsToken"] = 30] = "LessThanEqualsToken";
    SyntaxKind[SyntaxKind["GreaterThanEqualsToken"] = 31] = "GreaterThanEqualsToken";
    SyntaxKind[SyntaxKind["EqualsEqualsToken"] = 32] = "EqualsEqualsToken";
    SyntaxKind[SyntaxKind["ExclamationEqualsToken"] = 33] = "ExclamationEqualsToken";
    SyntaxKind[SyntaxKind["EqualsEqualsEqualsToken"] = 34] = "EqualsEqualsEqualsToken";
    SyntaxKind[SyntaxKind["ExclamationEqualsEqualsToken"] = 35] = "ExclamationEqualsEqualsToken";
    SyntaxKind[SyntaxKind["EqualsGreaterThanToken"] = 36] = "EqualsGreaterThanToken";
    SyntaxKind[SyntaxKind["PlusToken"] = 37] = "PlusToken";
    SyntaxKind[SyntaxKind["MinusToken"] = 38] = "MinusToken";
    SyntaxKind[SyntaxKind["AsteriskToken"] = 39] = "AsteriskToken";
    SyntaxKind[SyntaxKind["AsteriskAsteriskToken"] = 40] = "AsteriskAsteriskToken";
    SyntaxKind[SyntaxKind["SlashToken"] = 41] = "SlashToken";
    SyntaxKind[SyntaxKind["PercentToken"] = 42] = "PercentToken";
    SyntaxKind[SyntaxKind["PlusPlusToken"] = 43] = "PlusPlusToken";
    SyntaxKind[SyntaxKind["MinusMinusToken"] = 44] = "MinusMinusToken";
    SyntaxKind[SyntaxKind["LessThanLessThanToken"] = 45] = "LessThanLessThanToken";
    SyntaxKind[SyntaxKind["GreaterThanGreaterThanToken"] = 46] = "GreaterThanGreaterThanToken";
    SyntaxKind[SyntaxKind["GreaterThanGreaterThanGreaterThanToken"] = 47] = "GreaterThanGreaterThanGreaterThanToken";
    SyntaxKind[SyntaxKind["AmpersandToken"] = 48] = "AmpersandToken";
    SyntaxKind[SyntaxKind["BarToken"] = 49] = "BarToken";
    SyntaxKind[SyntaxKind["CaretToken"] = 50] = "CaretToken";
    SyntaxKind[SyntaxKind["ExclamationToken"] = 51] = "ExclamationToken";
    SyntaxKind[SyntaxKind["TildeToken"] = 52] = "TildeToken";
    SyntaxKind[SyntaxKind["AmpersandAmpersandToken"] = 53] = "AmpersandAmpersandToken";
    SyntaxKind[SyntaxKind["BarBarToken"] = 54] = "BarBarToken";
    SyntaxKind[SyntaxKind["QuestionToken"] = 55] = "QuestionToken";
    SyntaxKind[SyntaxKind["ColonToken"] = 56] = "ColonToken";
    SyntaxKind[SyntaxKind["AtToken"] = 57] = "AtToken";
    SyntaxKind[SyntaxKind["EqualsToken"] = 58] = "EqualsToken";
    SyntaxKind[SyntaxKind["PlusEqualsToken"] = 59] = "PlusEqualsToken";
    SyntaxKind[SyntaxKind["MinusEqualsToken"] = 60] = "MinusEqualsToken";
    SyntaxKind[SyntaxKind["AsteriskEqualsToken"] = 61] = "AsteriskEqualsToken";
    SyntaxKind[SyntaxKind["AsteriskAsteriskEqualsToken"] = 62] = "AsteriskAsteriskEqualsToken";
    SyntaxKind[SyntaxKind["SlashEqualsToken"] = 63] = "SlashEqualsToken";
    SyntaxKind[SyntaxKind["PercentEqualsToken"] = 64] = "PercentEqualsToken";
    SyntaxKind[SyntaxKind["LessThanLessThanEqualsToken"] = 65] = "LessThanLessThanEqualsToken";
    SyntaxKind[SyntaxKind["GreaterThanGreaterThanEqualsToken"] = 66] = "GreaterThanGreaterThanEqualsToken";
    SyntaxKind[SyntaxKind["GreaterThanGreaterThanGreaterThanEqualsToken"] = 67] = "GreaterThanGreaterThanGreaterThanEqualsToken";
    SyntaxKind[SyntaxKind["AmpersandEqualsToken"] = 68] = "AmpersandEqualsToken";
    SyntaxKind[SyntaxKind["BarEqualsToken"] = 69] = "BarEqualsToken";
    SyntaxKind[SyntaxKind["CaretEqualsToken"] = 70] = "CaretEqualsToken";
    SyntaxKind[SyntaxKind["Identifier"] = 71] = "Identifier";
    SyntaxKind[SyntaxKind["BreakKeyword"] = 72] = "BreakKeyword";
    SyntaxKind[SyntaxKind["CaseKeyword"] = 73] = "CaseKeyword";
    SyntaxKind[SyntaxKind["CatchKeyword"] = 74] = "CatchKeyword";
    SyntaxKind[SyntaxKind["ClassKeyword"] = 75] = "ClassKeyword";
    SyntaxKind[SyntaxKind["ConstKeyword"] = 76] = "ConstKeyword";
    SyntaxKind[SyntaxKind["ContinueKeyword"] = 77] = "ContinueKeyword";
    SyntaxKind[SyntaxKind["DebuggerKeyword"] = 78] = "DebuggerKeyword";
    SyntaxKind[SyntaxKind["DefaultKeyword"] = 79] = "DefaultKeyword";
    SyntaxKind[SyntaxKind["DeleteKeyword"] = 80] = "DeleteKeyword";
    SyntaxKind[SyntaxKind["DoKeyword"] = 81] = "DoKeyword";
    SyntaxKind[SyntaxKind["ElseKeyword"] = 82] = "ElseKeyword";
    SyntaxKind[SyntaxKind["EnumKeyword"] = 83] = "EnumKeyword";
    SyntaxKind[SyntaxKind["ExportKeyword"] = 84] = "ExportKeyword";
    SyntaxKind[SyntaxKind["ExtendsKeyword"] = 85] = "ExtendsKeyword";
    SyntaxKind[SyntaxKind["FalseKeyword"] = 86] = "FalseKeyword";
    SyntaxKind[SyntaxKind["FinallyKeyword"] = 87] = "FinallyKeyword";
    SyntaxKind[SyntaxKind["ForKeyword"] = 88] = "ForKeyword";
    SyntaxKind[SyntaxKind["FunctionKeyword"] = 89] = "FunctionKeyword";
    SyntaxKind[SyntaxKind["IfKeyword"] = 90] = "IfKeyword";
    SyntaxKind[SyntaxKind["ImportKeyword"] = 91] = "ImportKeyword";
    SyntaxKind[SyntaxKind["InKeyword"] = 92] = "InKeyword";
    SyntaxKind[SyntaxKind["InstanceOfKeyword"] = 93] = "InstanceOfKeyword";
    SyntaxKind[SyntaxKind["NewKeyword"] = 94] = "NewKeyword";
    SyntaxKind[SyntaxKind["NullKeyword"] = 95] = "NullKeyword";
    SyntaxKind[SyntaxKind["ReturnKeyword"] = 96] = "ReturnKeyword";
    SyntaxKind[SyntaxKind["SuperKeyword"] = 97] = "SuperKeyword";
    SyntaxKind[SyntaxKind["SwitchKeyword"] = 98] = "SwitchKeyword";
    SyntaxKind[SyntaxKind["ThisKeyword"] = 99] = "ThisKeyword";
    SyntaxKind[SyntaxKind["ThrowKeyword"] = 100] = "ThrowKeyword";
    SyntaxKind[SyntaxKind["TrueKeyword"] = 101] = "TrueKeyword";
    SyntaxKind[SyntaxKind["TryKeyword"] = 102] = "TryKeyword";
    SyntaxKind[SyntaxKind["TypeOfKeyword"] = 103] = "TypeOfKeyword";
    SyntaxKind[SyntaxKind["VarKeyword"] = 104] = "VarKeyword";
    SyntaxKind[SyntaxKind["VoidKeyword"] = 105] = "VoidKeyword";
    SyntaxKind[SyntaxKind["WhileKeyword"] = 106] = "WhileKeyword";
    SyntaxKind[SyntaxKind["WithKeyword"] = 107] = "WithKeyword";
    SyntaxKind[SyntaxKind["ImplementsKeyword"] = 108] = "ImplementsKeyword";
    SyntaxKind[SyntaxKind["InterfaceKeyword"] = 109] = "InterfaceKeyword";
    SyntaxKind[SyntaxKind["LetKeyword"] = 110] = "LetKeyword";
    SyntaxKind[SyntaxKind["PackageKeyword"] = 111] = "PackageKeyword";
    SyntaxKind[SyntaxKind["PrivateKeyword"] = 112] = "PrivateKeyword";
    SyntaxKind[SyntaxKind["ProtectedKeyword"] = 113] = "ProtectedKeyword";
    SyntaxKind[SyntaxKind["PublicKeyword"] = 114] = "PublicKeyword";
    SyntaxKind[SyntaxKind["StaticKeyword"] = 115] = "StaticKeyword";
    SyntaxKind[SyntaxKind["YieldKeyword"] = 116] = "YieldKeyword";
    SyntaxKind[SyntaxKind["AbstractKeyword"] = 117] = "AbstractKeyword";
    SyntaxKind[SyntaxKind["AsKeyword"] = 118] = "AsKeyword";
    SyntaxKind[SyntaxKind["AnyKeyword"] = 119] = "AnyKeyword";
    SyntaxKind[SyntaxKind["AsyncKeyword"] = 120] = "AsyncKeyword";
    SyntaxKind[SyntaxKind["AwaitKeyword"] = 121] = "AwaitKeyword";
    SyntaxKind[SyntaxKind["BooleanKeyword"] = 122] = "BooleanKeyword";
    SyntaxKind[SyntaxKind["ConstructorKeyword"] = 123] = "ConstructorKeyword";
    SyntaxKind[SyntaxKind["DeclareKeyword"] = 124] = "DeclareKeyword";
    SyntaxKind[SyntaxKind["GetKeyword"] = 125] = "GetKeyword";
    SyntaxKind[SyntaxKind["IsKeyword"] = 126] = "IsKeyword";
    SyntaxKind[SyntaxKind["KeyOfKeyword"] = 127] = "KeyOfKeyword";
    SyntaxKind[SyntaxKind["ModuleKeyword"] = 128] = "ModuleKeyword";
    SyntaxKind[SyntaxKind["NamespaceKeyword"] = 129] = "NamespaceKeyword";
    SyntaxKind[SyntaxKind["NeverKeyword"] = 130] = "NeverKeyword";
    SyntaxKind[SyntaxKind["ReadonlyKeyword"] = 131] = "ReadonlyKeyword";
    SyntaxKind[SyntaxKind["RequireKeyword"] = 132] = "RequireKeyword";
    SyntaxKind[SyntaxKind["NumberKeyword"] = 133] = "NumberKeyword";
    SyntaxKind[SyntaxKind["ObjectKeyword"] = 134] = "ObjectKeyword";
    SyntaxKind[SyntaxKind["SetKeyword"] = 135] = "SetKeyword";
    SyntaxKind[SyntaxKind["StringKeyword"] = 136] = "StringKeyword";
    SyntaxKind[SyntaxKind["SymbolKeyword"] = 137] = "SymbolKeyword";
    SyntaxKind[SyntaxKind["TypeKeyword"] = 138] = "TypeKeyword";
    SyntaxKind[SyntaxKind["UndefinedKeyword"] = 139] = "UndefinedKeyword";
    SyntaxKind[SyntaxKind["UniqueKeyword"] = 140] = "UniqueKeyword";
    SyntaxKind[SyntaxKind["FromKeyword"] = 141] = "FromKeyword";
    SyntaxKind[SyntaxKind["GlobalKeyword"] = 142] = "GlobalKeyword";
    SyntaxKind[SyntaxKind["OfKeyword"] = 143] = "OfKeyword";
    SyntaxKind[SyntaxKind["QualifiedName"] = 144] = "QualifiedName";
    SyntaxKind[SyntaxKind["ComputedPropertyName"] = 145] = "ComputedPropertyName";
    SyntaxKind[SyntaxKind["TypeParameter"] = 146] = "TypeParameter";
    SyntaxKind[SyntaxKind["Parameter"] = 147] = "Parameter";
    SyntaxKind[SyntaxKind["Decorator"] = 148] = "Decorator";
    SyntaxKind[SyntaxKind["PropertySignature"] = 149] = "PropertySignature";
    SyntaxKind[SyntaxKind["PropertyDeclaration"] = 150] = "PropertyDeclaration";
    SyntaxKind[SyntaxKind["MethodSignature"] = 151] = "MethodSignature";
    SyntaxKind[SyntaxKind["MethodDeclaration"] = 152] = "MethodDeclaration";
    SyntaxKind[SyntaxKind["Constructor"] = 153] = "Constructor";
    SyntaxKind[SyntaxKind["GetAccessor"] = 154] = "GetAccessor";
    SyntaxKind[SyntaxKind["SetAccessor"] = 155] = "SetAccessor";
    SyntaxKind[SyntaxKind["CallSignature"] = 156] = "CallSignature";
    SyntaxKind[SyntaxKind["ConstructSignature"] = 157] = "ConstructSignature";
    SyntaxKind[SyntaxKind["IndexSignature"] = 158] = "IndexSignature";
    SyntaxKind[SyntaxKind["TypePredicate"] = 159] = "TypePredicate";
    SyntaxKind[SyntaxKind["TypeReference"] = 160] = "TypeReference";
    SyntaxKind[SyntaxKind["FunctionType"] = 161] = "FunctionType";
    SyntaxKind[SyntaxKind["ConstructorType"] = 162] = "ConstructorType";
    SyntaxKind[SyntaxKind["TypeQuery"] = 163] = "TypeQuery";
    SyntaxKind[SyntaxKind["TypeLiteral"] = 164] = "TypeLiteral";
    SyntaxKind[SyntaxKind["ArrayType"] = 165] = "ArrayType";
    SyntaxKind[SyntaxKind["TupleType"] = 166] = "TupleType";
    SyntaxKind[SyntaxKind["UnionType"] = 167] = "UnionType";
    SyntaxKind[SyntaxKind["IntersectionType"] = 168] = "IntersectionType";
    SyntaxKind[SyntaxKind["ParenthesizedType"] = 169] = "ParenthesizedType";
    SyntaxKind[SyntaxKind["ThisType"] = 170] = "ThisType";
    SyntaxKind[SyntaxKind["TypeOperator"] = 171] = "TypeOperator";
    SyntaxKind[SyntaxKind["IndexedAccessType"] = 172] = "IndexedAccessType";
    SyntaxKind[SyntaxKind["MappedType"] = 173] = "MappedType";
    SyntaxKind[SyntaxKind["LiteralType"] = 174] = "LiteralType";
    SyntaxKind[SyntaxKind["ObjectBindingPattern"] = 175] = "ObjectBindingPattern";
    SyntaxKind[SyntaxKind["ArrayBindingPattern"] = 176] = "ArrayBindingPattern";
    SyntaxKind[SyntaxKind["BindingElement"] = 177] = "BindingElement";
    SyntaxKind[SyntaxKind["ArrayLiteralExpression"] = 178] = "ArrayLiteralExpression";
    SyntaxKind[SyntaxKind["ObjectLiteralExpression"] = 179] = "ObjectLiteralExpression";
    SyntaxKind[SyntaxKind["PropertyAccessExpression"] = 180] = "PropertyAccessExpression";
    SyntaxKind[SyntaxKind["ElementAccessExpression"] = 181] = "ElementAccessExpression";
    SyntaxKind[SyntaxKind["CallExpression"] = 182] = "CallExpression";
    SyntaxKind[SyntaxKind["NewExpression"] = 183] = "NewExpression";
    SyntaxKind[SyntaxKind["TaggedTemplateExpression"] = 184] = "TaggedTemplateExpression";
    SyntaxKind[SyntaxKind["TypeAssertionExpression"] = 185] = "TypeAssertionExpression";
    SyntaxKind[SyntaxKind["ParenthesizedExpression"] = 186] = "ParenthesizedExpression";
    SyntaxKind[SyntaxKind["FunctionExpression"] = 187] = "FunctionExpression";
    SyntaxKind[SyntaxKind["ArrowFunction"] = 188] = "ArrowFunction";
    SyntaxKind[SyntaxKind["DeleteExpression"] = 189] = "DeleteExpression";
    SyntaxKind[SyntaxKind["TypeOfExpression"] = 190] = "TypeOfExpression";
    SyntaxKind[SyntaxKind["VoidExpression"] = 191] = "VoidExpression";
    SyntaxKind[SyntaxKind["AwaitExpression"] = 192] = "AwaitExpression";
    SyntaxKind[SyntaxKind["PrefixUnaryExpression"] = 193] = "PrefixUnaryExpression";
    SyntaxKind[SyntaxKind["PostfixUnaryExpression"] = 194] = "PostfixUnaryExpression";
    SyntaxKind[SyntaxKind["BinaryExpression"] = 195] = "BinaryExpression";
    SyntaxKind[SyntaxKind["ConditionalExpression"] = 196] = "ConditionalExpression";
    SyntaxKind[SyntaxKind["TemplateExpression"] = 197] = "TemplateExpression";
    SyntaxKind[SyntaxKind["YieldExpression"] = 198] = "YieldExpression";
    SyntaxKind[SyntaxKind["SpreadElement"] = 199] = "SpreadElement";
    SyntaxKind[SyntaxKind["ClassExpression"] = 200] = "ClassExpression";
    SyntaxKind[SyntaxKind["OmittedExpression"] = 201] = "OmittedExpression";
    SyntaxKind[SyntaxKind["ExpressionWithTypeArguments"] = 202] = "ExpressionWithTypeArguments";
    SyntaxKind[SyntaxKind["AsExpression"] = 203] = "AsExpression";
    SyntaxKind[SyntaxKind["NonNullExpression"] = 204] = "NonNullExpression";
    SyntaxKind[SyntaxKind["MetaProperty"] = 205] = "MetaProperty";
    SyntaxKind[SyntaxKind["TemplateSpan"] = 206] = "TemplateSpan";
    SyntaxKind[SyntaxKind["SemicolonClassElement"] = 207] = "SemicolonClassElement";
    SyntaxKind[SyntaxKind["Block"] = 208] = "Block";
    SyntaxKind[SyntaxKind["VariableStatement"] = 209] = "VariableStatement";
    SyntaxKind[SyntaxKind["EmptyStatement"] = 210] = "EmptyStatement";
    SyntaxKind[SyntaxKind["ExpressionStatement"] = 211] = "ExpressionStatement";
    SyntaxKind[SyntaxKind["IfStatement"] = 212] = "IfStatement";
    SyntaxKind[SyntaxKind["DoStatement"] = 213] = "DoStatement";
    SyntaxKind[SyntaxKind["WhileStatement"] = 214] = "WhileStatement";
    SyntaxKind[SyntaxKind["ForStatement"] = 215] = "ForStatement";
    SyntaxKind[SyntaxKind["ForInStatement"] = 216] = "ForInStatement";
    SyntaxKind[SyntaxKind["ForOfStatement"] = 217] = "ForOfStatement";
    SyntaxKind[SyntaxKind["ContinueStatement"] = 218] = "ContinueStatement";
    SyntaxKind[SyntaxKind["BreakStatement"] = 219] = "BreakStatement";
    SyntaxKind[SyntaxKind["ReturnStatement"] = 220] = "ReturnStatement";
    SyntaxKind[SyntaxKind["WithStatement"] = 221] = "WithStatement";
    SyntaxKind[SyntaxKind["SwitchStatement"] = 222] = "SwitchStatement";
    SyntaxKind[SyntaxKind["LabeledStatement"] = 223] = "LabeledStatement";
    SyntaxKind[SyntaxKind["ThrowStatement"] = 224] = "ThrowStatement";
    SyntaxKind[SyntaxKind["TryStatement"] = 225] = "TryStatement";
    SyntaxKind[SyntaxKind["DebuggerStatement"] = 226] = "DebuggerStatement";
    SyntaxKind[SyntaxKind["VariableDeclaration"] = 227] = "VariableDeclaration";
    SyntaxKind[SyntaxKind["VariableDeclarationList"] = 228] = "VariableDeclarationList";
    SyntaxKind[SyntaxKind["FunctionDeclaration"] = 229] = "FunctionDeclaration";
    SyntaxKind[SyntaxKind["ClassDeclaration"] = 230] = "ClassDeclaration";
    SyntaxKind[SyntaxKind["InterfaceDeclaration"] = 231] = "InterfaceDeclaration";
    SyntaxKind[SyntaxKind["TypeAliasDeclaration"] = 232] = "TypeAliasDeclaration";
    SyntaxKind[SyntaxKind["EnumDeclaration"] = 233] = "EnumDeclaration";
    SyntaxKind[SyntaxKind["ModuleDeclaration"] = 234] = "ModuleDeclaration";
    SyntaxKind[SyntaxKind["ModuleBlock"] = 235] = "ModuleBlock";
    SyntaxKind[SyntaxKind["CaseBlock"] = 236] = "CaseBlock";
    SyntaxKind[SyntaxKind["NamespaceExportDeclaration"] = 237] = "NamespaceExportDeclaration";
    SyntaxKind[SyntaxKind["ImportEqualsDeclaration"] = 238] = "ImportEqualsDeclaration";
    SyntaxKind[SyntaxKind["ImportDeclaration"] = 239] = "ImportDeclaration";
    SyntaxKind[SyntaxKind["ImportClause"] = 240] = "ImportClause";
    SyntaxKind[SyntaxKind["NamespaceImport"] = 241] = "NamespaceImport";
    SyntaxKind[SyntaxKind["NamedImports"] = 242] = "NamedImports";
    SyntaxKind[SyntaxKind["ImportSpecifier"] = 243] = "ImportSpecifier";
    SyntaxKind[SyntaxKind["ExportAssignment"] = 244] = "ExportAssignment";
    SyntaxKind[SyntaxKind["ExportDeclaration"] = 245] = "ExportDeclaration";
    SyntaxKind[SyntaxKind["NamedExports"] = 246] = "NamedExports";
    SyntaxKind[SyntaxKind["ExportSpecifier"] = 247] = "ExportSpecifier";
    SyntaxKind[SyntaxKind["MissingDeclaration"] = 248] = "MissingDeclaration";
    SyntaxKind[SyntaxKind["ExternalModuleReference"] = 249] = "ExternalModuleReference";
    SyntaxKind[SyntaxKind["JsxElement"] = 250] = "JsxElement";
    SyntaxKind[SyntaxKind["JsxSelfClosingElement"] = 251] = "JsxSelfClosingElement";
    SyntaxKind[SyntaxKind["JsxOpeningElement"] = 252] = "JsxOpeningElement";
    SyntaxKind[SyntaxKind["JsxClosingElement"] = 253] = "JsxClosingElement";
    SyntaxKind[SyntaxKind["JsxFragment"] = 254] = "JsxFragment";
    SyntaxKind[SyntaxKind["JsxOpeningFragment"] = 255] = "JsxOpeningFragment";
    SyntaxKind[SyntaxKind["JsxClosingFragment"] = 256] = "JsxClosingFragment";
    SyntaxKind[SyntaxKind["JsxAttribute"] = 257] = "JsxAttribute";
    SyntaxKind[SyntaxKind["JsxAttributes"] = 258] = "JsxAttributes";
    SyntaxKind[SyntaxKind["JsxSpreadAttribute"] = 259] = "JsxSpreadAttribute";
    SyntaxKind[SyntaxKind["JsxExpression"] = 260] = "JsxExpression";
    SyntaxKind[SyntaxKind["CaseClause"] = 261] = "CaseClause";
    SyntaxKind[SyntaxKind["DefaultClause"] = 262] = "DefaultClause";
    SyntaxKind[SyntaxKind["HeritageClause"] = 263] = "HeritageClause";
    SyntaxKind[SyntaxKind["CatchClause"] = 264] = "CatchClause";
    SyntaxKind[SyntaxKind["PropertyAssignment"] = 265] = "PropertyAssignment";
    SyntaxKind[SyntaxKind["ShorthandPropertyAssignment"] = 266] = "ShorthandPropertyAssignment";
    SyntaxKind[SyntaxKind["SpreadAssignment"] = 267] = "SpreadAssignment";
    SyntaxKind[SyntaxKind["EnumMember"] = 268] = "EnumMember";
    SyntaxKind[SyntaxKind["SourceFile"] = 269] = "SourceFile";
    SyntaxKind[SyntaxKind["Bundle"] = 270] = "Bundle";
    SyntaxKind[SyntaxKind["JSDocTypeExpression"] = 271] = "JSDocTypeExpression";
    SyntaxKind[SyntaxKind["JSDocAllType"] = 272] = "JSDocAllType";
    SyntaxKind[SyntaxKind["JSDocUnknownType"] = 273] = "JSDocUnknownType";
    SyntaxKind[SyntaxKind["JSDocNullableType"] = 274] = "JSDocNullableType";
    SyntaxKind[SyntaxKind["JSDocNonNullableType"] = 275] = "JSDocNonNullableType";
    SyntaxKind[SyntaxKind["JSDocOptionalType"] = 276] = "JSDocOptionalType";
    SyntaxKind[SyntaxKind["JSDocFunctionType"] = 277] = "JSDocFunctionType";
    SyntaxKind[SyntaxKind["JSDocVariadicType"] = 278] = "JSDocVariadicType";
    SyntaxKind[SyntaxKind["JSDocComment"] = 279] = "JSDocComment";
    SyntaxKind[SyntaxKind["JSDocTypeLiteral"] = 280] = "JSDocTypeLiteral";
    SyntaxKind[SyntaxKind["JSDocTag"] = 281] = "JSDocTag";
    SyntaxKind[SyntaxKind["JSDocAugmentsTag"] = 282] = "JSDocAugmentsTag";
    SyntaxKind[SyntaxKind["JSDocClassTag"] = 283] = "JSDocClassTag";
    SyntaxKind[SyntaxKind["JSDocParameterTag"] = 284] = "JSDocParameterTag";
    SyntaxKind[SyntaxKind["JSDocReturnTag"] = 285] = "JSDocReturnTag";
    SyntaxKind[SyntaxKind["JSDocTypeTag"] = 286] = "JSDocTypeTag";
    SyntaxKind[SyntaxKind["JSDocTemplateTag"] = 287] = "JSDocTemplateTag";
    SyntaxKind[SyntaxKind["JSDocTypedefTag"] = 288] = "JSDocTypedefTag";
    SyntaxKind[SyntaxKind["JSDocPropertyTag"] = 289] = "JSDocPropertyTag";
    SyntaxKind[SyntaxKind["SyntaxList"] = 290] = "SyntaxList";
    SyntaxKind[SyntaxKind["NotEmittedStatement"] = 291] = "NotEmittedStatement";
    SyntaxKind[SyntaxKind["PartiallyEmittedExpression"] = 292] = "PartiallyEmittedExpression";
    SyntaxKind[SyntaxKind["CommaListExpression"] = 293] = "CommaListExpression";
    SyntaxKind[SyntaxKind["MergeDeclarationMarker"] = 294] = "MergeDeclarationMarker";
    SyntaxKind[SyntaxKind["EndOfDeclarationMarker"] = 295] = "EndOfDeclarationMarker";
    SyntaxKind[SyntaxKind["Count"] = 296] = "Count";
    SyntaxKind[SyntaxKind["FirstAssignment"] = 58] = "FirstAssignment";
    SyntaxKind[SyntaxKind["LastAssignment"] = 70] = "LastAssignment";
    SyntaxKind[SyntaxKind["FirstCompoundAssignment"] = 59] = "FirstCompoundAssignment";
    SyntaxKind[SyntaxKind["LastCompoundAssignment"] = 70] = "LastCompoundAssignment";
    SyntaxKind[SyntaxKind["FirstReservedWord"] = 72] = "FirstReservedWord";
    SyntaxKind[SyntaxKind["LastReservedWord"] = 107] = "LastReservedWord";
    SyntaxKind[SyntaxKind["FirstKeyword"] = 72] = "FirstKeyword";
    SyntaxKind[SyntaxKind["LastKeyword"] = 143] = "LastKeyword";
    SyntaxKind[SyntaxKind["FirstFutureReservedWord"] = 108] = "FirstFutureReservedWord";
    SyntaxKind[SyntaxKind["LastFutureReservedWord"] = 116] = "LastFutureReservedWord";
    SyntaxKind[SyntaxKind["FirstTypeNode"] = 159] = "FirstTypeNode";
    SyntaxKind[SyntaxKind["LastTypeNode"] = 174] = "LastTypeNode";
    SyntaxKind[SyntaxKind["FirstPunctuation"] = 17] = "FirstPunctuation";
    SyntaxKind[SyntaxKind["LastPunctuation"] = 70] = "LastPunctuation";
    SyntaxKind[SyntaxKind["FirstToken"] = 0] = "FirstToken";
    SyntaxKind[SyntaxKind["LastToken"] = 143] = "LastToken";
    SyntaxKind[SyntaxKind["FirstTriviaToken"] = 2] = "FirstTriviaToken";
    SyntaxKind[SyntaxKind["LastTriviaToken"] = 7] = "LastTriviaToken";
    SyntaxKind[SyntaxKind["FirstLiteralToken"] = 8] = "FirstLiteralToken";
    SyntaxKind[SyntaxKind["LastLiteralToken"] = 13] = "LastLiteralToken";
    SyntaxKind[SyntaxKind["FirstTemplateToken"] = 13] = "FirstTemplateToken";
    SyntaxKind[SyntaxKind["LastTemplateToken"] = 16] = "LastTemplateToken";
    SyntaxKind[SyntaxKind["FirstBinaryOperator"] = 27] = "FirstBinaryOperator";
    SyntaxKind[SyntaxKind["LastBinaryOperator"] = 70] = "LastBinaryOperator";
    SyntaxKind[SyntaxKind["FirstNode"] = 144] = "FirstNode";
    SyntaxKind[SyntaxKind["FirstJSDocNode"] = 271] = "FirstJSDocNode";
    SyntaxKind[SyntaxKind["LastJSDocNode"] = 289] = "LastJSDocNode";
    SyntaxKind[SyntaxKind["FirstJSDocTagNode"] = 281] = "FirstJSDocTagNode";
    SyntaxKind[SyntaxKind["LastJSDocTagNode"] = 289] = "LastJSDocTagNode";
})(/* istanbul ignore next */SyntaxKind = exports.SyntaxKind || (exports.SyntaxKind = {}));
var TypeFormatFlags;
(function (TypeFormatFlags) {
    TypeFormatFlags[TypeFormatFlags["None"] = 0] = "None";
    TypeFormatFlags[TypeFormatFlags["NoTruncation"] = 1] = "NoTruncation";
    TypeFormatFlags[TypeFormatFlags["WriteArrayAsGenericType"] = 2] = "WriteArrayAsGenericType";
    TypeFormatFlags[TypeFormatFlags["WriteDefaultSymbolWithoutName"] = 4] = "WriteDefaultSymbolWithoutName";
    TypeFormatFlags[TypeFormatFlags["UseStructuralFallback"] = 8] = "UseStructuralFallback";
    TypeFormatFlags[TypeFormatFlags["WriteTypeArgumentsOfSignature"] = 32] = "WriteTypeArgumentsOfSignature";
    TypeFormatFlags[TypeFormatFlags["UseFullyQualifiedType"] = 64] = "UseFullyQualifiedType";
    TypeFormatFlags[TypeFormatFlags["SuppressAnyReturnType"] = 256] = "SuppressAnyReturnType";
    TypeFormatFlags[TypeFormatFlags["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";
    TypeFormatFlags[TypeFormatFlags["WriteClassExpressionAsTypeLiteral"] = 2048] = "WriteClassExpressionAsTypeLiteral";
    TypeFormatFlags[TypeFormatFlags["UseTypeOfFunction"] = 4096] = "UseTypeOfFunction";
    TypeFormatFlags[TypeFormatFlags["OmitParameterModifiers"] = 8192] = "OmitParameterModifiers";
    TypeFormatFlags[TypeFormatFlags["UseAliasDefinedOutsideCurrentScope"] = 16384] = "UseAliasDefinedOutsideCurrentScope";
    TypeFormatFlags[TypeFormatFlags["AllowUniqueESSymbolType"] = 1048576] = "AllowUniqueESSymbolType";
    TypeFormatFlags[TypeFormatFlags["AddUndefined"] = 131072] = "AddUndefined";
    TypeFormatFlags[TypeFormatFlags["WriteArrowStyleSignature"] = 262144] = "WriteArrowStyleSignature";
    TypeFormatFlags[TypeFormatFlags["InArrayType"] = 524288] = "InArrayType";
    TypeFormatFlags[TypeFormatFlags["InElementType"] = 2097152] = "InElementType";
    TypeFormatFlags[TypeFormatFlags["InFirstTypeArgument"] = 4194304] = "InFirstTypeArgument";
    TypeFormatFlags[TypeFormatFlags["InTypeAlias"] = 8388608] = "InTypeAlias";
    /**
     * @deprecated
     */
    TypeFormatFlags[TypeFormatFlags["WriteOwnNameForAnyLike"] = 0] = "WriteOwnNameForAnyLike";
    TypeFormatFlags[TypeFormatFlags["NodeBuilderFlagsMask"] = 9469295] = "NodeBuilderFlagsMask";
})(/* istanbul ignore next */TypeFormatFlags = exports.TypeFormatFlags || (exports.TypeFormatFlags = {}));
var SymbolFlags;
(function (SymbolFlags) {
    SymbolFlags[SymbolFlags["None"] = 0] = "None";
    SymbolFlags[SymbolFlags["FunctionScopedVariable"] = 1] = "FunctionScopedVariable";
    SymbolFlags[SymbolFlags["BlockScopedVariable"] = 2] = "BlockScopedVariable";
    SymbolFlags[SymbolFlags["Property"] = 4] = "Property";
    SymbolFlags[SymbolFlags["EnumMember"] = 8] = "EnumMember";
    SymbolFlags[SymbolFlags["Function"] = 16] = "Function";
    SymbolFlags[SymbolFlags["Class"] = 32] = "Class";
    SymbolFlags[SymbolFlags["Interface"] = 64] = "Interface";
    SymbolFlags[SymbolFlags["ConstEnum"] = 128] = "ConstEnum";
    SymbolFlags[SymbolFlags["RegularEnum"] = 256] = "RegularEnum";
    SymbolFlags[SymbolFlags["ValueModule"] = 512] = "ValueModule";
    SymbolFlags[SymbolFlags["NamespaceModule"] = 1024] = "NamespaceModule";
    SymbolFlags[SymbolFlags["TypeLiteral"] = 2048] = "TypeLiteral";
    SymbolFlags[SymbolFlags["ObjectLiteral"] = 4096] = "ObjectLiteral";
    SymbolFlags[SymbolFlags["Method"] = 8192] = "Method";
    SymbolFlags[SymbolFlags["Constructor"] = 16384] = "Constructor";
    SymbolFlags[SymbolFlags["GetAccessor"] = 32768] = "GetAccessor";
    SymbolFlags[SymbolFlags["SetAccessor"] = 65536] = "SetAccessor";
    SymbolFlags[SymbolFlags["Signature"] = 131072] = "Signature";
    SymbolFlags[SymbolFlags["TypeParameter"] = 262144] = "TypeParameter";
    SymbolFlags[SymbolFlags["TypeAlias"] = 524288] = "TypeAlias";
    SymbolFlags[SymbolFlags["ExportValue"] = 1048576] = "ExportValue";
    SymbolFlags[SymbolFlags["Alias"] = 2097152] = "Alias";
    SymbolFlags[SymbolFlags["Prototype"] = 4194304] = "Prototype";
    SymbolFlags[SymbolFlags["ExportStar"] = 8388608] = "ExportStar";
    SymbolFlags[SymbolFlags["Optional"] = 16777216] = "Optional";
    SymbolFlags[SymbolFlags["Transient"] = 33554432] = "Transient";
    SymbolFlags[SymbolFlags["JSContainer"] = 67108864] = "JSContainer";
    SymbolFlags[SymbolFlags["Enum"] = 384] = "Enum";
    SymbolFlags[SymbolFlags["Variable"] = 3] = "Variable";
    SymbolFlags[SymbolFlags["Value"] = 107455] = "Value";
    SymbolFlags[SymbolFlags["Type"] = 793064] = "Type";
    SymbolFlags[SymbolFlags["Namespace"] = 1920] = "Namespace";
    SymbolFlags[SymbolFlags["Module"] = 1536] = "Module";
    SymbolFlags[SymbolFlags["Accessor"] = 98304] = "Accessor";
    SymbolFlags[SymbolFlags["FunctionScopedVariableExcludes"] = 107454] = "FunctionScopedVariableExcludes";
    SymbolFlags[SymbolFlags["BlockScopedVariableExcludes"] = 107455] = "BlockScopedVariableExcludes";
    SymbolFlags[SymbolFlags["ParameterExcludes"] = 107455] = "ParameterExcludes";
    SymbolFlags[SymbolFlags["PropertyExcludes"] = 0] = "PropertyExcludes";
    SymbolFlags[SymbolFlags["EnumMemberExcludes"] = 900095] = "EnumMemberExcludes";
    SymbolFlags[SymbolFlags["FunctionExcludes"] = 106927] = "FunctionExcludes";
    SymbolFlags[SymbolFlags["ClassExcludes"] = 899519] = "ClassExcludes";
    SymbolFlags[SymbolFlags["InterfaceExcludes"] = 792968] = "InterfaceExcludes";
    SymbolFlags[SymbolFlags["RegularEnumExcludes"] = 899327] = "RegularEnumExcludes";
    SymbolFlags[SymbolFlags["ConstEnumExcludes"] = 899967] = "ConstEnumExcludes";
    SymbolFlags[SymbolFlags["ValueModuleExcludes"] = 106639] = "ValueModuleExcludes";
    SymbolFlags[SymbolFlags["NamespaceModuleExcludes"] = 0] = "NamespaceModuleExcludes";
    SymbolFlags[SymbolFlags["MethodExcludes"] = 99263] = "MethodExcludes";
    SymbolFlags[SymbolFlags["GetAccessorExcludes"] = 41919] = "GetAccessorExcludes";
    SymbolFlags[SymbolFlags["SetAccessorExcludes"] = 74687] = "SetAccessorExcludes";
    SymbolFlags[SymbolFlags["TypeParameterExcludes"] = 530920] = "TypeParameterExcludes";
    SymbolFlags[SymbolFlags["TypeAliasExcludes"] = 793064] = "TypeAliasExcludes";
    SymbolFlags[SymbolFlags["AliasExcludes"] = 2097152] = "AliasExcludes";
    SymbolFlags[SymbolFlags["ModuleMember"] = 2623475] = "ModuleMember";
    SymbolFlags[SymbolFlags["ExportHasLocal"] = 944] = "ExportHasLocal";
    SymbolFlags[SymbolFlags["HasExports"] = 1952] = "HasExports";
    SymbolFlags[SymbolFlags["HasMembers"] = 6240] = "HasMembers";
    SymbolFlags[SymbolFlags["BlockScoped"] = 418] = "BlockScoped";
    SymbolFlags[SymbolFlags["PropertyOrAccessor"] = 98308] = "PropertyOrAccessor";
    SymbolFlags[SymbolFlags["ClassMember"] = 106500] = "ClassMember";
})(/* istanbul ignore next */SymbolFlags = exports.SymbolFlags || (exports.SymbolFlags = {}));
var TypeFlags;
(function (TypeFlags) {
    TypeFlags[TypeFlags["Any"] = 1] = "Any";
    TypeFlags[TypeFlags["String"] = 2] = "String";
    TypeFlags[TypeFlags["Number"] = 4] = "Number";
    TypeFlags[TypeFlags["Boolean"] = 8] = "Boolean";
    TypeFlags[TypeFlags["Enum"] = 16] = "Enum";
    TypeFlags[TypeFlags["StringLiteral"] = 32] = "StringLiteral";
    TypeFlags[TypeFlags["NumberLiteral"] = 64] = "NumberLiteral";
    TypeFlags[TypeFlags["BooleanLiteral"] = 128] = "BooleanLiteral";
    TypeFlags[TypeFlags["EnumLiteral"] = 256] = "EnumLiteral";
    TypeFlags[TypeFlags["ESSymbol"] = 512] = "ESSymbol";
    TypeFlags[TypeFlags["UniqueESSymbol"] = 1024] = "UniqueESSymbol";
    TypeFlags[TypeFlags["Void"] = 2048] = "Void";
    TypeFlags[TypeFlags["Undefined"] = 4096] = "Undefined";
    TypeFlags[TypeFlags["Null"] = 8192] = "Null";
    TypeFlags[TypeFlags["Never"] = 16384] = "Never";
    TypeFlags[TypeFlags["TypeParameter"] = 32768] = "TypeParameter";
    TypeFlags[TypeFlags["Object"] = 65536] = "Object";
    TypeFlags[TypeFlags["Union"] = 131072] = "Union";
    TypeFlags[TypeFlags["Intersection"] = 262144] = "Intersection";
    TypeFlags[TypeFlags["Index"] = 524288] = "Index";
    TypeFlags[TypeFlags["IndexedAccess"] = 1048576] = "IndexedAccess";
    TypeFlags[TypeFlags["NonPrimitive"] = 33554432] = "NonPrimitive";
    TypeFlags[TypeFlags["MarkerType"] = 134217728] = "MarkerType";
    TypeFlags[TypeFlags["Literal"] = 224] = "Literal";
    TypeFlags[TypeFlags["Unit"] = 13536] = "Unit";
    TypeFlags[TypeFlags["StringOrNumberLiteral"] = 96] = "StringOrNumberLiteral";
    TypeFlags[TypeFlags["PossiblyFalsy"] = 14574] = "PossiblyFalsy";
    TypeFlags[TypeFlags["StringLike"] = 524322] = "StringLike";
    TypeFlags[TypeFlags["NumberLike"] = 84] = "NumberLike";
    TypeFlags[TypeFlags["BooleanLike"] = 136] = "BooleanLike";
    TypeFlags[TypeFlags["EnumLike"] = 272] = "EnumLike";
    TypeFlags[TypeFlags["ESSymbolLike"] = 1536] = "ESSymbolLike";
    TypeFlags[TypeFlags["UnionOrIntersection"] = 393216] = "UnionOrIntersection";
    TypeFlags[TypeFlags["StructuredType"] = 458752] = "StructuredType";
    TypeFlags[TypeFlags["StructuredOrTypeVariable"] = 2064384] = "StructuredOrTypeVariable";
    TypeFlags[TypeFlags["TypeVariable"] = 1081344] = "TypeVariable";
    TypeFlags[TypeFlags["Narrowable"] = 35620607] = "Narrowable";
    TypeFlags[TypeFlags["NotUnionOrUnit"] = 33620481] = "NotUnionOrUnit";
})(/* istanbul ignore next */TypeFlags = exports.TypeFlags || (exports.TypeFlags = {}));
var ObjectFlags;
(function (ObjectFlags) {
    ObjectFlags[ObjectFlags["Class"] = 1] = "Class";
    ObjectFlags[ObjectFlags["Interface"] = 2] = "Interface";
    ObjectFlags[ObjectFlags["Reference"] = 4] = "Reference";
    ObjectFlags[ObjectFlags["Tuple"] = 8] = "Tuple";
    ObjectFlags[ObjectFlags["Anonymous"] = 16] = "Anonymous";
    ObjectFlags[ObjectFlags["Mapped"] = 32] = "Mapped";
    ObjectFlags[ObjectFlags["Instantiated"] = 64] = "Instantiated";
    ObjectFlags[ObjectFlags["ObjectLiteral"] = 128] = "ObjectLiteral";
    ObjectFlags[ObjectFlags["EvolvingArray"] = 256] = "EvolvingArray";
    ObjectFlags[ObjectFlags["ObjectLiteralPatternWithComputedProperties"] = 512] = "ObjectLiteralPatternWithComputedProperties";
    ObjectFlags[ObjectFlags["ContainsSpread"] = 1024] = "ContainsSpread";
    ObjectFlags[ObjectFlags["ReverseMapped"] = 2048] = "ReverseMapped";
    ObjectFlags[ObjectFlags["ClassOrInterface"] = 3] = "ClassOrInterface";
})(/* istanbul ignore next */ObjectFlags = exports.ObjectFlags || (exports.ObjectFlags = {}));
var DiagnosticCategory;
(function (DiagnosticCategory) {
    DiagnosticCategory[DiagnosticCategory["Warning"] = 0] = "Warning";
    DiagnosticCategory[DiagnosticCategory["Error"] = 1] = "Error";
    DiagnosticCategory[DiagnosticCategory["Message"] = 2] = "Message";
})(/* istanbul ignore next */DiagnosticCategory = exports.DiagnosticCategory || (exports.DiagnosticCategory = {}));
var ModuleResolutionKind;
(function (ModuleResolutionKind) {
    ModuleResolutionKind[ModuleResolutionKind["Classic"] = 1] = "Classic";
    ModuleResolutionKind[ModuleResolutionKind["NodeJs"] = 2] = "NodeJs";
})(/* istanbul ignore next */ModuleResolutionKind = exports.ModuleResolutionKind || (exports.ModuleResolutionKind = {}));
var ModuleKind;
(function (ModuleKind) {
    ModuleKind[ModuleKind["None"] = 0] = "None";
    ModuleKind[ModuleKind["CommonJS"] = 1] = "CommonJS";
    ModuleKind[ModuleKind["AMD"] = 2] = "AMD";
    ModuleKind[ModuleKind["UMD"] = 3] = "UMD";
    ModuleKind[ModuleKind["System"] = 4] = "System";
    ModuleKind[ModuleKind["ES2015"] = 5] = "ES2015";
    ModuleKind[ModuleKind["ESNext"] = 6] = "ESNext";
})(/* istanbul ignore next */ModuleKind = exports.ModuleKind || (exports.ModuleKind = {}));
var JsxEmit;
(function (JsxEmit) {
    JsxEmit[JsxEmit["None"] = 0] = "None";
    JsxEmit[JsxEmit["Preserve"] = 1] = "Preserve";
    JsxEmit[JsxEmit["React"] = 2] = "React";
    JsxEmit[JsxEmit["ReactNative"] = 3] = "ReactNative";
})(/* istanbul ignore next */JsxEmit = exports.JsxEmit || (exports.JsxEmit = {}));
var NewLineKind;
(function (NewLineKind) {
    NewLineKind[NewLineKind["CarriageReturnLineFeed"] = 0] = "CarriageReturnLineFeed";
    NewLineKind[NewLineKind["LineFeed"] = 1] = "LineFeed";
})(/* istanbul ignore next */NewLineKind = exports.NewLineKind || (exports.NewLineKind = {}));
var ScriptKind;
(function (ScriptKind) {
    ScriptKind[ScriptKind["Unknown"] = 0] = "Unknown";
    ScriptKind[ScriptKind["JS"] = 1] = "JS";
    ScriptKind[ScriptKind["JSX"] = 2] = "JSX";
    ScriptKind[ScriptKind["TS"] = 3] = "TS";
    ScriptKind[ScriptKind["TSX"] = 4] = "TSX";
    ScriptKind[ScriptKind["External"] = 5] = "External";
    ScriptKind[ScriptKind["JSON"] = 6] = "JSON";
})(/* istanbul ignore next */ScriptKind = exports.ScriptKind || (exports.ScriptKind = {}));
var ScriptTarget;
(function (ScriptTarget) {
    ScriptTarget[ScriptTarget["ES3"] = 0] = "ES3";
    ScriptTarget[ScriptTarget["ES5"] = 1] = "ES5";
    ScriptTarget[ScriptTarget["ES2015"] = 2] = "ES2015";
    ScriptTarget[ScriptTarget["ES2016"] = 3] = "ES2016";
    ScriptTarget[ScriptTarget["ES2017"] = 4] = "ES2017";
    ScriptTarget[ScriptTarget["ES2018"] = 5] = "ES2018";
    ScriptTarget[ScriptTarget["ESNext"] = 6] = "ESNext";
    ScriptTarget[ScriptTarget["Latest"] = 6] = "Latest";
})(/* istanbul ignore next */ScriptTarget = exports.ScriptTarget || (exports.ScriptTarget = {}));
var LanguageVariant;
(function (LanguageVariant) {
    LanguageVariant[LanguageVariant["Standard"] = 0] = "Standard";
    LanguageVariant[LanguageVariant["JSX"] = 1] = "JSX";
})(/* istanbul ignore next */LanguageVariant = exports.LanguageVariant || (exports.LanguageVariant = {}));
var EmitHint;
(function (EmitHint) {
    EmitHint[EmitHint["SourceFile"] = 0] = "SourceFile";
    EmitHint[EmitHint["Expression"] = 1] = "Expression";
    EmitHint[EmitHint["IdentifierName"] = 2] = "IdentifierName";
    EmitHint[EmitHint["MappedTypeParameter"] = 3] = "MappedTypeParameter";
    EmitHint[EmitHint["Unspecified"] = 4] = "Unspecified";
})(/* istanbul ignore next */EmitHint = exports.EmitHint || (exports.EmitHint = {}));
var IndentStyle;
(function (IndentStyle) {
    IndentStyle[IndentStyle["None"] = 0] = "None";
    IndentStyle[IndentStyle["Block"] = 1] = "Block";
    IndentStyle[IndentStyle["Smart"] = 2] = "Smart";
})(/* istanbul ignore next */IndentStyle = exports.IndentStyle || (exports.IndentStyle = {}));
var ts;
(function (ts) {
    var NodeFlags;
    (function (NodeFlags) {
        NodeFlags[NodeFlags["None"] = 0] = "None";
        NodeFlags[NodeFlags["Let"] = 1] = "Let";
        NodeFlags[NodeFlags["Const"] = 2] = "Const";
        NodeFlags[NodeFlags["NestedNamespace"] = 4] = "NestedNamespace";
        NodeFlags[NodeFlags["Synthesized"] = 8] = "Synthesized";
        NodeFlags[NodeFlags["Namespace"] = 16] = "Namespace";
        NodeFlags[NodeFlags["ExportContext"] = 32] = "ExportContext";
        NodeFlags[NodeFlags["ContainsThis"] = 64] = "ContainsThis";
        NodeFlags[NodeFlags["HasImplicitReturn"] = 128] = "HasImplicitReturn";
        NodeFlags[NodeFlags["HasExplicitReturn"] = 256] = "HasExplicitReturn";
        NodeFlags[NodeFlags["GlobalAugmentation"] = 512] = "GlobalAugmentation";
        NodeFlags[NodeFlags["HasAsyncFunctions"] = 1024] = "HasAsyncFunctions";
        NodeFlags[NodeFlags["DisallowInContext"] = 2048] = "DisallowInContext";
        NodeFlags[NodeFlags["YieldContext"] = 4096] = "YieldContext";
        NodeFlags[NodeFlags["DecoratorContext"] = 8192] = "DecoratorContext";
        NodeFlags[NodeFlags["AwaitContext"] = 16384] = "AwaitContext";
        NodeFlags[NodeFlags["ThisNodeHasError"] = 32768] = "ThisNodeHasError";
        NodeFlags[NodeFlags["JavaScriptFile"] = 65536] = "JavaScriptFile";
        NodeFlags[NodeFlags["ThisNodeOrAnySubNodesHasError"] = 131072] = "ThisNodeOrAnySubNodesHasError";
        NodeFlags[NodeFlags["HasAggregatedChildData"] = 262144] = "HasAggregatedChildData";
        NodeFlags[NodeFlags["JSDoc"] = 1048576] = "JSDoc";
        NodeFlags[NodeFlags["BlockScoped"] = 3] = "BlockScoped";
        NodeFlags[NodeFlags["ReachabilityCheckFlags"] = 384] = "ReachabilityCheckFlags";
        NodeFlags[NodeFlags["ReachabilityAndEmitFlags"] = 1408] = "ReachabilityAndEmitFlags";
        NodeFlags[NodeFlags["ContextFlags"] = 6387712] = "ContextFlags";
        NodeFlags[NodeFlags["TypeExcludesFlags"] = 20480] = "TypeExcludesFlags";
    })(/* istanbul ignore next */NodeFlags = ts.NodeFlags || (ts.NodeFlags = {}));
    var ModifierFlags;
    (function (ModifierFlags) {
        ModifierFlags[ModifierFlags["None"] = 0] = "None";
        ModifierFlags[ModifierFlags["Export"] = 1] = "Export";
        ModifierFlags[ModifierFlags["Ambient"] = 2] = "Ambient";
        ModifierFlags[ModifierFlags["Public"] = 4] = "Public";
        ModifierFlags[ModifierFlags["Private"] = 8] = "Private";
        ModifierFlags[ModifierFlags["Protected"] = 16] = "Protected";
        ModifierFlags[ModifierFlags["Static"] = 32] = "Static";
        ModifierFlags[ModifierFlags["Readonly"] = 64] = "Readonly";
        ModifierFlags[ModifierFlags["Abstract"] = 128] = "Abstract";
        ModifierFlags[ModifierFlags["Async"] = 256] = "Async";
        ModifierFlags[ModifierFlags["Default"] = 512] = "Default";
        ModifierFlags[ModifierFlags["Const"] = 2048] = "Const";
        ModifierFlags[ModifierFlags["HasComputedFlags"] = 536870912] = "HasComputedFlags";
        ModifierFlags[ModifierFlags["AccessibilityModifier"] = 28] = "AccessibilityModifier";
        ModifierFlags[ModifierFlags["ParameterPropertyModifier"] = 92] = "ParameterPropertyModifier";
        ModifierFlags[ModifierFlags["NonPublicAccessibilityModifier"] = 24] = "NonPublicAccessibilityModifier";
        ModifierFlags[ModifierFlags["TypeScriptModifier"] = 2270] = "TypeScriptModifier";
        ModifierFlags[ModifierFlags["ExportDefault"] = 513] = "ExportDefault";
    })(/* istanbul ignore next */ModifierFlags = ts.ModifierFlags || (ts.ModifierFlags = {}));
    var JsxFlags;
    (function (JsxFlags) {
        JsxFlags[JsxFlags["None"] = 0] = "None";
        /**
         * An element from a named property of the JSX.IntrinsicElements interface
         */
        JsxFlags[JsxFlags["IntrinsicNamedElement"] = 1] = "IntrinsicNamedElement";
        /**
         * An element inferred from the string index signature of the JSX.IntrinsicElements interface
         */
        JsxFlags[JsxFlags["IntrinsicIndexedElement"] = 2] = "IntrinsicIndexedElement";
        JsxFlags[JsxFlags["IntrinsicElement"] = 3] = "IntrinsicElement";
    })(/* istanbul ignore next */JsxFlags = ts.JsxFlags || (ts.JsxFlags = {}));
    var FlowFlags;
    (function (FlowFlags) {
        FlowFlags[FlowFlags["Unreachable"] = 1] = "Unreachable";
        FlowFlags[FlowFlags["Start"] = 2] = "Start";
        FlowFlags[FlowFlags["BranchLabel"] = 4] = "BranchLabel";
        FlowFlags[FlowFlags["LoopLabel"] = 8] = "LoopLabel";
        FlowFlags[FlowFlags["Assignment"] = 16] = "Assignment";
        FlowFlags[FlowFlags["TrueCondition"] = 32] = "TrueCondition";
        FlowFlags[FlowFlags["FalseCondition"] = 64] = "FalseCondition";
        FlowFlags[FlowFlags["SwitchClause"] = 128] = "SwitchClause";
        FlowFlags[FlowFlags["ArrayMutation"] = 256] = "ArrayMutation";
        FlowFlags[FlowFlags["Referenced"] = 512] = "Referenced";
        FlowFlags[FlowFlags["Shared"] = 1024] = "Shared";
        FlowFlags[FlowFlags["PreFinally"] = 2048] = "PreFinally";
        FlowFlags[FlowFlags["AfterFinally"] = 4096] = "AfterFinally";
        FlowFlags[FlowFlags["Label"] = 12] = "Label";
        FlowFlags[FlowFlags["Condition"] = 96] = "Condition";
    })(/* istanbul ignore next */FlowFlags = ts.FlowFlags || (ts.FlowFlags = {}));
    var ExitStatus;
    (function (ExitStatus) {
        ExitStatus[ExitStatus["Success"] = 0] = "Success";
        ExitStatus[ExitStatus["DiagnosticsPresent_OutputsSkipped"] = 1] = "DiagnosticsPresent_OutputsSkipped";
        ExitStatus[ExitStatus["DiagnosticsPresent_OutputsGenerated"] = 2] = "DiagnosticsPresent_OutputsGenerated";
    })(/* istanbul ignore next */ExitStatus = ts.ExitStatus || (ts.ExitStatus = {}));
    var NodeBuilderFlags;
    (function (NodeBuilderFlags) {
        NodeBuilderFlags[NodeBuilderFlags["None"] = 0] = "None";
        NodeBuilderFlags[NodeBuilderFlags["NoTruncation"] = 1] = "NoTruncation";
        NodeBuilderFlags[NodeBuilderFlags["WriteArrayAsGenericType"] = 2] = "WriteArrayAsGenericType";
        NodeBuilderFlags[NodeBuilderFlags["WriteDefaultSymbolWithoutName"] = 4] = "WriteDefaultSymbolWithoutName";
        NodeBuilderFlags[NodeBuilderFlags["UseStructuralFallback"] = 8] = "UseStructuralFallback";
        NodeBuilderFlags[NodeBuilderFlags["WriteTypeArgumentsOfSignature"] = 32] = "WriteTypeArgumentsOfSignature";
        NodeBuilderFlags[NodeBuilderFlags["UseFullyQualifiedType"] = 64] = "UseFullyQualifiedType";
        NodeBuilderFlags[NodeBuilderFlags["UseOnlyExternalAliasing"] = 128] = "UseOnlyExternalAliasing";
        NodeBuilderFlags[NodeBuilderFlags["SuppressAnyReturnType"] = 256] = "SuppressAnyReturnType";
        NodeBuilderFlags[NodeBuilderFlags["WriteTypeParametersInQualifiedName"] = 512] = "WriteTypeParametersInQualifiedName";
        NodeBuilderFlags[NodeBuilderFlags["MultilineObjectLiterals"] = 1024] = "MultilineObjectLiterals";
        NodeBuilderFlags[NodeBuilderFlags["WriteClassExpressionAsTypeLiteral"] = 2048] = "WriteClassExpressionAsTypeLiteral";
        NodeBuilderFlags[NodeBuilderFlags["UseTypeOfFunction"] = 4096] = "UseTypeOfFunction";
        NodeBuilderFlags[NodeBuilderFlags["OmitParameterModifiers"] = 8192] = "OmitParameterModifiers";
        NodeBuilderFlags[NodeBuilderFlags["UseAliasDefinedOutsideCurrentScope"] = 16384] = "UseAliasDefinedOutsideCurrentScope";
        NodeBuilderFlags[NodeBuilderFlags["AllowThisInObjectLiteral"] = 32768] = "AllowThisInObjectLiteral";
        NodeBuilderFlags[NodeBuilderFlags["AllowQualifedNameInPlaceOfIdentifier"] = 65536] = "AllowQualifedNameInPlaceOfIdentifier";
        NodeBuilderFlags[NodeBuilderFlags["AllowAnonymousIdentifier"] = 131072] = "AllowAnonymousIdentifier";
        NodeBuilderFlags[NodeBuilderFlags["AllowEmptyUnionOrIntersection"] = 262144] = "AllowEmptyUnionOrIntersection";
        NodeBuilderFlags[NodeBuilderFlags["AllowEmptyTuple"] = 524288] = "AllowEmptyTuple";
        NodeBuilderFlags[NodeBuilderFlags["AllowUniqueESSymbolType"] = 1048576] = "AllowUniqueESSymbolType";
        NodeBuilderFlags[NodeBuilderFlags["AllowEmptyIndexInfoType"] = 2097152] = "AllowEmptyIndexInfoType";
        NodeBuilderFlags[NodeBuilderFlags["IgnoreErrors"] = 3112960] = "IgnoreErrors";
        NodeBuilderFlags[NodeBuilderFlags["InObjectTypeLiteral"] = 4194304] = "InObjectTypeLiteral";
        NodeBuilderFlags[NodeBuilderFlags["InTypeAlias"] = 8388608] = "InTypeAlias";
    })(/* istanbul ignore next */NodeBuilderFlags = ts.NodeBuilderFlags || (ts.NodeBuilderFlags = {}));
    var SymbolFormatFlags;
    (function (SymbolFormatFlags) {
        SymbolFormatFlags[SymbolFormatFlags["None"] = 0] = "None";
        SymbolFormatFlags[SymbolFormatFlags["WriteTypeParametersOrArguments"] = 1] = "WriteTypeParametersOrArguments";
        SymbolFormatFlags[SymbolFormatFlags["UseOnlyExternalAliasing"] = 2] = "UseOnlyExternalAliasing";
        SymbolFormatFlags[SymbolFormatFlags["AllowAnyNodeKind"] = 4] = "AllowAnyNodeKind";
    })(/* istanbul ignore next */SymbolFormatFlags = ts.SymbolFormatFlags || (ts.SymbolFormatFlags = {}));
    var TypePredicateKind;
    (function (TypePredicateKind) {
        TypePredicateKind[TypePredicateKind["This"] = 0] = "This";
        TypePredicateKind[TypePredicateKind["Identifier"] = 1] = "Identifier";
    })(/* istanbul ignore next */TypePredicateKind = ts.TypePredicateKind || (ts.TypePredicateKind = {}));
    var InternalSymbolName;
    (function (InternalSymbolName) {
        InternalSymbolName["Call"] = "__call";
        InternalSymbolName["Constructor"] = "__constructor";
        InternalSymbolName["New"] = "__new";
        InternalSymbolName["Index"] = "__index";
        InternalSymbolName["ExportStar"] = "__export";
        InternalSymbolName["Global"] = "__global";
        InternalSymbolName["Missing"] = "__missing";
        InternalSymbolName["Type"] = "__type";
        InternalSymbolName["Object"] = "__object";
        InternalSymbolName["JSXAttributes"] = "__jsxAttributes";
        InternalSymbolName["Class"] = "__class";
        InternalSymbolName["Function"] = "__function";
        InternalSymbolName["Computed"] = "__computed";
        InternalSymbolName["Resolving"] = "__resolving__";
        InternalSymbolName["ExportEquals"] = "export=";
        InternalSymbolName["Default"] = "default";
    })(/* istanbul ignore next */InternalSymbolName = ts.InternalSymbolName || (ts.InternalSymbolName = {}));
    var SignatureKind;
    (function (SignatureKind) {
        SignatureKind[SignatureKind["Call"] = 0] = "Call";
        SignatureKind[SignatureKind["Construct"] = 1] = "Construct";
    })(/* istanbul ignore next */SignatureKind = ts.SignatureKind || (ts.SignatureKind = {}));
    var IndexKind;
    (function (IndexKind) {
        IndexKind[IndexKind["String"] = 0] = "String";
        IndexKind[IndexKind["Number"] = 1] = "Number";
    })(/* istanbul ignore next */IndexKind = ts.IndexKind || (ts.IndexKind = {}));
    var InferencePriority;
    (function (InferencePriority) {
        InferencePriority[InferencePriority["NakedTypeVariable"] = 1] = "NakedTypeVariable";
        InferencePriority[InferencePriority["MappedType"] = 2] = "MappedType";
        InferencePriority[InferencePriority["ReturnType"] = 4] = "ReturnType";
    })(/* istanbul ignore next */InferencePriority = ts.InferencePriority || (ts.InferencePriority = {}));
    var InferenceFlags;
    (function (InferenceFlags) {
        InferenceFlags[InferenceFlags["InferUnionTypes"] = 1] = "InferUnionTypes";
        InferenceFlags[InferenceFlags["NoDefault"] = 2] = "NoDefault";
        InferenceFlags[InferenceFlags["AnyDefault"] = 4] = "AnyDefault";
    })(/* istanbul ignore next */InferenceFlags = ts.InferenceFlags || (ts.InferenceFlags = {}));
    var Ternary;
    (function (Ternary) {
        Ternary[Ternary["False"] = 0] = "False";
        Ternary[Ternary["Maybe"] = 1] = "Maybe";
        Ternary[Ternary["True"] = -1] = "True";
    })(/* istanbul ignore next */Ternary = ts.Ternary || (ts.Ternary = {}));
    var WatchDirectoryFlags;
    (function (WatchDirectoryFlags) {
        WatchDirectoryFlags[WatchDirectoryFlags["None"] = 0] = "None";
        WatchDirectoryFlags[WatchDirectoryFlags["Recursive"] = 1] = "Recursive";
    })(/* istanbul ignore next */WatchDirectoryFlags = ts.WatchDirectoryFlags || (ts.WatchDirectoryFlags = {}));
    var Extension;
    (function (Extension) {
        Extension["Ts"] = ".ts";
        Extension["Tsx"] = ".tsx";
        Extension["Dts"] = ".d.ts";
        Extension["Js"] = ".js";
        Extension["Jsx"] = ".jsx";
        Extension["Json"] = ".json";
    })(/* istanbul ignore next */Extension = ts.Extension || (ts.Extension = {}));
    var EmitFlags;
    (function (EmitFlags) {
        EmitFlags[EmitFlags["SingleLine"] = 1] = "SingleLine";
        EmitFlags[EmitFlags["AdviseOnEmitNode"] = 2] = "AdviseOnEmitNode";
        EmitFlags[EmitFlags["NoSubstitution"] = 4] = "NoSubstitution";
        EmitFlags[EmitFlags["CapturesThis"] = 8] = "CapturesThis";
        EmitFlags[EmitFlags["NoLeadingSourceMap"] = 16] = "NoLeadingSourceMap";
        EmitFlags[EmitFlags["NoTrailingSourceMap"] = 32] = "NoTrailingSourceMap";
        EmitFlags[EmitFlags["NoSourceMap"] = 48] = "NoSourceMap";
        EmitFlags[EmitFlags["NoNestedSourceMaps"] = 64] = "NoNestedSourceMaps";
        EmitFlags[EmitFlags["NoTokenLeadingSourceMaps"] = 128] = "NoTokenLeadingSourceMaps";
        EmitFlags[EmitFlags["NoTokenTrailingSourceMaps"] = 256] = "NoTokenTrailingSourceMaps";
        EmitFlags[EmitFlags["NoTokenSourceMaps"] = 384] = "NoTokenSourceMaps";
        EmitFlags[EmitFlags["NoLeadingComments"] = 512] = "NoLeadingComments";
        EmitFlags[EmitFlags["NoTrailingComments"] = 1024] = "NoTrailingComments";
        EmitFlags[EmitFlags["NoComments"] = 1536] = "NoComments";
        EmitFlags[EmitFlags["NoNestedComments"] = 2048] = "NoNestedComments";
        EmitFlags[EmitFlags["HelperName"] = 4096] = "HelperName";
        EmitFlags[EmitFlags["ExportName"] = 8192] = "ExportName";
        EmitFlags[EmitFlags["LocalName"] = 16384] = "LocalName";
        EmitFlags[EmitFlags["InternalName"] = 32768] = "InternalName";
        EmitFlags[EmitFlags["Indented"] = 65536] = "Indented";
        EmitFlags[EmitFlags["NoIndentation"] = 131072] = "NoIndentation";
        EmitFlags[EmitFlags["AsyncFunctionBody"] = 262144] = "AsyncFunctionBody";
        EmitFlags[EmitFlags["ReuseTempVariableScope"] = 524288] = "ReuseTempVariableScope";
        EmitFlags[EmitFlags["CustomPrologue"] = 1048576] = "CustomPrologue";
        EmitFlags[EmitFlags["NoHoisting"] = 2097152] = "NoHoisting";
        EmitFlags[EmitFlags["HasEndOfDeclarationMarker"] = 4194304] = "HasEndOfDeclarationMarker";
        EmitFlags[EmitFlags["Iterator"] = 8388608] = "Iterator";
        EmitFlags[EmitFlags["NoAsciiEscaping"] = 16777216] = "NoAsciiEscaping";
    })(/* istanbul ignore next */EmitFlags = ts.EmitFlags || (ts.EmitFlags = {}));
    var ListFormat;
    (function (ListFormat) {
        ListFormat[ListFormat["None"] = 0] = "None";
        ListFormat[ListFormat["SingleLine"] = 0] = "SingleLine";
        ListFormat[ListFormat["MultiLine"] = 1] = "MultiLine";
        ListFormat[ListFormat["PreserveLines"] = 2] = "PreserveLines";
        ListFormat[ListFormat["LinesMask"] = 3] = "LinesMask";
        ListFormat[ListFormat["NotDelimited"] = 0] = "NotDelimited";
        ListFormat[ListFormat["BarDelimited"] = 4] = "BarDelimited";
        ListFormat[ListFormat["AmpersandDelimited"] = 8] = "AmpersandDelimited";
        ListFormat[ListFormat["CommaDelimited"] = 16] = "CommaDelimited";
        ListFormat[ListFormat["DelimitersMask"] = 28] = "DelimitersMask";
        ListFormat[ListFormat["AllowTrailingComma"] = 32] = "AllowTrailingComma";
        ListFormat[ListFormat["Indented"] = 64] = "Indented";
        ListFormat[ListFormat["SpaceBetweenBraces"] = 128] = "SpaceBetweenBraces";
        ListFormat[ListFormat["SpaceBetweenSiblings"] = 256] = "SpaceBetweenSiblings";
        ListFormat[ListFormat["Braces"] = 512] = "Braces";
        ListFormat[ListFormat["Parenthesis"] = 1024] = "Parenthesis";
        ListFormat[ListFormat["AngleBrackets"] = 2048] = "AngleBrackets";
        ListFormat[ListFormat["SquareBrackets"] = 4096] = "SquareBrackets";
        ListFormat[ListFormat["BracketsMask"] = 7680] = "BracketsMask";
        ListFormat[ListFormat["OptionalIfUndefined"] = 8192] = "OptionalIfUndefined";
        ListFormat[ListFormat["OptionalIfEmpty"] = 16384] = "OptionalIfEmpty";
        ListFormat[ListFormat["Optional"] = 24576] = "Optional";
        ListFormat[ListFormat["PreferNewLine"] = 32768] = "PreferNewLine";
        ListFormat[ListFormat["NoTrailingNewLine"] = 65536] = "NoTrailingNewLine";
        ListFormat[ListFormat["NoInterveningComments"] = 131072] = "NoInterveningComments";
        ListFormat[ListFormat["NoSpaceIfEmpty"] = 262144] = "NoSpaceIfEmpty";
        ListFormat[ListFormat["SingleElement"] = 524288] = "SingleElement";
        ListFormat[ListFormat["Modifiers"] = 131328] = "Modifiers";
        ListFormat[ListFormat["HeritageClauses"] = 256] = "HeritageClauses";
        ListFormat[ListFormat["SingleLineTypeLiteralMembers"] = 448] = "SingleLineTypeLiteralMembers";
        ListFormat[ListFormat["MultiLineTypeLiteralMembers"] = 65] = "MultiLineTypeLiteralMembers";
        ListFormat[ListFormat["TupleTypeElements"] = 336] = "TupleTypeElements";
        ListFormat[ListFormat["UnionTypeConstituents"] = 260] = "UnionTypeConstituents";
        ListFormat[ListFormat["IntersectionTypeConstituents"] = 264] = "IntersectionTypeConstituents";
        ListFormat[ListFormat["ObjectBindingPatternElements"] = 262576] = "ObjectBindingPatternElements";
        ListFormat[ListFormat["ArrayBindingPatternElements"] = 262448] = "ArrayBindingPatternElements";
        ListFormat[ListFormat["ObjectLiteralExpressionProperties"] = 263122] = "ObjectLiteralExpressionProperties";
        ListFormat[ListFormat["ArrayLiteralExpressionElements"] = 4466] = "ArrayLiteralExpressionElements";
        ListFormat[ListFormat["CommaListElements"] = 272] = "CommaListElements";
        ListFormat[ListFormat["CallExpressionArguments"] = 1296] = "CallExpressionArguments";
        ListFormat[ListFormat["NewExpressionArguments"] = 9488] = "NewExpressionArguments";
        ListFormat[ListFormat["TemplateExpressionSpans"] = 131072] = "TemplateExpressionSpans";
        ListFormat[ListFormat["SingleLineBlockStatements"] = 384] = "SingleLineBlockStatements";
        ListFormat[ListFormat["MultiLineBlockStatements"] = 65] = "MultiLineBlockStatements";
        ListFormat[ListFormat["VariableDeclarationList"] = 272] = "VariableDeclarationList";
        ListFormat[ListFormat["SingleLineFunctionBodyStatements"] = 384] = "SingleLineFunctionBodyStatements";
        ListFormat[ListFormat["MultiLineFunctionBodyStatements"] = 1] = "MultiLineFunctionBodyStatements";
        ListFormat[ListFormat["ClassHeritageClauses"] = 256] = "ClassHeritageClauses";
        ListFormat[ListFormat["ClassMembers"] = 65] = "ClassMembers";
        ListFormat[ListFormat["InterfaceMembers"] = 65] = "InterfaceMembers";
        ListFormat[ListFormat["EnumMembers"] = 81] = "EnumMembers";
        ListFormat[ListFormat["CaseBlockClauses"] = 65] = "CaseBlockClauses";
        ListFormat[ListFormat["NamedImportsOrExportsElements"] = 432] = "NamedImportsOrExportsElements";
        ListFormat[ListFormat["JsxElementOrFragmentChildren"] = 131072] = "JsxElementOrFragmentChildren";
        ListFormat[ListFormat["JsxElementAttributes"] = 131328] = "JsxElementAttributes";
        ListFormat[ListFormat["CaseOrDefaultClauseStatements"] = 81985] = "CaseOrDefaultClauseStatements";
        ListFormat[ListFormat["HeritageClauseTypes"] = 272] = "HeritageClauseTypes";
        ListFormat[ListFormat["SourceFileStatements"] = 65537] = "SourceFileStatements";
        ListFormat[ListFormat["Decorators"] = 24577] = "Decorators";
        ListFormat[ListFormat["TypeArguments"] = 26896] = "TypeArguments";
        ListFormat[ListFormat["TypeParameters"] = 26896] = "TypeParameters";
        ListFormat[ListFormat["Parameters"] = 1296] = "Parameters";
        ListFormat[ListFormat["IndexSignatureParameters"] = 4432] = "IndexSignatureParameters";
    })(/* istanbul ignore next */ListFormat = ts.ListFormat || (ts.ListFormat = {}));
    var FileWatcherEventKind;
    (function (FileWatcherEventKind) {
        FileWatcherEventKind[FileWatcherEventKind["Created"] = 0] = "Created";
        FileWatcherEventKind[FileWatcherEventKind["Changed"] = 1] = "Changed";
        FileWatcherEventKind[FileWatcherEventKind["Deleted"] = 2] = "Deleted";
    })(/* istanbul ignore next */FileWatcherEventKind = ts.FileWatcherEventKind || (ts.FileWatcherEventKind = {}));
    var HighlightSpanKind;
    (function (HighlightSpanKind) {
        HighlightSpanKind["none"] = "none";
        HighlightSpanKind["definition"] = "definition";
        HighlightSpanKind["reference"] = "reference";
        HighlightSpanKind["writtenReference"] = "writtenReference";
    })(/* istanbul ignore next */HighlightSpanKind = ts.HighlightSpanKind || (ts.HighlightSpanKind = {}));
    var SymbolDisplayPartKind;
    (function (SymbolDisplayPartKind) {
        SymbolDisplayPartKind[SymbolDisplayPartKind["aliasName"] = 0] = "aliasName";
        SymbolDisplayPartKind[SymbolDisplayPartKind["className"] = 1] = "className";
        SymbolDisplayPartKind[SymbolDisplayPartKind["enumName"] = 2] = "enumName";
        SymbolDisplayPartKind[SymbolDisplayPartKind["fieldName"] = 3] = "fieldName";
        SymbolDisplayPartKind[SymbolDisplayPartKind["interfaceName"] = 4] = "interfaceName";
        SymbolDisplayPartKind[SymbolDisplayPartKind["keyword"] = 5] = "keyword";
        SymbolDisplayPartKind[SymbolDisplayPartKind["lineBreak"] = 6] = "lineBreak";
        SymbolDisplayPartKind[SymbolDisplayPartKind["numericLiteral"] = 7] = "numericLiteral";
        SymbolDisplayPartKind[SymbolDisplayPartKind["stringLiteral"] = 8] = "stringLiteral";
        SymbolDisplayPartKind[SymbolDisplayPartKind["localName"] = 9] = "localName";
        SymbolDisplayPartKind[SymbolDisplayPartKind["methodName"] = 10] = "methodName";
        SymbolDisplayPartKind[SymbolDisplayPartKind["moduleName"] = 11] = "moduleName";
        SymbolDisplayPartKind[SymbolDisplayPartKind["operator"] = 12] = "operator";
        SymbolDisplayPartKind[SymbolDisplayPartKind["parameterName"] = 13] = "parameterName";
        SymbolDisplayPartKind[SymbolDisplayPartKind["propertyName"] = 14] = "propertyName";
        SymbolDisplayPartKind[SymbolDisplayPartKind["punctuation"] = 15] = "punctuation";
        SymbolDisplayPartKind[SymbolDisplayPartKind["space"] = 16] = "space";
        SymbolDisplayPartKind[SymbolDisplayPartKind["text"] = 17] = "text";
        SymbolDisplayPartKind[SymbolDisplayPartKind["typeParameterName"] = 18] = "typeParameterName";
        SymbolDisplayPartKind[SymbolDisplayPartKind["enumMemberName"] = 19] = "enumMemberName";
        SymbolDisplayPartKind[SymbolDisplayPartKind["functionName"] = 20] = "functionName";
        SymbolDisplayPartKind[SymbolDisplayPartKind["regularExpressionLiteral"] = 21] = "regularExpressionLiteral";
    })(/* istanbul ignore next */SymbolDisplayPartKind = ts.SymbolDisplayPartKind || (ts.SymbolDisplayPartKind = {}));
    var OutputFileType;
    (function (OutputFileType) {
        OutputFileType[OutputFileType["JavaScript"] = 0] = "JavaScript";
        OutputFileType[OutputFileType["SourceMap"] = 1] = "SourceMap";
        OutputFileType[OutputFileType["Declaration"] = 2] = "Declaration";
    })(/* istanbul ignore next */OutputFileType = ts.OutputFileType || (ts.OutputFileType = {}));
    var EndOfLineState;
    (function (EndOfLineState) {
        EndOfLineState[EndOfLineState["None"] = 0] = "None";
        EndOfLineState[EndOfLineState["InMultiLineCommentTrivia"] = 1] = "InMultiLineCommentTrivia";
        EndOfLineState[EndOfLineState["InSingleQuoteStringLiteral"] = 2] = "InSingleQuoteStringLiteral";
        EndOfLineState[EndOfLineState["InDoubleQuoteStringLiteral"] = 3] = "InDoubleQuoteStringLiteral";
        EndOfLineState[EndOfLineState["InTemplateHeadOrNoSubstitutionTemplate"] = 4] = "InTemplateHeadOrNoSubstitutionTemplate";
        EndOfLineState[EndOfLineState["InTemplateMiddleOrTail"] = 5] = "InTemplateMiddleOrTail";
        EndOfLineState[EndOfLineState["InTemplateSubstitutionPosition"] = 6] = "InTemplateSubstitutionPosition";
    })(/* istanbul ignore next */EndOfLineState = ts.EndOfLineState || (ts.EndOfLineState = {}));
    var TokenClass;
    (function (TokenClass) {
        TokenClass[TokenClass["Punctuation"] = 0] = "Punctuation";
        TokenClass[TokenClass["Keyword"] = 1] = "Keyword";
        TokenClass[TokenClass["Operator"] = 2] = "Operator";
        TokenClass[TokenClass["Comment"] = 3] = "Comment";
        TokenClass[TokenClass["Whitespace"] = 4] = "Whitespace";
        TokenClass[TokenClass["Identifier"] = 5] = "Identifier";
        TokenClass[TokenClass["NumberLiteral"] = 6] = "NumberLiteral";
        TokenClass[TokenClass["StringLiteral"] = 7] = "StringLiteral";
        TokenClass[TokenClass["RegExpLiteral"] = 8] = "RegExpLiteral";
    })(/* istanbul ignore next */TokenClass = ts.TokenClass || (ts.TokenClass = {}));
    var ScriptElementKind;
    (function (ScriptElementKind) {
        ScriptElementKind["unknown"] = "";
        ScriptElementKind["warning"] = "warning";
        /**
         * predefined type (void) or keyword (class)
         */
        ScriptElementKind["keyword"] = "keyword";
        /**
         * top level script node
         */
        ScriptElementKind["scriptElement"] = "script";
        /**
         * module foo {}
         */
        ScriptElementKind["moduleElement"] = "module";
        /**
         * class X {}
         */
        ScriptElementKind["classElement"] = "class";
        /**
         * var x = class X {}
         */
        ScriptElementKind["localClassElement"] = "local class";
        /**
         * interface Y {}
         */
        ScriptElementKind["interfaceElement"] = "interface";
        /**
         * type T = ...
         */
        ScriptElementKind["typeElement"] = "type";
        /**
         * enum E
         */
        ScriptElementKind["enumElement"] = "enum";
        ScriptElementKind["enumMemberElement"] = "enum member";
        /**
         * Inside module and script only
         * const v = ..
         */
        ScriptElementKind["variableElement"] = "var";
        /**
         * Inside function
         */
        ScriptElementKind["localVariableElement"] = "local var";
        /**
         * Inside module and script only
         * function f() { }
         */
        ScriptElementKind["functionElement"] = "function";
        /**
         * Inside function
         */
        ScriptElementKind["localFunctionElement"] = "local function";
        /**
         * foo() {} }
         */
        ScriptElementKind["memberFunctionElement"] = "method";
        /**
         * [get|set] foo:number; }
         */
        ScriptElementKind["memberGetAccessorElement"] = "getter";
        ScriptElementKind["memberSetAccessorElement"] = "setter";
        /**
         * class X { [public|private]* foo:number; }
         * interface Y { foo:number; }
         */
        ScriptElementKind["memberVariableElement"] = "property";
        /**
         * class X { constructor() { } }
         */
        ScriptElementKind["constructorImplementationElement"] = "constructor";
        /**
         * interface Y { ():number; }
         */
        ScriptElementKind["callSignatureElement"] = "call";
        /**
         * interface Y { []:number; }
         */
        ScriptElementKind["indexSignatureElement"] = "index";
        /**
         * interface Y { new():Y; }
         */
        ScriptElementKind["constructSignatureElement"] = "construct";
        /**
         * Y*: string)
         */
        ScriptElementKind["parameterElement"] = "parameter";
        ScriptElementKind["typeParameterElement"] = "type parameter";
        ScriptElementKind["primitiveType"] = "primitive type";
        ScriptElementKind["label"] = "label";
        ScriptElementKind["alias"] = "alias";
        ScriptElementKind["constElement"] = "const";
        ScriptElementKind["letElement"] = "let";
        ScriptElementKind["directory"] = "directory";
        ScriptElementKind["externalModuleName"] = "external module name";
        /**
         * <JsxTagName attribute1 attribute2={0} />
         */
        ScriptElementKind["jsxAttribute"] = "JSX attribute";
    })(/* istanbul ignore next */ScriptElementKind = ts.ScriptElementKind || (ts.ScriptElementKind = {}));
    var ScriptElementKindModifier;
    (function (ScriptElementKindModifier) {
        ScriptElementKindModifier["none"] = "";
        ScriptElementKindModifier["publicMemberModifier"] = "public";
        ScriptElementKindModifier["privateMemberModifier"] = "private";
        ScriptElementKindModifier["protectedMemberModifier"] = "protected";
        ScriptElementKindModifier["exportedModifier"] = "export";
        ScriptElementKindModifier["ambientModifier"] = "declare";
        ScriptElementKindModifier["staticModifier"] = "static";
        ScriptElementKindModifier["abstractModifier"] = "abstract";
        ScriptElementKindModifier["optionalModifier"] = "optional";
    })(/* istanbul ignore next */ScriptElementKindModifier = ts.ScriptElementKindModifier || (ts.ScriptElementKindModifier = {}));
    var ClassificationTypeNames;
    (function (ClassificationTypeNames) {
        ClassificationTypeNames["comment"] = "comment";
        ClassificationTypeNames["identifier"] = "identifier";
        ClassificationTypeNames["keyword"] = "keyword";
        ClassificationTypeNames["numericLiteral"] = "number";
        ClassificationTypeNames["operator"] = "operator";
        ClassificationTypeNames["stringLiteral"] = "string";
        ClassificationTypeNames["whiteSpace"] = "whitespace";
        ClassificationTypeNames["text"] = "text";
        ClassificationTypeNames["punctuation"] = "punctuation";
        ClassificationTypeNames["className"] = "class name";
        ClassificationTypeNames["enumName"] = "enum name";
        ClassificationTypeNames["interfaceName"] = "interface name";
        ClassificationTypeNames["moduleName"] = "module name";
        ClassificationTypeNames["typeParameterName"] = "type parameter name";
        ClassificationTypeNames["typeAliasName"] = "type alias name";
        ClassificationTypeNames["parameterName"] = "parameter name";
        ClassificationTypeNames["docCommentTagName"] = "doc comment tag name";
        ClassificationTypeNames["jsxOpenTagName"] = "jsx open tag name";
        ClassificationTypeNames["jsxCloseTagName"] = "jsx close tag name";
        ClassificationTypeNames["jsxSelfClosingTagName"] = "jsx self closing tag name";
        ClassificationTypeNames["jsxAttribute"] = "jsx attribute";
        ClassificationTypeNames["jsxText"] = "jsx text";
        ClassificationTypeNames["jsxAttributeStringLiteralValue"] = "jsx attribute string literal value";
    })(/* istanbul ignore next */ClassificationTypeNames = ts.ClassificationTypeNames || (ts.ClassificationTypeNames = {}));
    var ClassificationType;
    (function (ClassificationType) {
        ClassificationType[ClassificationType["comment"] = 1] = "comment";
        ClassificationType[ClassificationType["identifier"] = 2] = "identifier";
        ClassificationType[ClassificationType["keyword"] = 3] = "keyword";
        ClassificationType[ClassificationType["numericLiteral"] = 4] = "numericLiteral";
        ClassificationType[ClassificationType["operator"] = 5] = "operator";
        ClassificationType[ClassificationType["stringLiteral"] = 6] = "stringLiteral";
        ClassificationType[ClassificationType["regularExpressionLiteral"] = 7] = "regularExpressionLiteral";
        ClassificationType[ClassificationType["whiteSpace"] = 8] = "whiteSpace";
        ClassificationType[ClassificationType["text"] = 9] = "text";
        ClassificationType[ClassificationType["punctuation"] = 10] = "punctuation";
        ClassificationType[ClassificationType["className"] = 11] = "className";
        ClassificationType[ClassificationType["enumName"] = 12] = "enumName";
        ClassificationType[ClassificationType["interfaceName"] = 13] = "interfaceName";
        ClassificationType[ClassificationType["moduleName"] = 14] = "moduleName";
        ClassificationType[ClassificationType["typeParameterName"] = 15] = "typeParameterName";
        ClassificationType[ClassificationType["typeAliasName"] = 16] = "typeAliasName";
        ClassificationType[ClassificationType["parameterName"] = 17] = "parameterName";
        ClassificationType[ClassificationType["docCommentTagName"] = 18] = "docCommentTagName";
        ClassificationType[ClassificationType["jsxOpenTagName"] = 19] = "jsxOpenTagName";
        ClassificationType[ClassificationType["jsxCloseTagName"] = 20] = "jsxCloseTagName";
        ClassificationType[ClassificationType["jsxSelfClosingTagName"] = 21] = "jsxSelfClosingTagName";
        ClassificationType[ClassificationType["jsxAttribute"] = 22] = "jsxAttribute";
        ClassificationType[ClassificationType["jsxText"] = 23] = "jsxText";
        ClassificationType[ClassificationType["jsxAttributeStringLiteralValue"] = 24] = "jsxAttributeStringLiteralValue";
    })(/* istanbul ignore next */ClassificationType = ts.ClassificationType || (ts.ClassificationType = {}));
    // overwrite this namespace with the TypeScript compiler
    ObjectUtils_1.ObjectUtils.assign(ts, tsCompiler);
})(/* istanbul ignore next */ts = exports.ts || (exports.ts = {}));
